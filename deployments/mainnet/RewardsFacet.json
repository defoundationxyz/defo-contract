{
  "address": "0xBa27353D8cDa8DB093A1a3090AcE03ace230B11D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGross",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountNet",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGross",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountNet",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenids",
          "type": "uint256[]"
        }
      ],
      "name": "batchClaimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "batchStakeAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchStakeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumulatedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumulatedRewardAllUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allForAllTotalReward_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedGross",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedGrossAllUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTaxTier",
      "outputs": [
        {
          "internalType": "enum TaxTiers",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isClaimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "stakeAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ddb6bbf51db679c05f2eacb65bcb57792731e3a07609cdd3e2e4fdf1c692c87",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe4704c3794F20d5479942b2733F769c54Ca37de7",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1604759",
    "logsBloom": "0x
    "blockHash": "0x2f9ad59d581eb0bb36e2854bb09a4b1c42d629456d9285ccd5a5f3911217f902",
    "transactionHash": "0x4ddb6bbf51db679c05f2eacb65bcb57792731e3a07609cdd3e2e4fdf1c692c87",
    "logs": [],
    "blockNumber": 20501797,
    "cumulativeGasUsed": "1769546",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "646eb834cf547cb11fb83a1698df3ea6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGross\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNet\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGross\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNet\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenids\",\"type\":\"uint256[]\"}],\"name\":\"batchClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"batchStakeAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulatedRewardAllUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allForAllTotalReward_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedGross\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedGrossAllUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTaxTier\",\"outputs\":[{\"internalType\":\"enum TaxTiers\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"stakeAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Decentralized Foundation Team\",\"kind\":\"dev\",\"methods\":{\"getCumulatedReward()\":{\"returns\":{\"_0\":\"amount in DEFO (in wei precision)\"}},\"getCumulatedRewardAllUsers()\":{\"returns\":{\"allForAllTotalReward_\":\"amount in DEFO (in wei precision)\"}},\"getRewardAmount(uint256)\":{\"params\":{\"_tokenId\":\"unique NFT gem id\"},\"returns\":{\"_0\":\"pre-tax unclaimed reward in DEFO,- before deducting tax or charity, ready to be claimed or put to vault\"}},\"getStakedGross()\":{\"returns\":{\"_0\":\"total amount in DEFO (in wei precision)\"}},\"getStakedGrossAllUsers()\":{\"returns\":{\"_0\":\"total amount in DEFO (in wei precision)\"}},\"getTaxTier(uint256)\":{\"params\":{\"_tokenId\":\"unique NFT gem id\"},\"returns\":{\"_0\":\"current tax tier of the gem might be configurable, now it's a number in the range starting from 0 when 0 means nothing is payed out since there's no rewards in the first week, 4 is no tax, 1,2,3 - % in between (currently 30,30,15)\"}},\"isClaimable(uint256)\":{\"params\":{\"_tokenId\":\"unique NFT gem id\"},\"returns\":{\"_0\":\"true or false, checks for the pending maintenance and time passed since last claim\"}},\"stakeAndClaim(uint256,uint256)\":{\"params\":{\"_percent\":\"percent of what to put into the vault, as usual uses PRECISION_MULTIPLIER (which is 100 by defualt, e.g. 500 for 5%)\",\"_tokenId\":\"unique NFT gem id\"}}},\"title\":\"ERC721Facet EIP-2535 Diamond Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCumulatedReward()\":{\"notice\":\"amount of pre-taxed total reward earned by the sender for all time\"},\"getCumulatedRewardAllUsers()\":{\"notice\":\"amount of pre-taxed total reward earned by all the users for all time\"},\"getRewardAmount(uint256)\":{\"notice\":\"reward earned by the sender to the moment ready to be claimed or put to vault\"},\"getStakedGross()\":{\"notice\":\"amount of pre-taxed reward that are currently in the vault for the sender, so if put and then taken from the vault, it's not the return of the function\"},\"getStakedGrossAllUsers()\":{\"notice\":\"amount of pre-taxed reward that are currently in the vault for all users, it's not equal to the after-tax amount in the vault\"},\"getTaxTier(uint256)\":{\"notice\":\"gets tax tier for a gem\"},\"isClaimable(uint256)\":{\"notice\":\"checks if rewards can be claimed or not\"},\"stakeAndClaim(uint256,uint256)\":{\"notice\":\"This is used for the Vault Strategy, it puts the percent of all rewards to the vault and claims the rest\"},\"stakeReward(uint256,uint256)\":{\"notice\":\"todo decide whether move this to the vault facet or not - (to keep all staking/unstaking in one place), or to leave it here (this is a facet working with rewards  which can be either claimed or staked)\"}},\"notice\":\"The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/RewardsFacet.sol\":\"RewardsFacet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/base-facet/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n/**\\n * @title  BaseFacet\\n * @author Decentralized Foundation Team\\n * @notice BaseFacet is a base contract all facets to inherit, includes cross-facet utils and  common reusable functions for DEFO Diamond\\n */\\ncontract BaseFacet is Storage {\\n\\n    /* ====================== Modifiers ====================== */\\n\\n    modifier exists(uint256 _tokenId) {\\n        _requireExists(_tokenId);\\n        _;\\n    }\\n\\n    modifier onlyGemHolder(uint256 _tokenId) {\\n        require(s.nft.owners[_tokenId] == _msgSender(), \\\"You don't own this gem\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n    modifier nonZeroAddress(address _owner) {\\n        require(_owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        _;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _msgSender() internal override view returns (address sender_) {\\n        if (Context._msgSender() == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function _getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function _requireExists(uint256 _tokenId) internal view {\\n        require(_exists(_tokenId), \\\"ERC721: tokenId is not valid\\\");\\n    }\\n\\n    function _exists(uint256 _tokenId) internal view returns (bool) {\\n        return (s.nft.owners[_tokenId] != address(0));\\n    }\\n\\n    ///todo ensure passing memory array here to the public functions is pretty optimal\\n    function _getGemIds(address _user) internal view returns (uint256[] memory) {\\n        uint256 numberOfGems = s.nft.balances[_user];\\n        uint256[] memory gemIds = new uint256[](numberOfGems);\\n        for (uint256 i = 0; i < numberOfGems; i++) {\\n            uint256 gemId = s.nft.ownedTokens[_user][i];\\n            require(_exists(gemId), \\\"A gem doesn't exists\\\");\\n            gemIds[i] = gemId;\\n        }\\n        return gemIds;\\n    }\\n\\n    function _getAllUsers() internal view returns (address[] memory users_) {\\n        users_ = new address[](s.nft.allTokens.length);\\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\\n            users_[tokenId] = s.nft.owners[tokenId];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5ee18d83372dec082d66a9c61a88c6b5c034a741118da8be0524f9f1ed4f4b13\",\"license\":\"GPL-3.0\"},\"contracts/base-facet/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {AppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0x66f07eea1ae3a0fbf40fbf070d67bed29b4a0a2dfbb689f58292d28b5065418a\",\"license\":\"GPL-3.0\"},\"contracts/data-types/IDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n/**\\n*   @dev The only source for all the data structures used in the protocol storage\\n*   @dev This includes general config, gem type config, and mutable data\\n*/\\n\\n/// @dev number of payment tokens to enumerate the error, initially it's Defo and Dai,\\n/// @dev see PaymentTokens enum\\nuint256 constant PAYMENT_TOKENS = 2;\\n\\n/// @dev number of income recievers on yield gem mint\\nuint256 constant PAYMENT_RECEIVERS = 3;\\n\\n/// @dev total wallets on the protocol, see Wallets enum\\nuint256 constant WALLETS = 7;\\n\\n/// @dev total number of supported tax tiers\\nuint256 constant TAX_TIERS = 5;\\n\\n/**\\n*   @notice a struct for data compliance with erc721 standard\\n*   @param name Token name\\n*   @param symbol Token symbol\\n*   @param owners Mapping from token ID to owner address\\n*   @param balances Mapping owner address to token count\\n*   @param tokenApprovals Mapping from token ID to approved address\\n*   @param operatorApprovals Mapping from owner to operator approvals\\n*   @param ownedTokens Mapping from owner to list of owned token IDs\\n*   @param ownedTokensIndex Mapping from token ID to index of the owner tokens list\\n*   @param allTokens Array with all token ids, used for enumeration\\n*   @param allTokensIndex Mapping from token id to position in the allTokens array\\n*/\\n    struct ERC721Storage {\\n        string name;\\n        string symbol;\\n        Counters.Counter tokenIdTracker;\\n        mapping(uint256 => address) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n        string baseURI;\\n        mapping(address => mapping(uint256 => uint256)) ownedTokens;\\n        mapping(uint256 => uint256) ownedTokensIndex;\\n        uint256[] allTokens;\\n        mapping(uint256 => uint256) allTokensIndex;\\n        bool init;\\n    }\\n\\n\\n/// @notice token enum to index arrays of rates and addresses, the convention is that Dai is at place 0, Defo is at 1\\n/// @dev the order is extremely important once deployed\\n    enum PaymentTokens {\\n        Dai,\\n        Defo\\n    }\\n\\n/// @notice protocol wallets for easy enumeration,\\n/// @dev the order is extremely important once deployed, see configuration scripts\\n    enum Wallets {\\n        Treasury,\\n        RewardPool,\\n        LiquidityPair,\\n        Stabilizer,\\n        Charity,\\n        Vault,\\n        RedeemContract\\n    }\\n\\n\\n/// @notice these tiers correspond to the configurable percentage from the diamond storage\\n    enum TaxTiers {\\n        Tier0NoPayment,\\n        Tier1HugeTax,\\n        Tier2MediumTax,\\n        Tier3SmallTax,\\n        Tier4NoTax\\n    }\\n\\n/**\\n * @notice DefoTokenLimitConfig DEFO ERC20 Token transfer limiter, this is for the 1000 DEFO per 24h sale limitation, can be changes with setTransferLimit\\n * @param saleLimitPeriod initially 1 day\\n * @param saleLimitAmount initially 1000 tokens\\n*/\\n    struct DefoTokenLimitConfig {\\n        uint256 saleLimitPeriod;\\n        uint256 saleLimitAmount;\\n        bool limitByReward;\\n    }\\n\\n/**\\n * @notice Main Protocol Configuration structure\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set, including no minting\\n     * @param incomeDistributionOnMint distribution of the payment among tokens in percent rates, all values use percentage multiplier (see percent helper), here addresses are from the Addresses\\n     * @param maintenancePeriod a period in seconds for maintenance fee accrual, initially one month\\n     * @param rewardPeriod a period in seconds for generating yield gem rewards, initially one week\\n     * @param mintCountResetPeriod a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs.\\n     * @param taxScaleSinceLastClaimPeriod a period in seconds for a tax scale to work out, initially one week\\n     * @param taxRates tax rates in percent (with percent multiplier, see percent helper contract), initially 30%, 30%, 15%, 0\\n     * @param charityContributionRate charity rate (w multiplier as all percent values in the project), initially 5%\\n     * @param vaultWithdrawalRate fee paid to withdraw amount from the vault back to the earned rewards, initially 10%\\n     * @param taperRate taper rate, initially 20%\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set\\n     * @param mintLimitWindow a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs, see GemTypeConfig.maxMintsPerLimitWindow\\n     */\\n\\n    struct ProtocolConfig {\\n        IERC20[PAYMENT_TOKENS] paymentTokens;\\n        address[WALLETS] wallets;\\n        uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] incomeDistributionOnMint;\\n        // time periods\\n        uint32 maintenancePeriod;\\n        uint32 rewardPeriod;\\n        uint32 taxScaleSinceLastClaimPeriod;\\n        // taxes and contributions\\n        uint256[TAX_TIERS] taxRates;\\n        uint256 charityContributionRate;\\n        uint256 vaultWithdrawalTaxRate;\\n        uint256 taperRate;\\n        // locks\\n        bool mintLock;\\n        bool transferLock;\\n        // mint limit period for coutner reset\\n        uint32 mintLimitWindow;\\n        DefoTokenLimitConfig defoTokenLimitConfig;\\n    }\\n\\n/**\\n * @notice A struct containing configuration details for gemType\\n     * @param maintenanceFee Maintenance fee in Dai for the node type, amount in wei per month\\n     * @param rewardAmountDefo Reward in DEFO for the node type, amount in wei per week\\n     * @param price Price in DEFO and DAI (in wei), respectively, according to the PaymentTokens enum\\n     * @param taperRewardsThresholdDefo Taper threshold, in wei, decreasing rate every given amount of rewards in DEFO\\n     * @param maxMintsPerLimitWindow number of gems, mint limit for a node type, see ProtocolConfig.mintLimitWindow\\n     */\\n    struct GemTypeConfig {\\n        uint256 maintenanceFeeDai;\\n        uint256 rewardAmountDefo;\\n        uint256[PAYMENT_TOKENS] price;\\n        uint256 taperRewardsThresholdDefo;\\n        uint8 maxMintsPerLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct containing current mutable status for gemType\\n     * @param mintCount counter incrementing by one on every mint, during mintCountResetPeriod; after mintCountResetPeriod with no mints, reset to 0\\n     * @param endOfMintLimitWindow a moment to reset the mintCount counter to zero, set the new endOfMintLimitWindow and start over\\n     */\\n    struct GemTypeMintWindow {\\n        uint256 mintCount;\\n        uint32 endOfMintLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct describing current DEFO Token limiter input\\n * @param tokensSold DEFO tokens sold per limit window, \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfLastSale time of last sale\\n     */\\n    struct DEFOTokenLimitWindow {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfLastSale;\\n    }\\n\\n/**\\n * @notice A struct describing DEFO Token limit per weekly rewards\\n * @param tokensSold DEFO tokens sold per reward period window starting from the first sale \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfWindowStart time of first sale in the window\\n     */\\n    struct DEFOTokenLimitPerRewards {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfWindowStart;\\n    }\\n\\n    enum Booster {\\n        None,\\n        Delta,\\n        Omega\\n    }\\n\\n/**\\n * @notice A struct describing financial state, provides the complete state for user, gem, or protocol total.\\n * @notice It gives the current exact balance of the Vault, Rewards, and Charity.\\n * @param claimedGross rewards amount previously claimed for all time, gross amount - before tax and charity\\n * @param claimedNet rewards claimed and to user, net amount after tax and charity\\n * @param stakedGross amount removed from rewards to stake, charity not yet deducted\\n * @param stakedNet amount put to the vault - charity has been deducted\\n * @param unStakedGross  amount removed from the vault, pre withdraw tax and charity\\n * @param unStakedGrossUpped  amount removed from the vault gross-upped with charity to equal to the stakedGross amount\\n * @param unStakedNet  amount returned to the earned rewards, post withdraw tax and charity\\n * @param donated sent to charity\\n * @param claimTaxPaid claim tax deducted - 30%, 15%, 15%\\n * @param vaultTaxPaid vault withdrawal tax deducted\\n     */\\n    struct Fi {\\n        uint256 claimedGross;\\n        uint256 claimedNet;\\n        uint256 stakedGross;\\n        uint256 stakedNet;\\n        uint256 unStakedGross;\\n        uint256 unStakedGrossUp;\\n        uint256 unStakedNet;\\n        uint256 donated;\\n        uint256 claimTaxPaid;\\n        uint256 vaultTaxPaid;\\n    }\\n\\n/**\\n * @notice current state of a gem, a gem is an instance with consistent yield and fee rates specified by the pair (gemType, booster)\\n * @param gemType node type, initially it's  0 -> Ruby , 1 -> Sapphire, 2 -> Diamond, and boosters\\n * @param booster node Booster 0 -> None , 1 -> Delta , 2 -> Omega\\n * @param mintTime timestamp of the mint time\\n * @param lastRewardWithdrawalTime timestamp of last reward claim OR stake. Same as mintTime if not yet claimed.\\n * @param lastMaintenanceTime timestamp of the last maintenance (could be a date in the future in case of the upfront payment)\\n * @param presold flag that this gem was bought on presale, used to avoid double minting\\n*/\\n    struct Gem {\\n        uint8 gemTypeId;\\n        Booster booster;\\n        uint32 mintTime;\\n        uint32 lastRewardWithdrawalTime;\\n        uint32 lastMaintenanceTime;\\n        Fi fi;\\n        bool presold;\\n    }\\n\\n/**\\n*   @notice Main Contract Storage utilizing App Storage pattern for Diamond Proxy data organization\\n*   @param config main configuration, basically everything except gemType specific\\n*   @param gemTypes supported gem types with their details, gemTypeId is the index of the array\\n*   @param gems mapping indexed by tokenId, where tokenId is in the nft.allTokens\\n*   @param gemTypesMintWindows windows for limiting yield gem mints per gem type\\n*   @param defoTokenLimitWindow window for limiting DEFO Token sale\\n*   @param nft ERC721 standard related storage\\n*   @param total cumulated amounts for all operations\\n*   @param usersFi financial info per each user\\n*   @param usersNextGemBooster used for presale, number (uint256) of boosters (Booster) with a type (uint8) left for a user (address)\\n*/\\n    struct AppStorage {\\n        // configuration\\n        ProtocolConfig config;\\n        GemTypeConfig[] gemTypes;\\n        // current state\\n        GemTypeMintWindow[] gemTypesMintWindows;\\n        DEFOTokenLimitWindow defoTokenLimitWindow;\\n        mapping(uint256 => Gem) gems;\\n        ERC721Storage nft;\\n        // Cumulations\\n        Fi total;\\n        // User data, users list is s.nft.owners, size s.nft.allTokens.length (managed by ERC721Enumerable)\\n        mapping(address => Fi) usersFi;\\n        mapping(address => mapping(uint8 => mapping(Booster => uint256))) usersNextGemBooster;\\n        DEFOTokenLimitPerRewards defoTokenLimitPerRewards;\\n    }\\n\",\"keccak256\":\"0x761972183d90438439927f5ea3a7773d86e1e60e733e98f82c2903aaeee02f07\",\"license\":\"GPL-3.0\"},\"contracts/facets/RewardsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\nimport \\\"../interfaces/IRewards.sol\\\";\\nimport \\\"../base-facet/BaseFacet.sol\\\";\\nimport \\\"../libraries/LibDonations.sol\\\";\\nimport \\\"../libraries/LibMaintainer.sol\\\";\\nimport \\\"../libraries/PercentHelper.sol\\\";\\nimport \\\"../libraries/BoosterHelper.sol\\\";\\nimport \\\"../libraries/PeriodicHelper.sol\\\";\\nimport \\\"../libraries/TimeHelper.sol\\\";\\nimport \\\"../libraries/TaxHelper.sol\\\";\\nimport \\\"../libraries/FiHelper.sol\\\";\\n\\n/** @title  ERC721Facet EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\\n*/\\ncontract RewardsFacet is BaseFacet, IRewards {\\n    using FiHelper for Fi;\\n    using BoosterHelper for Booster;\\n\\n    /* ====================== Modifiers ====================== */\\n    modifier onlyClaimable(uint256 _tokenId) {\\n        require(isClaimable(_tokenId), \\\"Not claimable\\\");\\n        _;\\n    }\\n\\n    /* ============ External and Public Functions ============ */\\n    function claimReward(uint256 _tokenId) public onlyGemHolder(_tokenId) onlyClaimable(_tokenId) {\\n        _claimRewardAmount(_tokenId, getRewardAmount(_tokenId));\\n    }\\n\\n    function batchClaimReward(uint256[] calldata _tokenids) external {\\n        for (uint256 index = 0; index < _tokenids.length; index++) {\\n            claimReward(_tokenids[index]);\\n        }\\n    }\\n\\n    function stakeReward(uint256 _tokenId, uint256 _amount) onlyGemHolder(_tokenId) exists(_tokenId) public {\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        address[WALLETS] storage wallets = s.config.wallets;\\n        address user = _msgSender();\\n        Fi memory op;\\n\\n        require(_amount > 0, \\\"Zero rewards for a gem\\\");\\n        uint256 rewardGross = getRewardAmount(_tokenId);\\n        require(_amount <= rewardGross, \\\"Not enough rewards\\\");\\n\\n        op.donated = PercentHelper.rate(_amount, s.config.charityContributionRate);\\n        op.stakedGross = _amount;\\n        op.stakedNet = _amount - op.donated;\\n\\n        defo.transferFrom(\\n            wallets[uint(Wallets.RewardPool)],\\n            wallets[uint(Wallets.Charity)],\\n            op.donated);\\n        emit LibDonations.Donated(user, op.donated);\\n\\n\\n        defo.transferFrom(\\n            wallets[uint(Wallets.RewardPool)],\\n            wallets[uint(Wallets.Vault)],\\n            op.stakedNet);\\n        emit Staked(user, op.stakedGross, op.stakedNet);\\n\\n        op.updateStorage(_tokenId, user);\\n    }\\n\\n    function stakeAndClaim(uint256 _tokenId, uint256 _percent) public onlyGemHolder(_tokenId) onlyClaimable(_tokenId) {\\n        uint256 reward = getRewardAmount(_tokenId);\\n        uint256 rewardToStake = PercentHelper.rate(reward, _percent);\\n        stakeReward(_tokenId, rewardToStake);\\n        claimReward(_tokenId);\\n    }\\n\\n\\n    function batchStakeReward(uint256[] calldata _tokenIds, uint256[] calldata _amounts) external {\\n        require(_tokenIds.length == _amounts.length, \\\"DEFORewards:_tokendIds-_amounts-inconsistent\\\");\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            stakeReward(_tokenIds[i], _amounts[i]);\\n        }\\n    }\\n\\n    function batchStakeAndClaim(uint256[] calldata _tokenIds, uint256 _percent) external {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            stakeAndClaim(_tokenIds[i], _percent);\\n        }\\n    }\\n\\n    function getRewardAmount(uint256 _tokenId) public exists(_tokenId) view returns (uint256) {\\n        uint256 rewardToDate = _getCumulatedRewardAmountGross(_tokenId);\\n        rewardToDate += s.gems[_tokenId].fi.unStakedNet;\\n        rewardToDate -= s.gems[_tokenId].fi.claimedGross;\\n        rewardToDate -= s.gems[_tokenId].fi.stakedGross;\\n        return rewardToDate;\\n    }\\n\\n    function isClaimable(uint256 _tokenId) public view returns (bool) {\\n        return (\\n        TimeHelper.hasPassedFromOrNotHappenedYet(s.gems[_tokenId].lastRewardWithdrawalTime, s.config.rewardPeriod) &&\\n        LibMaintainer._getPendingMaintenanceFee(_tokenId) == 0 &&\\n        getRewardAmount(_tokenId) != 0);\\n    }\\n\\n    function getCumulatedReward() external view returns (uint256) {\\n        address user = _msgSender();\\n        uint256[] memory gemIds = _getGemIds(user);\\n        uint256 reward = 0;\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            reward += _getCumulatedRewardAmountGross(gemIds[i]);\\n        }\\n        return reward;\\n    }\\n\\n    function getCumulatedRewardAllUsers() external view returns (uint256 allForAllTotalReward_) {\\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\\n            allForAllTotalReward_ += _getCumulatedRewardAmountGross(tokenId);\\n        }\\n    }\\n\\n\\n    function getStakedGross() external view returns (uint256) {\\n        return s.usersFi[_msgSender()].stakedGross - s.usersFi[_msgSender()].unStakedGrossUp;\\n    }\\n\\n    function getStakedGrossAllUsers() external view returns (uint256) {\\n        return s.total.stakedGross - s.total.unStakedGrossUp;\\n    }\\n\\n    function getTaxTier(uint256 _tokenId) public view returns (TaxTiers) {\\n        return TaxHelper.getTaxTier(uint32(block.timestamp) - s.gems[_tokenId].lastRewardWithdrawalTime);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _claimRewardAmount(uint256 _tokenId, uint256 _amount) private {\\n        Gem storage gem = s.gems[_tokenId];\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        address[WALLETS] storage wallets = s.config.wallets;\\n\\n        require(_amount > 0, \\\"No amount to claim\\\");\\n\\n        Fi memory op;\\n        op.claimedGross = _amount;\\n\\n        TaxTiers taxTier = getTaxTier(_tokenId);\\n        op.claimTaxPaid = PercentHelper.rate(op.claimedGross, s.config.taxRates[uint256(taxTier)]);\\n        op.donated = PercentHelper.rate(op.claimedGross, s.config.charityContributionRate);\\n        op.claimedNet = op.claimedGross - op.claimTaxPaid - op.donated;\\n\\n        address user = _msgSender();\\n        defo.transferFrom(\\n            wallets[uint(Wallets.RewardPool)],\\n            wallets[uint(Wallets.Charity)],\\n            op.donated);\\n        emit LibDonations.Donated(user, op.donated);\\n\\n        defo.transferFrom(\\n            wallets[uint(Wallets.RewardPool)],\\n            user,\\n            op.claimedNet);\\n        gem.lastRewardWithdrawalTime = uint32(block.timestamp);\\n        emit Claimed(user, op.claimedGross, op.claimedNet);\\n\\n        op.updateStorage(_tokenId, user);\\n    }\\n\\n    function _getCumulatedRewardAmountGross(uint256 _tokenId) internal view returns (uint256) {\\n        Gem memory gem = s.gems[_tokenId];\\n        GemTypeConfig memory gemType = s.gemTypes[gem.gemTypeId];\\n        uint256 boostedRewardAmount = gem.booster.boostRewardsRate(gemType.rewardAmountDefo);\\n        uint256 totalReward = PeriodicHelper.calculateTaperedReward(\\n            block.timestamp - gem.mintTime, //period to calculate\\n            gemType.taperRewardsThresholdDefo,\\n            s.config.taperRate,\\n            boostedRewardAmount,\\n            s.config.rewardPeriod);\\n        return totalReward;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xcfb723adf272898a861071ede57ddd92d5ecc6fc40870e228da8ea2161f7a573\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/** @title  IYieldGem EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice Rewards Interface, operation with rewards: taxation, charity, claiming and putting to the vault\\n*/\\ninterface IRewards {\\n    event Claimed(address indexed user, uint256 amountGross, uint256 amountNet);\\n    event Staked(address indexed user, uint256 amountGross, uint256 amountNet);\\n\\n    function claimReward(uint256 _tokenId) external;\\n\\n    function batchClaimReward(uint256[] calldata _tokenids) external;\\n\\n    ///todo decide whether move this to the vault facet or not - (to keep all staking/unstaking in one place), or to leave it here (this is a facet working with rewards  which can be either claimed or staked)\\n    function stakeReward(uint256 _tokenId, uint256 _amount) external;\\n\\n    /**\\n*   @notice This is used for the Vault Strategy, it puts the percent of all rewards to the vault and claims the rest\\n    *   @param _tokenId unique NFT gem id\\n    *   @param _percent percent of what to put into the vault, as usual uses PRECISION_MULTIPLIER (which is 100 by defualt, e.g. 500 for 5%)\\n    */\\n    function stakeAndClaim(uint256 _tokenId, uint256 _percent) external;\\n\\n    function batchStakeReward(uint256[] calldata _tokenIds, uint256[] calldata _amounts) external;\\n\\n    function batchStakeAndClaim(uint256[] calldata _tokenIds, uint256 _percent) external;\\n\\n    /**\\n    *   @notice reward earned by the sender to the moment ready to be claimed or put to vault\\n    *   @param _tokenId unique NFT gem id\\n    *   @return pre-tax unclaimed reward in DEFO,- before deducting tax or charity, ready to be claimed or put to vault\\n    */\\n    function getRewardAmount(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n*   @notice checks if rewards can be claimed or not\\n    *   @param _tokenId unique NFT gem id\\n    *   @return true or false, checks for the pending maintenance and time passed since last claim\\n    */\\n    function isClaimable(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n    *   @notice amount of pre-taxed total reward earned by the sender for all time\\n    *   @return amount in DEFO (in wei precision)\\n    */\\n    function getCumulatedReward() external view returns (uint256);\\n\\n    /**\\n    *   @notice amount of pre-taxed total reward earned by all the users for all time\\n    *   @return amount in DEFO (in wei precision)\\n    */\\n    function getCumulatedRewardAllUsers() external view returns (uint256);\\n\\n\\n    /**\\n    *   @notice amount of pre-taxed reward that are currently in the vault for the sender, so if put and then taken from the vault, it's not the return of the function\\n    *   @return total amount in DEFO (in wei precision)\\n    */\\n    function getStakedGross() external view returns (uint256);\\n\\n    /**\\n    *   @notice amount of pre-taxed reward that are currently in the vault for all users, it's not equal to the after-tax amount in the vault\\n    *   @return total amount in DEFO (in wei precision)\\n    */\\n    function getStakedGrossAllUsers() external view returns (uint256);\\n\\n    /**\\n    *   @notice gets tax tier for a gem\\n    *   @param _tokenId unique NFT gem id\\n    *   @return current tax tier of the gem might be configurable, now it's a number in the range starting from 0 when 0 means nothing is payed out since there's no rewards in the first week, 4 is no tax, 1,2,3 - % in between (currently 30,30,15)\\n    */\\n    function getTaxTier(uint256 _tokenId) external view returns (TaxTiers);\\n\\n\\n}\\n\",\"keccak256\":\"0x9846f18f4a4a152ad462801af7a58eae0cb35751450714e580de33237b8b0faf\",\"license\":\"GPL-3.0\"},\"contracts/libraries/BoosterHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport {Booster} from \\\"../data-types/IDataTypes.sol\\\";\\nimport \\\"./PercentHelper.sol\\\";\\n\\n/// @notice Library to boost rates and fees\\n/// @author Decentralized Foundation\\n///todo utilize percenthelper\\nlibrary BoosterHelper {\\n    /// @notice boosting rewards rate (which is an amount per second), 50% for omega, 25% for delta\\n    function boostRewardsRate(Booster booster, uint256 rate) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            //50% more\\n            return rate * 15000 / 10000;\\n        } else if (booster == Booster.Delta) {\\n            //25% more\\n            return rate * 12500 / 10000;\\n        } else return rate;\\n    }\\n\\n    /// @notice reducing fees, 50% for omega, 25% reduction for delta\\n    function reduceMaintenanceFee(Booster booster, uint256 fee) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            return fee / 2;\\n        } else if (booster == Booster.Delta) {\\n            return fee * 7500 / 10000;\\n        } else return fee;\\n    }\\n\\n    function reduceVaultWithdrawalFee(Booster booster, uint256 fee) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            return fee * 1000 / 10000;\\n        } else if (booster == Booster.Delta) {\\n            return fee / 2;\\n        } else return fee;\\n    }\\n}\\n\",\"keccak256\":\"0xee7e3041146e7c8cf718966e77889b0bd8f631488dfc50bb7796e8b0292c3730\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FiHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/**\\n * @notice Library for Fi financial operations structure\\n * @author Decentralized Foundation Team\\n */\\n\\nlibrary FiHelper {\\n    function updateStorage(Fi memory _add, uint256 _tokenId, address _user) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        Gem storage gem = s.gems[_tokenId];\\n\\n\\n        ///todo refactor financial consisitency checks into a separate function\\n        //        require(\\n        //            (_add.claimedGross - _add.claimTaxPaid - _add.donated == _add.claimedNet) &&\\n        //            (_add.unStakedGross - _add.vaultTaxPaid - _add.donated == _add.unStakedNet) &&\\n        //            (_add.stakedGross - _add.donated == _add.stakedNetstakedNet)\\n        //        , \\\"wrong financial operation structure\\\");\\n\\n        fiAdd(s.total, _add);\\n        fiAdd(gem.fi, _add);\\n        fiAdd(s.usersFi[_user], _add);\\n    }\\n\\n    function fiAdd(Fi storage _initial, Fi memory _add) internal {\\n        _initial.claimedGross += _add.claimedGross;\\n        _initial.claimedNet += _add.claimedNet;\\n        _initial.stakedGross += _add.stakedGross;\\n        _initial.stakedNet += _add.stakedNet;\\n        _initial.unStakedGross += _add.unStakedGross;\\n        _initial.unStakedGrossUp += _add.unStakedGrossUp;\\n        _initial.unStakedNet += _add.unStakedNet;\\n        _initial.donated += _add.donated;\\n        _initial.claimTaxPaid += _add.claimTaxPaid;\\n        _initial.vaultTaxPaid += _add.vaultTaxPaid;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc6679d153baead03e166e2ab90e5ac78e8d857119b2c7a109398ea5e073d4f84\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/** @title  LibAppStorage EIP-2535 Diamond Facet Storage\\n  * @author Decentralized Foundation Team\\n  * @notice This diamond storage library is inherited by all facets and imported in libraries\\n*/\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf2e84cec0bd10a28b47d23a086c1d77096efac4f3b3d6f1c132ebbe814c8b1d5\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibDonations.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n// helper for limit daily mints\\nlibrary LibDonations {\\n    event Donated(address indexed user, uint256 amount);\\n}\\n\",\"keccak256\":\"0xffec6a5e5edf3407bff6f08539b45c493f00d6bf32d10e1efdd12a28a3e7f757\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibMaintainer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\nimport \\\"./PercentHelper.sol\\\";\\nimport \\\"./BoosterHelper.sol\\\";\\nimport \\\"./PeriodicHelper.sol\\\";\\n\\n// helper for limit daily mints\\nlibrary LibMaintainer {\\n    function _getPendingMaintenanceFee(uint256 _tokenId) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        Gem storage gem = s.gems[_tokenId];\\n\\n        // time period checks - if it's not necessary or too early\\n        if (gem.lastMaintenanceTime >= block.timestamp)\\n            return 0;\\n        uint32 feePaymentPeriod = uint32(block.timestamp) - gem.lastMaintenanceTime;\\n        //\\\"Too soon, maintenance fee has not been yet accrued\\\");\\n        if (feePaymentPeriod <= s.config.maintenancePeriod)\\n            return 0;\\n\\n        // amount calculation\\n        uint256 discountedFeeDai = BoosterHelper.reduceMaintenanceFee(gem.booster, s.gemTypes[gem.gemTypeId].maintenanceFeeDai);\\n        uint256 feeAmount = PeriodicHelper.calculatePeriodic(discountedFeeDai, gem.lastMaintenanceTime, s.config.maintenancePeriod);\\n        return feeAmount;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0b881849ef7c7dbf485062fb23066beeb60b9189b20699470188c52a90193661\",\"license\":\"GPL-3.0\"},\"contracts/libraries/PercentHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n\\n/**\\n * @notice Library for percentage integer math, note PERCENTAGE_PRECISION_MULTIPLIER when configuring the protocol\\n * @author Decentralized Foundation Team\\n * @dev PERCENTAGE_PRECISION_MULTIPLIER*100 = 10000 greater than real percent, so 20% is represented as 2000, meaning 0.2\\n */\\n\\nlibrary PercentHelper {\\n    uint256 constant PERCENTAGE_PRECISION_MULTIPLIER = 100;\\n    uint256 constant HUNDRED_PERCENT = 100 * PERCENTAGE_PRECISION_MULTIPLIER;\\n\\n    /**\\n     * @dev simply a ratio of the given value, e.g. if tax is 30% and value if 100 the function gives 30\\n     * @param value Value to get ratio from\\n     * @param tax Percent to apply\\n     */\\n    ///todo make pure once got rid of the console.log\\n    function rate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (value * tax) / HUNDRED_PERCENT : 0;\\n    }\\n\\n    /**\\n    * @dev simple gross-up, gives back gross for net value, if charity is 5%, then gross up of 95 gives 100\\n     * @param netValue Net value to gross up\\n     * @param tax Percent that was applied\\n     */\\n    function grossUp(uint256 netValue, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (netValue * HUNDRED_PERCENT) / (HUNDRED_PERCENT - tax) : 0;\\n    }\\n\\n\\n    /// @dev received inverted percent for taper calc, if ratio is 20%, then 1/(1-20%) = 25%\\n    function invertedRate(uint256 value, uint256 ratio) internal pure returns (uint256) {\\n        return value * HUNDRED_PERCENT / (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function oneHundredLessPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function minusHundredPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (ratio - HUNDRED_PERCENT);\\n    }\\n\\n\\n    function reversePercent(uint256 ratio) internal pure returns (uint256) {\\n        return PERCENTAGE_PRECISION_MULTIPLIER / ratio;\\n    }\\n\\n    function percentPower(uint256 value, uint256 ratio, uint pow) internal pure returns (uint256) {\\n        return value * PERCENTAGE_PRECISION_MULTIPLIER ** pow / ratio ** pow;\\n    }\\n\\n\\n    /// @dev simply value less given percentage, e.g. if tax is 30% the functio gives 70 for 100\\n    function lessRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value - rate(value, tax);\\n    }\\n\\n    function plusRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value + rate(value, tax);\\n    }\\n}\\n\",\"keccak256\":\"0x70d9a8e3cf2aad9102eda57cb8d7efacca2f96f89d50aef7c6088f522c4763ae\",\"license\":\"GPL-3.0\"},\"contracts/libraries/PeriodicHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./PercentHelper.sol\\\";\\nimport \\\"./BoosterHelper.sol\\\";\\n\\n/// @notice Library for reward calculations\\n/// @author Decentralized Foundation\\nlibrary PeriodicHelper {\\n    using PercentHelper for uint256;\\n\\n    /// @dev calculates rewards with a second precision to a given date, not prorated to date\\n    function calculatePeriodicToDate(\\n        uint256 ratePerPeriod,\\n        uint32 lastEventTime,\\n        uint32 toDate,\\n        uint32 payOrDeductPeriod\\n    ) internal pure returns (uint) {\\n        return (toDate > lastEventTime) ? ((toDate - lastEventTime) / payOrDeductPeriod) * ratePerPeriod : 0;\\n    }\\n\\n    /// @dev calculates rewards with a second precision, not prorated to date\\n    function calculatePeriodic(\\n        uint256 ratePerPeriod,\\n        uint32 lastEventTime,\\n        uint32 payOrDeductPeriod\\n    ) internal view returns (uint) {\\n\\n        return calculatePeriodicToDate(ratePerPeriod, lastEventTime, uint32(block.timestamp), payOrDeductPeriod);\\n    }\\n\\n\\n\\n    // @notice Calculated Tapered Reward starting from the mint time. To get the reward call this function and subtract already paid from it.\\n    // @return taperedReward, updatedRewardRate\\n    function calculateTaperedReward(\\n        uint timePeriod, //block.timestamp - mintTime\\n        uint256 taperThreshold, //120 for diamond\\n        uint256 taperPercent, //80% usually, NOTE this is 80% but not 20%\\n        uint ratePerPeriod, //5 for diamond, pass already boosted rate if boost is applicable\\n        uint payOrDeductPeriod //in seconds, initially it's 1 week\\n    ) internal pure returns (uint256 taperedReward) {\\n        uint256 taperedPercent = taperPercent.oneHundredLessPercent();\\n        // Basically it's a geometric progression of the timestamps b_n = b_1*q_(n-1),\\n        // For simplicity startTime is zero, so timePeriod should be block.timestamp - startTime\\n        // where q = 1/taperedPercent, b_1 =  taperThreshold/ratePerPeriod\\n        // So that b_0 = taperThreshold/ratePerPeriod (which is 120/5= 24 weeks for the first taper from the startTime)\\n        // b_1 = taperThreshold/(ratePerPeriod*taperedPercent^1)  (which is 120/(5*0.8)= 30 weeks from the previous point to get 120 $DEFO by the tapered rate of 4)\\n        // b_2 = taperThreshold/(ratePerPeriod*taperedPercent^2)\\n        // ....\\n        // b_n = taperThreshold/(ratePerPeriod  *taperedPercent^n)\\n        // b_(n+1) = taperThreshold/(ratePerPeriod*taperedPercent^(n+1))\\n        // So that SUM_n_from_1_to_n(b_n)<=timePeriod, but SUM_n_from_1_to_(n+1)(b_n)>timePeriod\\n        // Actual points on the timeline are S_i which are sums of the taper intervals b_i\\n        //\\n        // 1. At first, lets' find n and S_n\\n        // Sum of geometric progression is Sn = b_1 * (q^n-1)/(q-1)\\n        // So we just loop to find while Sn<=timePeriod, so that Sn = taperThreshold/ratePerPeriod * (1/taperedPercent^n-1)/(1/taperedPercent -1)\\n        //\\n        // for example, for diamond gem: it's 120/5*(1/0.8**(N-1)-1)/(1/0.8-1)\\n        //\\n        // 2. Once we found n and S_n, the amount to pay would be taperThreshold*n+(timePeriod - S_n)*ratePerPeriod*taperedPercent^n\\n        // for example. if we got 100 weeks, n =3 and the formula is 120*3+(100-91.5)*5*0.8**3 = 381.76\\n        // We calculate the finalAmount and deduct what was paid already to calculate the payment.\\n        uint finalAmount;\\n        uint sN = 0;\\n        uint sNp1 = 0;\\n        //S_(n+1)\\n        uint n = 0;\\n        do {\\n            //this is the formula, but the percents are with precision multiplier\\n            //sN = taperThreshold/ratePerPeriod * (1/taperedPercent**n-1)/(1/taperedPercent -1);\\n            sN = sNp1;\\n            sNp1 = taperThreshold / ratePerPeriod *\\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT ** n / taperedPercent ** n - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER) /\\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT / taperedPercent - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER);\\n            n++;\\n        }\\n        while (payOrDeductPeriod * sNp1 <= timePeriod);\\n        n = n - 2;\\n        //convert sN to Seconds, that's just for the logs to show in weeks\\n        sN *= payOrDeductPeriod;\\n        //        uint bN = payOrDeductPeriod * taperThreshold / (ratePerPeriod * taperedPercent ** n);\\n        // The whole process makes sense if the current time is later than the 1st taper event\\n        uint finalRate;\\n        if (sN != 0 && timePeriod > sN) {\\n            finalRate = ratePerPeriod * taperedPercent ** (n) / PercentHelper.HUNDRED_PERCENT ** (n);\\n            finalAmount = taperThreshold * n + ((timePeriod - sN) / payOrDeductPeriod) * finalRate;\\n        }\\n        else {\\n            finalRate = ratePerPeriod;\\n            finalAmount = timePeriod / payOrDeductPeriod * ratePerPeriod;\\n        }\\n        return finalAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xf4a075af12a13cf32cd59469bcd6274204d7cb575cd1bf177bf447eabcbaf2ab\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TaxHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./PercentHelper.sol\\\";\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/// @notice Library for withdrawal tax operations\\nlibrary TaxHelper {\\n    /// @dev gets an index to the taxTable\\n    /// @param _timeFromLastRewardWithdrawal time in seconds passed from the last claim or stake\\n    /// @return taxTier_ tax tier, can be a configurable mapping, now it's 0- 100% (rewards have not accrued yet), 1- 30%, 2-30%, 3- 15%, 4-0%.\\n    function getTaxTier(uint256 _timeFromLastRewardWithdrawal) internal view returns (TaxTiers taxTier_) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint32 scale = s.config.taxScaleSinceLastClaimPeriod;\\n\\n        taxTier_ = TaxTiers.Tier4NoTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 4) taxTier_ = TaxTiers.Tier3SmallTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 3) taxTier_ = TaxTiers.Tier2MediumTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 2) taxTier_ = TaxTiers.Tier1HugeTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 1) taxTier_ = TaxTiers.Tier0NoPayment;\\n    }\\n\\n    /// @dev gets an index to taxRates from config\\n    /// @param _lastRewardWithdrawalTimestamp time in seconds of the last claim or stake to vault\\n    /// @return timestamp of the next tax tier change\\n    function wenNextTaxTier(uint32 _lastRewardWithdrawalTimestamp) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint32 scale = s.config.taxScaleSinceLastClaimPeriod;\\n\\n        if (_lastRewardWithdrawalTimestamp > uint32(block.timestamp)) {\\n            return 0;\\n        }\\n        uint256 _timeFromLastRewardWithdrawal = uint32(block.timestamp) - _lastRewardWithdrawalTimestamp;\\n        if (_timeFromLastRewardWithdrawal > scale * 4)\\n            return 0;\\n        else\\n            return _lastRewardWithdrawalTimestamp + scale;\\n    }\\n\\n    /// function retrieves tax rate for given tax tier\\n    function getTaxRate(TaxTiers _taxTier) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.config.taxRates[uint256(_taxTier)];\\n    }\\n}\\n\",\"keccak256\":\"0x34878351c0e713530b4762b7139f603504a40267093da4f92b0621f9fc14c3c4\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TimeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/// @notice Operations with time periods and durations\\nlibrary TimeHelper {\\n    function hasPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 lockPeriod) internal view returns (bool) {\\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent > lockPeriod);\\n    }\\n\\n    function notPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 freePeriod) internal view returns (bool) {\\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent < freePeriod);\\n    }\\n}\\n\",\"keccak256\":\"0x7f6ce8b464efa3f9a47d7fcaed8830e2890e160e6bac07e7c38171aa48460e3a\",\"license\":\"GPL-3.0\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611c05806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063a4ff6c481161008c578063b816b65d11610066578063b816b65d14610194578063c760da04146101a7578063c84993af146101ba578063d8e1214f146101cd57600080fd5b8063a4ff6c4814610166578063ae169a5014610179578063b68a0ff61461018c57600080fd5b806306547abd146100d45780630a5626db146100fd5780634d0c509e1461011357806383b4c8651461012857806389610a091461013b57806394c0734b1461015e575b600080fd5b6100e76100e23660046117b7565b6101d5565b6040516100f491906117e6565b60405180910390f35b61010561020f565b6040519081526020016100f4565b61012661012136600461185a565b610248565b005b6101266101363660046118a6565b61028d565b61014e6101493660046117b7565b610354565b60405190151581526020016100f4565b6101056103b1565b610126610174366004611912565b6103c8565b6101266101873660046117b7565b6104af565b610105610577565b6101266101a2366004611912565b6105e6565b6101266101b5366004611934565b610935565b6101056101c83660046117b7565b610973565b6101056109ec565b6000818152602080526040812054610209906101fe90600160301b900463ffffffff164261198c565b63ffffffff16610a5a565b92915050565b6000805b602b548110156102445761022681610aef565b61023090836119b1565b91508061023c816119c9565b915050610213565b5090565b60005b8281101561028757610275848483818110610268576102686119e2565b90506020020135836103c8565b8061027f816119c9565b91505061024b565b50505050565b8281146102f65760405162461bcd60e51b815260206004820152602c60248201527f4445464f526577617264733a5f746f6b656e644964732d5f616d6f756e74732d60448201526b1a5b98dbdb9cda5cdd195b9d60a21b60648201526084015b60405180910390fd5b60005b8381101561034d5761033b858583818110610316576103166119e2565b9050602002013584848481811061032f5761032f6119e2565b905060200201356105e6565b80610345816119c9565b9150506102f9565b5050505050565b6000818152602080526040812054600f546103879163ffffffff600160301b909104811691640100000000900416610d33565b8015610399575061039782610d52565b155b801561020957506103a982610973565b151592915050565b6033546030546000916103c3916119f8565b905090565b816103d1610e37565b6000828152602460205260409020546001600160a01b039081169116146104335760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ed565b8261043d81610354565b6104795760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b60448201526064016102ed565b600061048485610973565b905060006104928286610e93565b905061049e86826105e6565b6104a7866104af565b505050505050565b806104b8610e37565b6000828152602460205260409020546001600160a01b0390811691161461051a5760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ed565b8161052481610354565b6105605760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b60448201526064016102ed565b6105728361056d85610973565b610ec2565b505050565b600080610582610e37565b9050600061058f826111aa565b90506000805b82518110156105de576105c08382815181106105b3576105b36119e2565b6020026020010151610aef565b6105ca90836119b1565b9150806105d6816119c9565b915050610595565b509392505050565b816105ef610e37565b6000828152602460205260409020546001600160a01b039081169116146106515760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ed565b8261065b816112cf565b6001546001600160a01b031660026000610673610e37565b905061067d611764565b600087116106cd5760405162461bcd60e51b815260206004820152601660248201527f5a65726f207265776172647320666f7220612067656d0000000000000000000060448201526064016102ed565b60006106d889610973565b90508088111561071f5760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f756768207265776172647360701b60448201526064016102ed565b60155461072d908990610e93565b60e083018190526040830189905261074590896119f8565b60608301526001600160a01b0385166323b872dd85600101546001600160a01b0316866004015460e0868101516040519185901b6001600160e01b03191682526001600160a01b03938416600483015292909116602482015260448101919091526064016020604051808303816000875af11580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec9190611a0f565b50826001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438360e0015160405161082c91815260200190565b60405180910390a26001600160a01b0385166323b872dd85600101546001600160a01b03168660050154606086015160405160e085901b6001600160e01b03191681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d39190611a0f565b506040808301516060840151825191825260208201526001600160a01b038516917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a261092a828a85611336565b505050505050505050565b60005b8181101561057257610961838383818110610955576109556119e2565b905060200201356104af565b8061096b816119c9565b915050610938565b60008161097f816112cf565b600061098a84610aef565b60008581526020805260409020600701549091506109a890826119b1565b60008581526020805260409020600101549091506109c690826119f8565b60008581526020805260409020600301549091506109e490826119f8565b949350505050565b60006038816109f9610e37565b6001600160a01b03166001600160a01b031681526020019081526020016000206005015460006038016000610a2c610e37565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201546103c391906119f8565b600f5460049060009068010000000000000000900463ffffffff16610a7f8184611a31565b63ffffffff16841015610a9157600392505b610a9c816003611a31565b63ffffffff16841015610aae57600292505b610ab9816002611a31565b63ffffffff16841015610acb57600192505b610ad6816001611a31565b63ffffffff16841015610ae857600092505b5050919050565b600081815260208080526040808320815160e08101909252805460ff808216845285948401916101009004166002811115610b2c57610b2c6117d0565b6002811115610b3d57610b3d6117d0565b8152815463ffffffff6201000082048116602080850191909152600160301b83048216604080860191909152600160501b909304909116606080850191909152825161014081018452600186015481526002860154928101929092526003850154928201929092526004840154918101919091526005830154608082810191909152600684015460a080840191909152600785015460c0840152600885015460e08401526009850154610100840152600a85015461012084015290830191909152600b9092015460ff908116151592909101919091528151601c8054939450600093909291909116908110610c3457610c346119e2565b90600052602060002090600602016040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015610c9d576020028201915b815481526020019060010190808311610c89575b5050509183525050600482015460208083019190915260059092015460ff166040909101528181015190840151919250600091610cec91906002811115610ce657610ce66117d0565b9061137f565b90506000610d29846040015163ffffffff1642610d0991906119f8565b6060850151601754600f548690640100000000900463ffffffff166113e9565b9695505050505050565b600042831180610d4b575081610d4984426119f8565b115b9392505050565b60008181526020805260408120805482919042600160501b90910463ffffffff1610610d82575060009392505050565b8054600090610d9e90600160501b900463ffffffff164261198c565b600f84015490915063ffffffff90811690821611610dc157506000949350505050565b8154601c84018054600092610e039260ff6101008304811693919216908110610dec57610dec6119e2565b906000526020600020906006020160000154611578565b8354600f860154919250600091610e2c91849163ffffffff600160501b909204821691166115c6565b979650505050505050565b6000303303610e8d57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610e909050565b50335b90565b6000808211610ea3576000610d4b565b610eae606480611a5d565b610eb88385611a5d565b610d4b9190611a92565b600082815260208052604090206001546001600160a01b0316600283610f1f5760405162461bcd60e51b81526020600482015260126024820152714e6f20616d6f756e7420746f20636c61696d60701b60448201526064016102ed565b610f27611764565b8481526000610f35876101d5565b8251909150610f69906010836004811115610f5257610f526117d0565b60058110610f6257610f626119e2565b0154610e93565b6101008301528151601554610f7e9190610e93565b60e083018190526101008301518351610f9791906119f8565b610fa191906119f8565b60208301526000610fb0610e37565b90506001600160a01b0385166323b872dd85600101546001600160a01b0316866004015460e0878101516040519185901b6001600160e01b03191682526001600160a01b03938416600483015292909116602482015260448101919091526064016020604051808303816000875af1158015611030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190611a0f565b50806001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438460e0015160405161109491815260200190565b60405180910390a26001600160a01b0385166323b872dd8560010154602086015160405160e084901b6001600160e01b03191681526001600160a01b039283166004820152918516602483015260448201526064016020604051808303816000875af1158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c9190611a0f565b50855469ffffffff0000000000001916600160301b4263ffffffff1602178655825160208085015160408051938452918301526001600160a01b038316917f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a910160405180910390a26111a0838983611336565b5050505050505050565b6001600160a01b0381166000908152602560205260408120546060918167ffffffffffffffff8111156111df576111df611aa6565b604051908082528060200260200182016040528015611208578160200160208202803683370190505b50905060005b828110156105de576001600160a01b038516600090815260296020908152604080832084845290915290205461125b816000908152602460205260409020546001600160a01b0316151590565b61129e5760405162461bcd60e51b8152602060048201526014602482015273412067656d20646f65736e27742065786973747360601b60448201526064016102ed565b808383815181106112b1576112b16119e2565b602090810291909101015250806112c7816119c9565b91505061120e565b6000818152602460205260409020546001600160a01b03166113335760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e4964206973206e6f742076616c69640000000060448201526064016102ed565b50565b6000828152602080526040812061134e602e866115d4565b61135b81600101866115d4565b6001600160a01b0383166000908152603883016020526040902061034d90866115d4565b60006002836002811115611395576113956117d0565b036113ba576127106113a983613a98611a5d565b6113b39190611a92565b9050610209565b60018360028111156113ce576113ce6117d0565b036113e2576127106113a9836130d4611a5d565b5080610209565b6000806113f585611701565b905060008080805b8192506064856064806114109190611a5d565b61141b906064611a5d565b6114259190611a92565b61142f91906119f8565b606461143b8388611ba0565b83611447606480611a5d565b6114519190611ba0565b61145c906064611a5d565b6114669190611a92565b61147091906119f8565b61147a8a8d611a92565b6114849190611a5d565b61148e9190611a92565b91508061149a816119c9565b91508b90506114a98389611a5d565b11156113fd576114ba6002826119f8565b90506114c68784611a5d565b9250600083158015906114d85750838c115b1561154e57816114e9606480611a5d565b6114f39190611ba0565b6114fd8388611ba0565b611507908b611a5d565b6115119190611a92565b9050808861151f868f6119f8565b6115299190611a92565b6115339190611a5d565b61153d838d611a5d565b61154791906119b1565b9450611568565b50878061155b898e611a92565b6115659190611a5d565b94505b50929a9950505050505050505050565b6000600283600281111561158e5761158e6117d0565b0361159e576113b3600283611a92565b60018360028111156115b2576115b26117d0565b036113e2576127106113a983611d4c611a5d565b60006109e484844285611719565b8051825483906000906115e89084906119b1565b909155505060208101516001830180546000906116069084906119b1565b909155505060408101516002830180546000906116249084906119b1565b909155505060608101516003830180546000906116429084906119b1565b909155505060808101516004830180546000906116609084906119b1565b909155505060a081015160058301805460009061167e9084906119b1565b909155505060c081015160068301805460009061169c9084906119b1565b909155505060e08101516007830180546000906116ba9084906119b1565b90915550506101008101516008830180546000906116d99084906119b1565b90915550506101208101516009830180546000906116f89084906119b1565b90915550505050565b60008161170f606480611a5d565b61020991906119f8565b60008363ffffffff168363ffffffff161161173557600061175b565b8482611741868661198c565b61174b9190611bac565b63ffffffff1661175b9190611a5d565b95945050505050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156117c957600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016005831061180857634e487b7160e01b600052602160045260246000fd5b91905290565b60008083601f84011261182057600080fd5b50813567ffffffffffffffff81111561183857600080fd5b6020830191508360208260051b850101111561185357600080fd5b9250929050565b60008060006040848603121561186f57600080fd5b833567ffffffffffffffff81111561188657600080fd5b6118928682870161180e565b909790965060209590950135949350505050565b600080600080604085870312156118bc57600080fd5b843567ffffffffffffffff808211156118d457600080fd5b6118e08883890161180e565b909650945060208701359150808211156118f957600080fd5b506119068782880161180e565b95989497509550505050565b6000806040838503121561192557600080fd5b50508035926020909101359150565b6000806020838503121561194757600080fd5b823567ffffffffffffffff81111561195e57600080fd5b61196a8582860161180e565b90969095509350505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff838116908316818110156119a9576119a9611976565b039392505050565b600082198211156119c4576119c4611976565b500190565b6000600182016119db576119db611976565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600082821015611a0a57611a0a611976565b500390565b600060208284031215611a2157600080fd5b81518015158114610d4b57600080fd5b600063ffffffff80831681851681830481118215151615611a5457611a54611976565b02949350505050565b6000816000190483118215151615611a7757611a77611976565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611aa157611aa1611a7c565b500490565b634e487b7160e01b600052604160045260246000fd5b600181815b80851115611af7578160001904821115611add57611add611976565b80851615611aea57918102915b93841c9390800290611ac1565b509250929050565b600082611b0e57506001610209565b81611b1b57506000610209565b8160018114611b315760028114611b3b57611b57565b6001915050610209565b60ff841115611b4c57611b4c611976565b50506001821b610209565b5060208310610133831016604e8410600b8410161715611b7a575081810a610209565b611b848383611abc565b8060001904821115611b9857611b98611976565b029392505050565b6000610d4b8383611aff565b600063ffffffff80841680611bc357611bc3611a7c565b9216919091049291505056fea2646970667358221220326c795a1f14e19484c7efb2bded94095e75e4d9272507b5425b7d0346404ab164736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063a4ff6c481161008c578063b816b65d11610066578063b816b65d14610194578063c760da04146101a7578063c84993af146101ba578063d8e1214f146101cd57600080fd5b8063a4ff6c4814610166578063ae169a5014610179578063b68a0ff61461018c57600080fd5b806306547abd146100d45780630a5626db146100fd5780634d0c509e1461011357806383b4c8651461012857806389610a091461013b57806394c0734b1461015e575b600080fd5b6100e76100e23660046117b7565b6101d5565b6040516100f491906117e6565b60405180910390f35b61010561020f565b6040519081526020016100f4565b61012661012136600461185a565b610248565b005b6101266101363660046118a6565b61028d565b61014e6101493660046117b7565b610354565b60405190151581526020016100f4565b6101056103b1565b610126610174366004611912565b6103c8565b6101266101873660046117b7565b6104af565b610105610577565b6101266101a2366004611912565b6105e6565b6101266101b5366004611934565b610935565b6101056101c83660046117b7565b610973565b6101056109ec565b6000818152602080526040812054610209906101fe90600160301b900463ffffffff164261198c565b63ffffffff16610a5a565b92915050565b6000805b602b548110156102445761022681610aef565b61023090836119b1565b91508061023c816119c9565b915050610213565b5090565b60005b8281101561028757610275848483818110610268576102686119e2565b90506020020135836103c8565b8061027f816119c9565b91505061024b565b50505050565b8281146102f65760405162461bcd60e51b815260206004820152602c60248201527f4445464f526577617264733a5f746f6b656e644964732d5f616d6f756e74732d60448201526b1a5b98dbdb9cda5cdd195b9d60a21b60648201526084015b60405180910390fd5b60005b8381101561034d5761033b858583818110610316576103166119e2565b9050602002013584848481811061032f5761032f6119e2565b905060200201356105e6565b80610345816119c9565b9150506102f9565b5050505050565b6000818152602080526040812054600f546103879163ffffffff600160301b909104811691640100000000900416610d33565b8015610399575061039782610d52565b155b801561020957506103a982610973565b151592915050565b6033546030546000916103c3916119f8565b905090565b816103d1610e37565b6000828152602460205260409020546001600160a01b039081169116146104335760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ed565b8261043d81610354565b6104795760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b60448201526064016102ed565b600061048485610973565b905060006104928286610e93565b905061049e86826105e6565b6104a7866104af565b505050505050565b806104b8610e37565b6000828152602460205260409020546001600160a01b0390811691161461051a5760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ed565b8161052481610354565b6105605760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b60448201526064016102ed565b6105728361056d85610973565b610ec2565b505050565b600080610582610e37565b9050600061058f826111aa565b90506000805b82518110156105de576105c08382815181106105b3576105b36119e2565b6020026020010151610aef565b6105ca90836119b1565b9150806105d6816119c9565b915050610595565b509392505050565b816105ef610e37565b6000828152602460205260409020546001600160a01b039081169116146106515760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ed565b8261065b816112cf565b6001546001600160a01b031660026000610673610e37565b905061067d611764565b600087116106cd5760405162461bcd60e51b815260206004820152601660248201527f5a65726f207265776172647320666f7220612067656d0000000000000000000060448201526064016102ed565b60006106d889610973565b90508088111561071f5760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f756768207265776172647360701b60448201526064016102ed565b60155461072d908990610e93565b60e083018190526040830189905261074590896119f8565b60608301526001600160a01b0385166323b872dd85600101546001600160a01b0316866004015460e0868101516040519185901b6001600160e01b03191682526001600160a01b03938416600483015292909116602482015260448101919091526064016020604051808303816000875af11580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec9190611a0f565b50826001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438360e0015160405161082c91815260200190565b60405180910390a26001600160a01b0385166323b872dd85600101546001600160a01b03168660050154606086015160405160e085901b6001600160e01b03191681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d39190611a0f565b506040808301516060840151825191825260208201526001600160a01b038516917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a261092a828a85611336565b505050505050505050565b60005b8181101561057257610961838383818110610955576109556119e2565b905060200201356104af565b8061096b816119c9565b915050610938565b60008161097f816112cf565b600061098a84610aef565b60008581526020805260409020600701549091506109a890826119b1565b60008581526020805260409020600101549091506109c690826119f8565b60008581526020805260409020600301549091506109e490826119f8565b949350505050565b60006038816109f9610e37565b6001600160a01b03166001600160a01b031681526020019081526020016000206005015460006038016000610a2c610e37565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201546103c391906119f8565b600f5460049060009068010000000000000000900463ffffffff16610a7f8184611a31565b63ffffffff16841015610a9157600392505b610a9c816003611a31565b63ffffffff16841015610aae57600292505b610ab9816002611a31565b63ffffffff16841015610acb57600192505b610ad6816001611a31565b63ffffffff16841015610ae857600092505b5050919050565b600081815260208080526040808320815160e08101909252805460ff808216845285948401916101009004166002811115610b2c57610b2c6117d0565b6002811115610b3d57610b3d6117d0565b8152815463ffffffff6201000082048116602080850191909152600160301b83048216604080860191909152600160501b909304909116606080850191909152825161014081018452600186015481526002860154928101929092526003850154928201929092526004840154918101919091526005830154608082810191909152600684015460a080840191909152600785015460c0840152600885015460e08401526009850154610100840152600a85015461012084015290830191909152600b9092015460ff908116151592909101919091528151601c8054939450600093909291909116908110610c3457610c346119e2565b90600052602060002090600602016040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015610c9d576020028201915b815481526020019060010190808311610c89575b5050509183525050600482015460208083019190915260059092015460ff166040909101528181015190840151919250600091610cec91906002811115610ce657610ce66117d0565b9061137f565b90506000610d29846040015163ffffffff1642610d0991906119f8565b6060850151601754600f548690640100000000900463ffffffff166113e9565b9695505050505050565b600042831180610d4b575081610d4984426119f8565b115b9392505050565b60008181526020805260408120805482919042600160501b90910463ffffffff1610610d82575060009392505050565b8054600090610d9e90600160501b900463ffffffff164261198c565b600f84015490915063ffffffff90811690821611610dc157506000949350505050565b8154601c84018054600092610e039260ff6101008304811693919216908110610dec57610dec6119e2565b906000526020600020906006020160000154611578565b8354600f860154919250600091610e2c91849163ffffffff600160501b909204821691166115c6565b979650505050505050565b6000303303610e8d57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610e909050565b50335b90565b6000808211610ea3576000610d4b565b610eae606480611a5d565b610eb88385611a5d565b610d4b9190611a92565b600082815260208052604090206001546001600160a01b0316600283610f1f5760405162461bcd60e51b81526020600482015260126024820152714e6f20616d6f756e7420746f20636c61696d60701b60448201526064016102ed565b610f27611764565b8481526000610f35876101d5565b8251909150610f69906010836004811115610f5257610f526117d0565b60058110610f6257610f626119e2565b0154610e93565b6101008301528151601554610f7e9190610e93565b60e083018190526101008301518351610f9791906119f8565b610fa191906119f8565b60208301526000610fb0610e37565b90506001600160a01b0385166323b872dd85600101546001600160a01b0316866004015460e0878101516040519185901b6001600160e01b03191682526001600160a01b03938416600483015292909116602482015260448101919091526064016020604051808303816000875af1158015611030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190611a0f565b50806001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438460e0015160405161109491815260200190565b60405180910390a26001600160a01b0385166323b872dd8560010154602086015160405160e084901b6001600160e01b03191681526001600160a01b039283166004820152918516602483015260448201526064016020604051808303816000875af1158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c9190611a0f565b50855469ffffffff0000000000001916600160301b4263ffffffff1602178655825160208085015160408051938452918301526001600160a01b038316917f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a910160405180910390a26111a0838983611336565b5050505050505050565b6001600160a01b0381166000908152602560205260408120546060918167ffffffffffffffff8111156111df576111df611aa6565b604051908082528060200260200182016040528015611208578160200160208202803683370190505b50905060005b828110156105de576001600160a01b038516600090815260296020908152604080832084845290915290205461125b816000908152602460205260409020546001600160a01b0316151590565b61129e5760405162461bcd60e51b8152602060048201526014602482015273412067656d20646f65736e27742065786973747360601b60448201526064016102ed565b808383815181106112b1576112b16119e2565b602090810291909101015250806112c7816119c9565b91505061120e565b6000818152602460205260409020546001600160a01b03166113335760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e4964206973206e6f742076616c69640000000060448201526064016102ed565b50565b6000828152602080526040812061134e602e866115d4565b61135b81600101866115d4565b6001600160a01b0383166000908152603883016020526040902061034d90866115d4565b60006002836002811115611395576113956117d0565b036113ba576127106113a983613a98611a5d565b6113b39190611a92565b9050610209565b60018360028111156113ce576113ce6117d0565b036113e2576127106113a9836130d4611a5d565b5080610209565b6000806113f585611701565b905060008080805b8192506064856064806114109190611a5d565b61141b906064611a5d565b6114259190611a92565b61142f91906119f8565b606461143b8388611ba0565b83611447606480611a5d565b6114519190611ba0565b61145c906064611a5d565b6114669190611a92565b61147091906119f8565b61147a8a8d611a92565b6114849190611a5d565b61148e9190611a92565b91508061149a816119c9565b91508b90506114a98389611a5d565b11156113fd576114ba6002826119f8565b90506114c68784611a5d565b9250600083158015906114d85750838c115b1561154e57816114e9606480611a5d565b6114f39190611ba0565b6114fd8388611ba0565b611507908b611a5d565b6115119190611a92565b9050808861151f868f6119f8565b6115299190611a92565b6115339190611a5d565b61153d838d611a5d565b61154791906119b1565b9450611568565b50878061155b898e611a92565b6115659190611a5d565b94505b50929a9950505050505050505050565b6000600283600281111561158e5761158e6117d0565b0361159e576113b3600283611a92565b60018360028111156115b2576115b26117d0565b036113e2576127106113a983611d4c611a5d565b60006109e484844285611719565b8051825483906000906115e89084906119b1565b909155505060208101516001830180546000906116069084906119b1565b909155505060408101516002830180546000906116249084906119b1565b909155505060608101516003830180546000906116429084906119b1565b909155505060808101516004830180546000906116609084906119b1565b909155505060a081015160058301805460009061167e9084906119b1565b909155505060c081015160068301805460009061169c9084906119b1565b909155505060e08101516007830180546000906116ba9084906119b1565b90915550506101008101516008830180546000906116d99084906119b1565b90915550506101208101516009830180546000906116f89084906119b1565b90915550505050565b60008161170f606480611a5d565b61020991906119f8565b60008363ffffffff168363ffffffff161161173557600061175b565b8482611741868661198c565b61174b9190611bac565b63ffffffff1661175b9190611a5d565b95945050505050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156117c957600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016005831061180857634e487b7160e01b600052602160045260246000fd5b91905290565b60008083601f84011261182057600080fd5b50813567ffffffffffffffff81111561183857600080fd5b6020830191508360208260051b850101111561185357600080fd5b9250929050565b60008060006040848603121561186f57600080fd5b833567ffffffffffffffff81111561188657600080fd5b6118928682870161180e565b909790965060209590950135949350505050565b600080600080604085870312156118bc57600080fd5b843567ffffffffffffffff808211156118d457600080fd5b6118e08883890161180e565b909650945060208701359150808211156118f957600080fd5b506119068782880161180e565b95989497509550505050565b6000806040838503121561192557600080fd5b50508035926020909101359150565b6000806020838503121561194757600080fd5b823567ffffffffffffffff81111561195e57600080fd5b61196a8582860161180e565b90969095509350505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff838116908316818110156119a9576119a9611976565b039392505050565b600082198211156119c4576119c4611976565b500190565b6000600182016119db576119db611976565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600082821015611a0a57611a0a611976565b500390565b600060208284031215611a2157600080fd5b81518015158114610d4b57600080fd5b600063ffffffff80831681851681830481118215151615611a5457611a54611976565b02949350505050565b6000816000190483118215151615611a7757611a77611976565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611aa157611aa1611a7c565b500490565b634e487b7160e01b600052604160045260246000fd5b600181815b80851115611af7578160001904821115611add57611add611976565b80851615611aea57918102915b93841c9390800290611ac1565b509250929050565b600082611b0e57506001610209565b81611b1b57506000610209565b8160018114611b315760028114611b3b57611b57565b6001915050610209565b60ff841115611b4c57611b4c611976565b50506001821b610209565b5060208310610133831016604e8410600b8410161715611b7a575081810a610209565b611b848383611abc565b8060001904821115611b9857611b98611976565b029392505050565b6000610d4b8383611aff565b600063ffffffff80841680611bc357611bc3611a7c565b9216919091049291505056fea2646970667358221220326c795a1f14e19484c7efb2bded94095e75e4d9272507b5425b7d0346404ab164736f6c634300080f0033",
  "devdoc": {
    "author": "Decentralized Foundation Team",
    "kind": "dev",
    "methods": {
      "getCumulatedReward()": {
        "returns": {
          "_0": "amount in DEFO (in wei precision)"
        }
      },
      "getCumulatedRewardAllUsers()": {
        "returns": {
          "allForAllTotalReward_": "amount in DEFO (in wei precision)"
        }
      },
      "getRewardAmount(uint256)": {
        "params": {
          "_tokenId": "unique NFT gem id"
        },
        "returns": {
          "_0": "pre-tax unclaimed reward in DEFO,- before deducting tax or charity, ready to be claimed or put to vault"
        }
      },
      "getStakedGross()": {
        "returns": {
          "_0": "total amount in DEFO (in wei precision)"
        }
      },
      "getStakedGrossAllUsers()": {
        "returns": {
          "_0": "total amount in DEFO (in wei precision)"
        }
      },
      "getTaxTier(uint256)": {
        "params": {
          "_tokenId": "unique NFT gem id"
        },
        "returns": {
          "_0": "current tax tier of the gem might be configurable, now it's a number in the range starting from 0 when 0 means nothing is payed out since there's no rewards in the first week, 4 is no tax, 1,2,3 - % in between (currently 30,30,15)"
        }
      },
      "isClaimable(uint256)": {
        "params": {
          "_tokenId": "unique NFT gem id"
        },
        "returns": {
          "_0": "true or false, checks for the pending maintenance and time passed since last claim"
        }
      },
      "stakeAndClaim(uint256,uint256)": {
        "params": {
          "_percent": "percent of what to put into the vault, as usual uses PRECISION_MULTIPLIER (which is 100 by defualt, e.g. 500 for 5%)",
          "_tokenId": "unique NFT gem id"
        }
      }
    },
    "title": "ERC721Facet EIP-2535 Diamond Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCumulatedReward()": {
        "notice": "amount of pre-taxed total reward earned by the sender for all time"
      },
      "getCumulatedRewardAllUsers()": {
        "notice": "amount of pre-taxed total reward earned by all the users for all time"
      },
      "getRewardAmount(uint256)": {
        "notice": "reward earned by the sender to the moment ready to be claimed or put to vault"
      },
      "getStakedGross()": {
        "notice": "amount of pre-taxed reward that are currently in the vault for the sender, so if put and then taken from the vault, it's not the return of the function"
      },
      "getStakedGrossAllUsers()": {
        "notice": "amount of pre-taxed reward that are currently in the vault for all users, it's not equal to the after-tax amount in the vault"
      },
      "getTaxTier(uint256)": {
        "notice": "gets tax tier for a gem"
      },
      "isClaimable(uint256)": {
        "notice": "checks if rewards can be claimed or not"
      },
      "stakeAndClaim(uint256,uint256)": {
        "notice": "This is used for the Vault Strategy, it puts the percent of all rewards to the vault and claims the rest"
      },
      "stakeReward(uint256,uint256)": {
        "notice": "todo decide whether move this to the vault facet or not - (to keep all staking/unstaking in one place), or to leave it here (this is a facet working with rewards  which can be either claimed or staked)"
      }
    },
    "notice": "The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4283,
        "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4537_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)7_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[7]",
        "numberOfBytes": "224"
      },
      "t_array(t_array(t_uint256)3_storage)2_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][2]",
        "numberOfBytes": "192"
      },
      "t_array(t_contract(IERC20)737)2_storage": {
        "base": "t_contract(IERC20)737",
        "encoding": "inplace",
        "label": "contract IERC20[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(GemTypeConfig)4429_storage)dyn_storage": {
        "base": "t_struct(GemTypeConfig)4429_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GemTypeMintWindow)4434_storage)dyn_storage": {
        "base": "t_struct(GemTypeMintWindow)4434_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeMintWindow[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)737": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Booster)4456": {
        "encoding": "inplace",
        "label": "enum Booster",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => mapping(enum Booster => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256))"
      },
      "t_mapping(t_address,t_struct(Fi)4477_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Fi)",
        "numberOfBytes": "32",
        "value": "t_struct(Fi)4477_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Booster)4456,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Booster)4456",
        "label": "mapping(enum Booster => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Gem)4494_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gem)",
        "numberOfBytes": "32",
        "value": "t_struct(Gem)4494_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(enum Booster => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Booster)4456,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4537_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4497,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "config",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ProtocolConfig)4416_storage"
          },
          {
            "astId": 4501,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gemTypes",
            "offset": 0,
            "slot": "28",
            "type": "t_array(t_struct(GemTypeConfig)4429_storage)dyn_storage"
          },
          {
            "astId": 4505,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gemTypesMintWindows",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_struct(GemTypeMintWindow)4434_storage)dyn_storage"
          },
          {
            "astId": 4508,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "defoTokenLimitWindow",
            "offset": 0,
            "slot": "30",
            "type": "t_struct(DEFOTokenLimitWindow)4443_storage"
          },
          {
            "astId": 4513,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gems",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_uint256,t_struct(Gem)4494_storage)"
          },
          {
            "astId": 4516,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "nft",
            "offset": 0,
            "slot": "33",
            "type": "t_struct(ERC721Storage)4351_storage"
          },
          {
            "astId": 4519,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "total",
            "offset": 0,
            "slot": "46",
            "type": "t_struct(Fi)4477_storage"
          },
          {
            "astId": 4524,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "usersFi",
            "offset": 0,
            "slot": "56",
            "type": "t_mapping(t_address,t_struct(Fi)4477_storage)"
          },
          {
            "astId": 4533,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "usersNextGemBooster",
            "offset": 0,
            "slot": "57",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256)))"
          },
          {
            "astId": 4536,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "defoTokenLimitPerRewards",
            "offset": 0,
            "slot": "58",
            "type": "t_struct(DEFOTokenLimitPerRewards)4452_storage"
          }
        ],
        "numberOfBytes": "1920"
      },
      "t_struct(Counter)2737_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2736,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DEFOTokenLimitPerRewards)4452_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitPerRewards",
        "members": [
          {
            "astId": 4447,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4451,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "timeOfWindowStart",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DEFOTokenLimitWindow)4443_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitWindow",
        "members": [
          {
            "astId": 4438,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4442,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "timeOfLastSale",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefoTokenLimitConfig)4375_storage": {
        "encoding": "inplace",
        "label": "struct DefoTokenLimitConfig",
        "members": [
          {
            "astId": 4370,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "saleLimitPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4372,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "saleLimitAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4374,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "limitByReward",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ERC721Storage)4351_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage",
        "members": [
          {
            "astId": 4306,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4308,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4311,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokenIdTracker",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Counter)2737_storage"
          },
          {
            "astId": 4315,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "owners",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4319,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "balances",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4323,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokenApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4329,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "operatorApprovals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 4331,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4337,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "ownedTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 4341,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "ownedTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4344,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "allTokens",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4348,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "allTokensIndex",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4350,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "init",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Fi)4477_storage": {
        "encoding": "inplace",
        "label": "struct Fi",
        "members": [
          {
            "astId": 4458,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "claimedGross",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4460,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "claimedNet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4462,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "stakedGross",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4464,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "stakedNet",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4466,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "unStakedGross",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4468,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "unStakedGrossUp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4470,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "unStakedNet",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4472,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "donated",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4474,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "claimTaxPaid",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4476,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "vaultTaxPaid",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Gem)4494_storage": {
        "encoding": "inplace",
        "label": "struct Gem",
        "members": [
          {
            "astId": 4479,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gemTypeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4482,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "booster",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Booster)4456"
          },
          {
            "astId": 4484,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintTime",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4486,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "lastRewardWithdrawalTime",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4488,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "lastMaintenanceTime",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4491,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "fi",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Fi)4477_storage"
          },
          {
            "astId": 4493,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "presold",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(GemTypeConfig)4429_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeConfig",
        "members": [
          {
            "astId": 4418,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maintenanceFeeDai",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4420,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "rewardAmountDefo",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4424,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 4426,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taperRewardsThresholdDefo",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4428,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maxMintsPerLimitWindow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(GemTypeMintWindow)4434_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeMintWindow",
        "members": [
          {
            "astId": 4431,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4433,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "endOfMintLimitWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProtocolConfig)4416_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolConfig",
        "members": [
          {
            "astId": 4380,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "paymentTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20)737)2_storage"
          },
          {
            "astId": 4384,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "wallets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)7_storage"
          },
          {
            "astId": 4390,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "incomeDistributionOnMint",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_array(t_uint256)3_storage)2_storage"
          },
          {
            "astId": 4392,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maintenancePeriod",
            "offset": 0,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4394,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "rewardPeriod",
            "offset": 4,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4396,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taxScaleSinceLastClaimPeriod",
            "offset": 8,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4400,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taxRates",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_uint256)5_storage"
          },
          {
            "astId": 4402,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "charityContributionRate",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 4404,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "vaultWithdrawalTaxRate",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 4406,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taperRate",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 4408,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintLock",
            "offset": 0,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4410,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "transferLock",
            "offset": 1,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4412,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintLimitWindow",
            "offset": 2,
            "slot": "24",
            "type": "t_uint32"
          },
          {
            "astId": 4415,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "defoTokenLimitConfig",
            "offset": 0,
            "slot": "25",
            "type": "t_struct(DefoTokenLimitConfig)4375_storage"
          }
        ],
        "numberOfBytes": "896"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}