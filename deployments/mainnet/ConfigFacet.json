{
  "address": "0xfE0989B459968c085254F9e1cE415d07D43408C6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20[2]",
              "name": "paymentTokens",
              "type": "address[2]"
            },
            {
              "internalType": "address[8]",
              "name": "wallets",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[3][2]",
              "name": "incomeDistributionOnMint",
              "type": "uint256[3][2]"
            },
            {
              "internalType": "uint32",
              "name": "maintenancePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "rewardPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "taxScaleSinceLastClaimPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint256[5]",
              "name": "taxRates",
              "type": "uint256[5]"
            },
            {
              "internalType": "uint256",
              "name": "charityContributionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultWithdrawalTaxRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taperRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mintLock",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferLock",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "mintLimitWindow",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "saleLimitPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "saleLimitAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "limitByReward",
                  "type": "bool"
                }
              ],
              "internalType": "struct DefoTokenLimitConfig",
              "name": "defoTokenLimitConfig",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct ProtocolConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "ConfigurationChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maintenanceFeeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmountDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "price",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "taperRewardsThresholdDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxMintsPerLimitWindow",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct GemTypeConfig",
          "name": "_gemTypeConfig",
          "type": "tuple"
        }
      ],
      "name": "GemTypeConfigurationChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "approveDefoForRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20[2]",
              "name": "paymentTokens",
              "type": "address[2]"
            },
            {
              "internalType": "address[8]",
              "name": "wallets",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[3][2]",
              "name": "incomeDistributionOnMint",
              "type": "uint256[3][2]"
            },
            {
              "internalType": "uint32",
              "name": "maintenancePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "rewardPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "taxScaleSinceLastClaimPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint256[5]",
              "name": "taxRates",
              "type": "uint256[5]"
            },
            {
              "internalType": "uint256",
              "name": "charityContributionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultWithdrawalTaxRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taperRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mintLock",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferLock",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "mintLimitWindow",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "saleLimitPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "saleLimitAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "limitByReward",
                  "type": "bool"
                }
              ],
              "internalType": "struct DefoTokenLimitConfig",
              "name": "defoTokenLimitConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct ProtocolConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGemTypesConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maintenanceFeeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmountDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "price",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "taperRewardsThresholdDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxMintsPerLimitWindow",
              "type": "uint256"
            }
          ],
          "internalType": "struct GemTypeConfig[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_charityContributionRate",
          "type": "uint256"
        }
      ],
      "name": "setCharityContributionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20[2]",
              "name": "paymentTokens",
              "type": "address[2]"
            },
            {
              "internalType": "address[8]",
              "name": "wallets",
              "type": "address[8]"
            },
            {
              "internalType": "uint256[3][2]",
              "name": "incomeDistributionOnMint",
              "type": "uint256[3][2]"
            },
            {
              "internalType": "uint32",
              "name": "maintenancePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "rewardPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "taxScaleSinceLastClaimPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint256[5]",
              "name": "taxRates",
              "type": "uint256[5]"
            },
            {
              "internalType": "uint256",
              "name": "charityContributionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultWithdrawalTaxRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taperRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mintLock",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferLock",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "mintLimitWindow",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "saleLimitPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "saleLimitAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "limitByReward",
                  "type": "bool"
                }
              ],
              "internalType": "struct DefoTokenLimitConfig",
              "name": "defoTokenLimitConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct ProtocolConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "saleLimitPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "saleLimitAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "limitByReward",
              "type": "bool"
            }
          ],
          "internalType": "struct DefoTokenLimitConfig",
          "name": "_defoTokenLimitConfig",
          "type": "tuple"
        }
      ],
      "name": "setConfigDefoTokenLimitConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3][2]",
          "name": "_incomeDistributionOnMint",
          "type": "uint256[3][2]"
        }
      ],
      "name": "setConfigIncomeDistributionOnMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maintenancePeriod",
          "type": "uint32"
        }
      ],
      "name": "setConfigMaintenancePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_mintLimitWindow",
          "type": "uint32"
        }
      ],
      "name": "setConfigMintLimitWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_rewardPeriod",
          "type": "uint32"
        }
      ],
      "name": "setConfigRewardPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taperRate",
          "type": "uint256"
        }
      ],
      "name": "setConfigTaperRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "_taxRates",
          "type": "uint256[5]"
        }
      ],
      "name": "setConfigTaxRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_taxScaleSinceLastClaimPeriod",
          "type": "uint32"
        }
      ],
      "name": "setConfigTaxScaleSinceLastClaimPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultWithdrawalTaxRate",
          "type": "uint256"
        }
      ],
      "name": "setConfigVaultWithdrawalTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[8]",
          "name": "_wallets",
          "type": "address[8]"
        }
      ],
      "name": "setConfigWallets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maintenanceFeeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmountDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "price",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "taperRewardsThresholdDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxMintsPerLimitWindow",
              "type": "uint256"
            }
          ],
          "internalType": "struct GemTypeConfig[]",
          "name": "_gemTypeConfig",
          "type": "tuple[]"
        }
      ],
      "name": "setGemTypesConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_gemTypeId",
          "type": "uint8"
        }
      ],
      "name": "zeroMintCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x954c263967c7be314e04e7b98f21274365979a45e4258e40bb836715e8f20c4d",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe4704c3794F20d5479942b2733F769c54Ca37de7",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "1631735",
    "logsBloom": "0x
    "blockHash": "0x988465234be0765497e4d514fa1a26a6e23e37719371ff239bdb658b815990f6",
    "transactionHash": "0x954c263967c7be314e04e7b98f21274365979a45e4258e40bb836715e8f20c4d",
    "logs": [],
    "blockNumber": 22576203,
    "cumulativeGasUsed": "2521291",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "eee850e7cb3cdcf8e203e703634e63e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20[2]\",\"name\":\"paymentTokens\",\"type\":\"address[2]\"},{\"internalType\":\"address[8]\",\"name\":\"wallets\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[3][2]\",\"name\":\"incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"},{\"internalType\":\"uint32\",\"name\":\"maintenancePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256[5]\",\"name\":\"taxRates\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"charityContributionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultWithdrawalTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taperRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"mintLimitWindow\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"defoTokenLimitConfig\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct ProtocolConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"ConfigurationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maintenanceFeeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"price\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"taperRewardsThresholdDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintsPerLimitWindow\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GemTypeConfig\",\"name\":\"_gemTypeConfig\",\"type\":\"tuple\"}],\"name\":\"GemTypeConfigurationChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"approveDefoForRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20[2]\",\"name\":\"paymentTokens\",\"type\":\"address[2]\"},{\"internalType\":\"address[8]\",\"name\":\"wallets\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[3][2]\",\"name\":\"incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"},{\"internalType\":\"uint32\",\"name\":\"maintenancePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256[5]\",\"name\":\"taxRates\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"charityContributionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultWithdrawalTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taperRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"mintLimitWindow\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"defoTokenLimitConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct ProtocolConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGemTypesConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maintenanceFeeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"price\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"taperRewardsThresholdDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintsPerLimitWindow\",\"type\":\"uint256\"}],\"internalType\":\"struct GemTypeConfig[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_charityContributionRate\",\"type\":\"uint256\"}],\"name\":\"setCharityContributionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20[2]\",\"name\":\"paymentTokens\",\"type\":\"address[2]\"},{\"internalType\":\"address[8]\",\"name\":\"wallets\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[3][2]\",\"name\":\"incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"},{\"internalType\":\"uint32\",\"name\":\"maintenancePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256[5]\",\"name\":\"taxRates\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"charityContributionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultWithdrawalTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taperRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"mintLimitWindow\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"defoTokenLimitConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct ProtocolConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"_defoTokenLimitConfig\",\"type\":\"tuple\"}],\"name\":\"setConfigDefoTokenLimitConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3][2]\",\"name\":\"_incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"}],\"name\":\"setConfigIncomeDistributionOnMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maintenancePeriod\",\"type\":\"uint32\"}],\"name\":\"setConfigMaintenancePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_mintLimitWindow\",\"type\":\"uint32\"}],\"name\":\"setConfigMintLimitWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rewardPeriod\",\"type\":\"uint32\"}],\"name\":\"setConfigRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taperRate\",\"type\":\"uint256\"}],\"name\":\"setConfigTaperRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_taxRates\",\"type\":\"uint256[5]\"}],\"name\":\"setConfigTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"}],\"name\":\"setConfigTaxScaleSinceLastClaimPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultWithdrawalTaxRate\",\"type\":\"uint256\"}],\"name\":\"setConfigVaultWithdrawalTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[8]\",\"name\":\"_wallets\",\"type\":\"address[8]\"}],\"name\":\"setConfigWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maintenanceFeeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"price\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"taperRewardsThresholdDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintsPerLimitWindow\",\"type\":\"uint256\"}],\"internalType\":\"struct GemTypeConfig[]\",\"name\":\"_gemTypeConfig\",\"type\":\"tuple[]\"}],\"name\":\"setGemTypesConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gemTypeId\",\"type\":\"uint8\"}],\"name\":\"zeroMintCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Decentralized Foundation Team\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC721Facet EIP-2535 Diamond Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/ConfigFacet.sol\":\"ConfigFacet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/base-facet/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n/**\\n * @title  BaseFacet\\n * @author Decentralized Foundation Team\\n * @notice BaseFacet is a base contract all facets to inherit, includes cross-facet utils and  common reusable functions for DEFO Diamond\\n */\\ncontract BaseFacet is Storage {\\n\\n    /* ====================== Modifiers ====================== */\\n\\n    modifier exists(uint256 _tokenId) {\\n        _requireExists(_tokenId);\\n        _;\\n    }\\n\\n    modifier onlyGemHolder(uint256 _tokenId) {\\n        require(s.nft.owners[_tokenId] == _msgSender(), \\\"You don't own this gem\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n    modifier nonZeroAddress(address _owner) {\\n        require(_owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        _;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _msgSender() internal override view returns (address sender_) {\\n        if (Context._msgSender() == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function _getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function _requireExists(uint256 _tokenId) internal view {\\n        require(_exists(_tokenId), \\\"ERC721: tokenId is not valid\\\");\\n    }\\n\\n    function _exists(uint256 _tokenId) internal view returns (bool) {\\n        return (s.nft.owners[_tokenId] != address(0));\\n    }\\n\\n    ///todo ensure passing memory array here to the public functions is pretty optimal\\n    function _getGemIds(address _user) internal view returns (uint256[] memory) {\\n        uint256 numberOfGems = s.nft.balances[_user];\\n        uint256[] memory gemIds = new uint256[](numberOfGems);\\n        for (uint256 i = 0; i < numberOfGems; i++) {\\n            uint256 gemId = s.nft.ownedTokens[_user][i];\\n            require(_exists(gemId), \\\"A gem doesn't exists\\\");\\n            gemIds[i] = gemId;\\n        }\\n        return gemIds;\\n    }\\n\\n    function _getAllUsers() internal view returns (address[] memory users_) {\\n        users_ = new address[](s.nft.allTokens.length);\\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\\n            users_[tokenId] = s.nft.owners[tokenId];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5ee18d83372dec082d66a9c61a88c6b5c034a741118da8be0524f9f1ed4f4b13\",\"license\":\"GPL-3.0\"},\"contracts/base-facet/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {AppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0x66f07eea1ae3a0fbf40fbf070d67bed29b4a0a2dfbb689f58292d28b5065418a\",\"license\":\"GPL-3.0\"},\"contracts/data-types/IDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n/**\\n*   @dev The only source for all the data structures used in the protocol storage\\n*   @dev This includes general config, gem type config, and mutable data\\n*/\\n\\n/// @dev number of payment tokens to enumerate the error, initially it's Defo and Dai,\\n/// @dev see PaymentTokens enum\\nuint256 constant PAYMENT_TOKENS = 2;\\n\\n/// @dev number of income recievers on yield gem mint\\nuint256 constant PAYMENT_RECEIVERS = 3;\\n\\n/// @dev total wallets on the protocol, see Wallets enum\\nuint256 constant WALLETS = 8;\\n\\n/// @dev total number of supported tax tiers\\nuint256 constant TAX_TIERS = 5;\\n\\n/**\\n*   @notice a struct for data compliance with erc721 standard\\n*   @param name Token name\\n*   @param symbol Token symbol\\n*   @param owners Mapping from token ID to owner address\\n*   @param balances Mapping owner address to token count\\n*   @param tokenApprovals Mapping from token ID to approved address\\n*   @param operatorApprovals Mapping from owner to operator approvals\\n*   @param ownedTokens Mapping from owner to list of owned token IDs\\n*   @param ownedTokensIndex Mapping from token ID to index of the owner tokens list\\n*   @param allTokens Array with all token ids, used for enumeration\\n*   @param allTokensIndex Mapping from token id to position in the allTokens array\\n*/\\n    struct ERC721Storage {\\n        string name;\\n        string symbol;\\n        Counters.Counter tokenIdTracker;\\n        mapping(uint256 => address) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n        string baseURI;\\n        mapping(address => mapping(uint256 => uint256)) ownedTokens;\\n        mapping(uint256 => uint256) ownedTokensIndex;\\n        uint256[] allTokens;\\n        mapping(uint256 => uint256) allTokensIndex;\\n        bool init;\\n    }\\n\\n\\n/// @notice token enum to index arrays of rates and addresses, the convention is that Dai is at place 0, Defo is at 1\\n/// @dev the order is extremely important once deployed\\n    enum PaymentTokens {\\n        Dai,\\n        Defo\\n    }\\n\\n/// @notice protocol wallets for easy enumeration,\\n/// @dev the order is extremely important once deployed, see configuration scripts\\n    enum Wallets {\\n        Treasury,\\n        RewardPool,\\n        LiquidityPair,\\n        Stabilizer,\\n        Charity,\\n        Vault,\\n        RedeemContract,\\n        DEXRouter\\n    }\\n\\n\\n/// @notice these tiers correspond to the configurable percentage from the diamond storage\\n    enum TaxTiers {\\n        Tier0NoPayment,\\n        Tier1HugeTax,\\n        Tier2MediumTax,\\n        Tier3SmallTax,\\n        Tier4NoTax\\n    }\\n\\n/**\\n * @notice DefoTokenLimitConfig DEFO ERC20 Token transfer limiter, this is for the 1000 DEFO per 24h sale limitation, can be changes with setTransferLimit\\n * @param saleLimitPeriod initially 1 day\\n * @param saleLimitAmount initially 1000 tokens\\n*/\\n    struct DefoTokenLimitConfig {\\n        uint256 saleLimitPeriod;\\n        uint256 saleLimitAmount;\\n        bool limitByReward;\\n    }\\n\\n/**\\n * @notice Main Protocol Configuration structure\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set, including no minting\\n     * @param incomeDistributionOnMint distribution of the payment among tokens in percent rates, all values use percentage multiplier (see percent helper), here addresses are from the Addresses\\n     * @param maintenancePeriod a period in seconds for maintenance fee accrual, initially one month\\n     * @param rewardPeriod a period in seconds for generating yield gem rewards, initially one week\\n     * @param mintCountResetPeriod a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs.\\n     * @param taxScaleSinceLastClaimPeriod a period in seconds for a tax scale to work out, initially one week\\n     * @param taxRates tax rates in percent (with percent multiplier, see percent helper contract), initially 30%, 30%, 15%, 0\\n     * @param charityContributionRate charity rate (w multiplier as all percent values in the project), initially 5%\\n     * @param vaultWithdrawalRate fee paid to withdraw amount from the vault back to the earned rewards, initially 10%\\n     * @param taperRate taper rate, initially 20%\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set\\n     * @param mintLimitWindow a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs, see GemTypeConfig.maxMintsPerLimitWindow\\n     */\\n\\n    struct ProtocolConfig {\\n        IERC20[PAYMENT_TOKENS] paymentTokens;\\n        address[WALLETS] wallets;\\n        uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] incomeDistributionOnMint;\\n        // time periods\\n        uint32 maintenancePeriod;\\n        uint32 rewardPeriod;\\n        uint32 taxScaleSinceLastClaimPeriod;\\n        // taxes and contributions\\n        uint256[TAX_TIERS] taxRates;\\n        uint256 charityContributionRate;\\n        uint256 vaultWithdrawalTaxRate;\\n        uint256 taperRate;\\n        // locks\\n        bool mintLock;\\n        bool transferLock;\\n        // mint limit period for coutner reset\\n        uint32 mintLimitWindow;\\n        DefoTokenLimitConfig defoTokenLimitConfig;\\n    }\\n\\n/**\\n * @notice A struct containing configuration details for gemType\\n     * @param maintenanceFee Maintenance fee in Dai for the node type, amount in wei per month\\n     * @param rewardAmountDefo Reward in DEFO for the node type, amount in wei per week\\n     * @param price Price in DEFO and DAI (in wei), respectively, according to the PaymentTokens enum\\n     * @param taperRewardsThresholdDefo Taper threshold, in wei, decreasing rate every given amount of rewards in DEFO\\n     * @param maxMintsPerLimitWindow number of gems, mint limit for a node type, see ProtocolConfig.mintLimitWindow\\n     */\\n    struct GemTypeConfig {\\n        uint256 maintenanceFeeDai;\\n        uint256 rewardAmountDefo;\\n        uint256[PAYMENT_TOKENS] price;\\n        uint256 taperRewardsThresholdDefo;\\n        uint256 maxMintsPerLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct containing current mutable status for gemType\\n     * @param mintCount counter incrementing by one on every mint, during mintCountResetPeriod; after mintCountResetPeriod with no mints, reset to 0\\n     * @param endOfMintLimitWindow a moment to reset the mintCount counter to zero, set the new endOfMintLimitWindow and start over\\n     */\\n    struct GemTypeMintWindow {\\n        uint256 mintCount;\\n        uint32 endOfMintLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct describing current DEFO Token limiter input\\n * @param tokensSold DEFO tokens sold per limit window, \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfLastSale time of last sale\\n     */\\n    struct DEFOTokenLimitWindow {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfLastSale;\\n    }\\n\\n/**\\n * @notice A struct describing DEFO Token limit per weekly rewards\\n * @param tokensSold DEFO tokens sold per reward period window starting from the first sale \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfWindowStart time of first sale in the window\\n     */\\n    struct DEFOTokenLimitPerRewards {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfWindowStart;\\n    }\\n\\n    enum Booster {\\n        None,\\n        Delta,\\n        Omega\\n    }\\n\\n/**\\n * @notice A struct describing financial state, provides the complete state for user, gem, or protocol total.\\n * @notice It gives the current exact balance of the Vault, Rewards, and Charity.\\n * @param claimedGross rewards amount previously claimed for all time, gross amount - before tax and charity\\n * @param claimedNet rewards claimed and to user, net amount after tax and charity\\n * @param stakedGross amount removed from rewards to stake, charity not yet deducted\\n * @param stakedNet amount put to the vault - charity has been deducted\\n * @param unStakedGross  amount removed from the vault, pre withdraw tax and charity\\n * @param unStakedGrossUpped  amount removed from the vault gross-upped with charity to equal to the stakedGross amount\\n * @param unStakedNet  amount returned to the earned rewards, post withdraw tax and charity\\n * @param donated sent to charity\\n * @param claimTaxPaid claim tax deducted - 30%, 15%, 15%\\n * @param vaultTaxPaid vault withdrawal tax deducted\\n     */\\n    struct Fi {\\n        uint256 claimedGross;\\n        uint256 claimedNet;\\n        uint256 stakedGross;\\n        uint256 stakedNet;\\n        uint256 unStakedGross;\\n        uint256 unStakedGrossUp;\\n        uint256 unStakedNet;\\n        uint256 donated;\\n        uint256 claimTaxPaid;\\n        uint256 vaultTaxPaid;\\n    }\\n\\n/**\\n * @notice current state of a gem, a gem is an instance with consistent yield and fee rates specified by the pair (gemType, booster)\\n * @param gemType node type, initially it's  0 -> Ruby , 1 -> Sapphire, 2 -> Diamond, and boosters\\n * @param booster node Booster 0 -> None , 1 -> Delta , 2 -> Omega\\n * @param mintTime timestamp of the mint time\\n * @param lastRewardWithdrawalTime timestamp of last reward claim OR stake. Same as mintTime if not yet claimed.\\n * @param lastMaintenanceTime timestamp of the last maintenance (could be a date in the future in case of the upfront payment)\\n * @param presold flag that this gem was bought on presale, used to avoid double minting\\n*/\\n    struct Gem {\\n        uint8 gemTypeId;\\n        Booster booster;\\n        uint32 mintTime;\\n        uint32 lastRewardWithdrawalTime;\\n        uint32 lastMaintenanceTime;\\n        Fi fi;\\n        bool presold;\\n        uint256 maintenanceFeePaid;\\n    }\\n\\n/**\\n*   @notice Main Contract Storage utilizing App Storage pattern for Diamond Proxy data organization\\n*   @param config main configuration, basically everything except gemType specific\\n*   @param gemTypes supported gem types with their details, gemTypeId is the index of the array\\n*   @param gems mapping indexed by tokenId, where tokenId is in the nft.allTokens\\n*   @param gemTypesMintWindows windows for limiting yield gem mints per gem type\\n*   @param defoTokenLimitWindow window for limiting DEFO Token sale\\n*   @param nft ERC721 standard related storage\\n*   @param total cumulated amounts for all operations\\n*   @param usersFi financial info per each user\\n*   @param usersNextGemBooster used for presale, number (uint256) of boosters (Booster) with a type (uint8) left for a user (address)\\n*/\\n    struct AppStorage {\\n        // configuration\\n        ProtocolConfig config;\\n        GemTypeConfig[] gemTypes;\\n        // current state\\n        GemTypeMintWindow[] gemTypesMintWindows;\\n        DEFOTokenLimitWindow defoTokenLimitWindow;\\n        mapping(uint256 => Gem) gems;\\n        ERC721Storage nft;\\n        // Cumulations\\n        Fi total;\\n        // User data, users list is s.nft.owners, size s.nft.allTokens.length (managed by ERC721Enumerable)\\n        mapping(address => Fi) usersFi;\\n        mapping(address => mapping(uint8 => mapping(Booster => uint256))) usersNextGemBooster;\\n        DEFOTokenLimitPerRewards defoTokenLimitPerRewards;\\n    }\\n\",\"keccak256\":\"0x6e190a17cbf3eeb538dc06d66057b3a8515f47009cc0e3e9bea168c9c70e8936\",\"license\":\"GPL-3.0\"},\"contracts/facets/ConfigFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IConfig.sol\\\";\\nimport \\\"../base-facet/BaseFacet.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibPauser.sol\\\";\\nimport \\\"../libraries/LibMintLimiter.sol\\\";\\nimport \\\"../libraries/PercentHelper.sol\\\";\\n\\n/** @title  ERC721Facet EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\\n*/\\ncontract ConfigFacet is BaseFacet, IConfig {\\n\\n    /* ============ External and Public Functions ============ */\\n\\n    function setConfig(ProtocolConfig calldata _config) external onlyOwner {\\n        ProtocolConfig memory calldataToStorage = _config;\\n        s.config = calldataToStorage;\\n        emit ConfigurationChange(_config);\\n    }\\n\\n    function setGemTypesConfig(GemTypeConfig[] calldata _gemTypeConfig) external onlyOwner {\\n        // fill in the storage and reset mint limit window counter for every gem type\\n        delete s.gemTypes;\\n        delete s.gemTypesMintWindows;\\n        for (uint gemTypeId = 0; gemTypeId < _gemTypeConfig.length; gemTypeId++) {\\n            GemTypeConfig memory cur = _gemTypeConfig[gemTypeId];\\n            s.gemTypes.push(cur);\\n            GemTypeMintWindow memory initWindow = GemTypeMintWindow(0, uint32(block.timestamp));\\n            s.gemTypesMintWindows.push(initWindow);\\n        }\\n    }\\n\\n    function setConfigWallets(address[WALLETS] memory _wallets) external onlyOwner {\\n        s.config.wallets = _wallets;\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        defo.approve(_wallets[uint(Wallets.DEXRouter)], type(uint256).max);\\n    }\\n\\n    function approveDefoForRouter() external onlyOwner {\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        defo.approve(s.config.wallets[uint(Wallets.DEXRouter)], type(uint256).max);\\n    }\\n\\n    function setConfigIncomeDistributionOnMint(uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] memory _incomeDistributionOnMint) external onlyOwner {\\n        s.config.incomeDistributionOnMint = _incomeDistributionOnMint;\\n    }\\n\\n    function setConfigMaintenancePeriod(uint32 _maintenancePeriod) external onlyOwner {\\n        s.config.maintenancePeriod = _maintenancePeriod;\\n    }\\n\\n    function setConfigRewardPeriod(uint32 _rewardPeriod) external onlyOwner {\\n        s.config.rewardPeriod = _rewardPeriod;\\n    }\\n\\n    function setConfigTaxScaleSinceLastClaimPeriod(uint32 _taxScaleSinceLastClaimPeriod) external onlyOwner {\\n        s.config.taxScaleSinceLastClaimPeriod = _taxScaleSinceLastClaimPeriod;\\n    }\\n\\n    function setConfigTaxRates(uint256[TAX_TIERS] memory _taxRates) external onlyOwner {\\n        s.config.taxRates = _taxRates;\\n    }\\n\\n    function setCharityContributionRate(uint256 _charityContributionRate) external onlyOwner {\\n        s.config.charityContributionRate = _charityContributionRate;\\n    }\\n\\n    function setConfigVaultWithdrawalTaxRate(uint256 _vaultWithdrawalTaxRate) external onlyOwner {\\n        s.config.vaultWithdrawalTaxRate = _vaultWithdrawalTaxRate;\\n    }\\n\\n    function setConfigTaperRate(uint256 _taperRate) external onlyOwner {\\n        s.config.taperRate = _taperRate;\\n    }\\n\\n    function setConfigMintLimitWindow(uint32 _mintLimitWindow) external onlyOwner {\\n        s.config.mintLimitWindow = _mintLimitWindow;\\n    }\\n\\n    function setConfigDefoTokenLimitConfig(DefoTokenLimitConfig calldata _defoTokenLimitConfig) external onlyOwner {\\n        DefoTokenLimitConfig memory temp = _defoTokenLimitConfig;\\n        s.config.defoTokenLimitConfig = temp;\\n    }\\n\\n    function lockMint() public onlyOwner {\\n        LibMintLimiter.lockMint();\\n    }\\n\\n    function unlockMint() public onlyOwner {\\n        LibMintLimiter.unlockMint();\\n    }\\n\\n    function pause() external onlyOwner {\\n        LibPauser._pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        LibPauser._unpause();\\n    }\\n\\n\\n    function getConfig() external view returns (ProtocolConfig memory) {\\n        return s.config;\\n    }\\n\\n    function getGemTypesConfig() external view returns (GemTypeConfig[] memory) {\\n        return s.gemTypes;\\n    }\\n\\n    function zeroMintCount(uint8 _gemTypeId) external onlyOwner {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        GemTypeMintWindow storage windowStorage = s.gemTypesMintWindows[_gemTypeId];\\n        windowStorage.mintCount = 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa12ee5ab95cc5a2f851763b531aa9858b6048c9ba56bca62cf75a39a1ae574ef\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n\\n/** @title  IConfig EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice The Yield Gem Configuration, setters and getters\\n*/\\ninterface IConfig {\\n    event ConfigurationChange(ProtocolConfig config);\\n    event GemTypeConfigurationChange(GemTypeConfig _gemTypeConfig);\\n\\n    function setConfig(ProtocolConfig calldata _config) external;\\n\\n    function getConfig() external view returns (ProtocolConfig memory);\\n\\n    function setGemTypesConfig(GemTypeConfig[] calldata _gemTypesConfig) external;\\n\\n    function getGemTypesConfig() external view returns (GemTypeConfig[] memory);\\n\\n    function lockMint() external;\\n\\n    function unlockMint() external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n}\\n\",\"keccak256\":\"0x4cb080dc01265144a608303fbd9a1e54f3f56a4849b08b5ebac9df46e563ba79\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/** @title  LibAppStorage EIP-2535 Diamond Facet Storage\\n  * @author Decentralized Foundation Team\\n  * @notice This diamond storage library is inherited by all facets and imported in libraries\\n*/\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf2e84cec0bd10a28b47d23a086c1d77096efac4f3b3d6f1c132ebbe814c8b1d5\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibMintLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n// helper for limit daily mints\\nlibrary LibMintLimiter {\\n    event MintLocked();\\n    event MintUnlocked();\\n\\n    /**\\n    *   @notice checks if a gem is mintable\\n    *   @param _gemTypeId type of a gem, initially it's 0,1,2 for sapphire, ruby, and diamond, respectively\\n    *   @return true if mint is available, no revert\\n    *   @dev checks mintLock config and daily mintcount limit\\n    */\\n    function isMintAvailableForGem(uint8 _gemTypeId) internal view returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(_gemTypeId < s.gemTypes.length, \\\"Wrong gem type\\\");\\n        GemTypeConfig memory gemType = s.gemTypes[_gemTypeId];\\n        GemTypeMintWindow memory gemTypeMintWindow = s.gemTypesMintWindows[_gemTypeId];\\n\\n        return !(s.config.mintLock) &&\\n        //checking if the limit in the current mint window has not been reached yet\\n        (((gemTypeMintWindow.mintCount < gemType.maxMintsPerLimitWindow) &&\\n        (block.timestamp <= gemTypeMintWindow.endOfMintLimitWindow)) ||\\n        //or we're already in another window ahead\\n        (block.timestamp > gemTypeMintWindow.endOfMintLimitWindow));\\n    }\\n\\n    function updateMintCount(uint8 _gemTypeId) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        GemTypeMintWindow storage windowStorage = s.gemTypesMintWindows[_gemTypeId];\\n        if (block.timestamp > windowStorage.endOfMintLimitWindow) {\\n            //setting up new mint window\\n            do {\\n                windowStorage.endOfMintLimitWindow += s.config.mintLimitWindow;\\n            }\\n            while (block.timestamp > windowStorage.endOfMintLimitWindow);\\n            windowStorage.mintCount = 0;\\n        }\\n        windowStorage.mintCount++;\\n    }\\n\\n    function getCurrentMintWindow(uint8 _gemTypeId) internal view returns (GemTypeMintWindow memory) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(_gemTypeId < s.gemTypes.length, \\\"Wrong gem type\\\");\\n        GemTypeMintWindow memory window = s.gemTypesMintWindows[_gemTypeId];\\n        if (block.timestamp > window.endOfMintLimitWindow) {\\n            //setting up new mint window\\n            do {\\n                window.endOfMintLimitWindow += s.config.mintLimitWindow;\\n            }\\n            while (block.timestamp > window.endOfMintLimitWindow);\\n            window.mintCount = 0;\\n        }\\n        return window;\\n    }\\n\\n\\n    function lockMint() internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.mintLock = true;\\n        emit MintLocked();\\n    }\\n\\n    function unlockMint() internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.mintLock = false;\\n        emit MintUnlocked();\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xb456ab1987377d3a09ccceedb38069555ee5f9e00e12f37434550da0f3d622f3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibPauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/**\\n*   @notice Pausable contract\\n*   @dev should start with  s.config.transferLock = false which is default\\n*/\\n\\nlibrary LibPauser {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function _paused() internal view returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.config.transferLock;\\n    }\\n\\n    function _requireNotPaused() internal view {\\n        require(!_paused(), \\\"Pausable: paused, transfer is locked\\\");\\n    }\\n\\n    function _requirePaused() internal view {\\n        require(_paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    function _pause() internal whenNotPaused {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.transferLock = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function _unpause() internal whenPaused {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.transferLock = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x3c65fc92fa0331bcde5c781013a71c91e75444c00c16669794b478bd6bbc7c7a\",\"license\":\"GPL-3.0\"},\"contracts/libraries/PercentHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n\\n/**\\n * @notice Library for percentage integer math, note PERCENTAGE_PRECISION_MULTIPLIER when configuring the protocol\\n * @author Decentralized Foundation Team\\n * @dev PERCENTAGE_PRECISION_MULTIPLIER*100 = 10000 greater than real percent, so 20% is represented as 2000, meaning 0.2\\n */\\n\\nlibrary PercentHelper {\\n    uint256 constant PERCENTAGE_PRECISION_MULTIPLIER = 100;\\n    uint256 constant HUNDRED_PERCENT = 100 * PERCENTAGE_PRECISION_MULTIPLIER;\\n\\n    /**\\n     * @dev simply a ratio of the given value, e.g. if tax is 30% and value if 100 the function gives 30\\n     * @param value Value to get ratio from\\n     * @param tax Percent to apply\\n     */\\n    ///todo make pure once got rid of the console.log\\n    function rate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (value * tax) / HUNDRED_PERCENT : 0;\\n    }\\n\\n    /**\\n    * @dev simple gross-up, gives back gross for net value, if charity is 5%, then gross up of 95 gives 100\\n     * @param netValue Net value to gross up\\n     * @param tax Percent that was applied\\n     */\\n    function grossUp(uint256 netValue, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (netValue * HUNDRED_PERCENT) / (HUNDRED_PERCENT - tax) : 0;\\n    }\\n\\n\\n    /// @dev received inverted percent for taper calc, if ratio is 20%, then 1/(1-20%) = 25%\\n    function invertedRate(uint256 value, uint256 ratio) internal pure returns (uint256) {\\n        return value * HUNDRED_PERCENT / (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function oneHundredLessPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function minusHundredPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (ratio - HUNDRED_PERCENT);\\n    }\\n\\n\\n    function reversePercent(uint256 ratio) internal pure returns (uint256) {\\n        return PERCENTAGE_PRECISION_MULTIPLIER / ratio;\\n    }\\n\\n    function percentPower(uint256 value, uint256 ratio, uint pow) internal pure returns (uint256) {\\n        return value * PERCENTAGE_PRECISION_MULTIPLIER ** pow / ratio ** pow;\\n    }\\n\\n\\n    /// @dev simply value less given percentage, e.g. if tax is 30% the functio gives 70 for 100\\n    function lessRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value - rate(value, tax);\\n    }\\n\\n    function plusRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value + rate(value, tax);\\n    }\\n}\\n\",\"keccak256\":\"0x70d9a8e3cf2aad9102eda57cb8d7efacca2f96f89d50aef7c6088f522c4763ae\",\"license\":\"GPL-3.0\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80636bfe99ec116100b857806392ad7dc31161007c57806392ad7dc3146102455780639956d1db1461024d578063c3f909d414610260578063d864d02a14610275578063e0b6bb6714610288578063e90e53f41461029057600080fd5b80636bfe99ec146101e65780638456cb59146101f95780638838640e146102015780638a1ad3251461021f5780638ad15c211461023257600080fd5b8063683da553116100ff578063683da55314610187578063685e2a9a1461019a578063689da232146101ad57806369d40589146101c05780636bcb63d6146101d357600080fd5b8063064b070e1461013c5780633f4ba83a146101515780633f5db5ca1461015957806341ef35c61461016c5780635a9a664f1461017f575b600080fd5b61014f61014a366004611299565b6102a3565b005b61014f610350565b61014f6101673660046112bd565b610362565b61014f61017a366004611384565b61039a565b61014f6103b3565b61014f6101953660046113b9565b6103c3565b61014f6101a83660046113d4565b6103ef565b61014f6101bb3660046113ed565b6103fc565b61014f6101ce3660046113b9565b6105a6565b61014f6101e13660046113b9565b6105d4565b61014f6101f43660046114fb565b610604565b61014f610619565b610209610629565b6040516102169190611517565b60405180910390f35b61014f61022d3660046113b9565b6106e4565b61014f6102403660046113d4565b610708565b61014f610715565b61014f61025b3660046115a9565b6107ad565b6102686107ec565b6040516102169190611694565b61014f6102833660046113d4565b6109dd565b61014f6109ea565b61014f61029e36600461178d565b6109fa565b6102ab610ba2565b6102b86002826008610dea565b50600080600101546001600160a01b031690508063095ea7b383600760200201516040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260001960248201526044016020604051808303816000875af1158015610327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b91906117c4565b505050565b610358610ba2565b610360610c2e565b565b61036a610ba2565b60008081601e018360ff1681548110610385576103856117a0565b60009182526020822060029091020155505050565b6103a2610ba2565b6103af6011826005610e42565b5050565b6103bb610ba2565b610360610c7b565b6103cb610ba2565b6019805463ffffffff909216620100000265ffffffff000019909216919091179055565b6103f7610ba2565b601655565b610404610ba2565b610410601d6000610e70565b61041c601e6000610e94565b60005b8181101561034b57600083838381811061043b5761043b6117a0565b905060c0020180360381019061045191906117e1565b601d8054600181018255600091909152815160069091027f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f810191825560208301517f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc1461350820155604083015192935083926104ef917f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146135101906002610eb5565b5060608201516004820155608090910151600590910155506040805180820190915260008082524263ffffffff90811660208401908152601e8054600181018255935292517f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e35060029093029283015591517f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e351909101805463ffffffff1916919092161790558061059e81611868565b91505061041f565b6105ae610ba2565b6010805463ffffffff909216600160401b0263ffffffff60401b19909216919091179055565b6105dc610ba2565b6010805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b61060c610ba2565b6103af600a826002610ee2565b610621610ba2565b610360610cb3565b60606000601d01805480602002602001604051908101604052809291908181526020016000905b828210156106db5760008481526020908190206040805160a081018252600686029092018054835260018101549383019390935280518082018083529293929184019160028085019182845b81548152602001906001019080831161069c57505050505081526020016004820154815260200160058201548152505081526020019060010190610650565b50505050905090565b6106ec610ba2565b6010805463ffffffff191663ffffffff92909216919091179055565b610710610ba2565b601755565b61071d610ba2565b600080600101546001600160a01b031690508063095ea7b360026007015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260001960248201526044016020604051808303816000875af1158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103af91906117c4565b6107b5610ba2565b60006107c636839003830183611900565b8051601a556020810151601b5560400151601c805460ff19169115159190911790555050565b6107f4610f29565b6040805161020081019091526000816101c081018260028282826020028201915b81546001600160a01b031681526001909101906020018083116108155750505091835250506040805161010081019182905260209092019190600284019060089082845b81546001600160a01b0316815260019091019060200180831161085957505050918352505060408051808201909152602090910190600a830160026000835b828210156108df5760408051606081019182905290600384810287019182845b8154815260200190600101908083116108b857505050505081526020019060010190610898565b50505090825250601082015463ffffffff808216602084015264010000000082048116604080850191909152600160401b909204166060830152805160a081019182905260809092019190601184019060059082845b815481526020019060010190808311610935575050509183525050601682015460208083019190915260178301546040808401919091526018840154606080850191909152601985015460ff8082161515608087015261010082048116151560a08701526201000090910463ffffffff1660c086015282519182018352601a8601548252601b86015493820193909352601c9094015490911615159083015260e00152919050565b6109e5610ba2565b601855565b6109f2610ba2565b610360610cfd565b610a02610ba2565b6000610a1336839003830183611975565b80519091508190600090610a2a9082906002610fdd565b506020820151610a409060028301906008610dea565b506040820151610a5690600a8301906002610ee2565b506060820151601082018054608085015160a086015163ffffffff908116600160401b0263ffffffff60401b199282166401000000000267ffffffffffffffff199094169190951617919091171691909117905560c0820151610abf9060118301906005610e42565b5060e08201516016820155610100808301516017830155610120830151601883015561014083015160198301805461016086015161018087015161ffff1990921693151561ff001916939093179215159093029190911765ffffffff000019166201000063ffffffff909316929092029190911790556101a0909101518051601a8301556020810151601b830155604090810151601c909201805460ff191692151592909217909155517f27729471d7e431d28c6dbd4c8bd38ca0d6d3f5906f932881d1572b4edd93c3c090610b96908490611b4d565b60405180910390a15050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146103605760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b60648201526084015b60405180910390fd5b610c36610d38565b6019805461ff00191690556040513381526000907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b6019805460ff191690556040516000907f16fe33fab5fd851b7e9a856a666ea43cc5515bbb51689c3d370085d004418123908290a150565b610cbb610d86565b6019805461ff0019166101001790556040513381526000907f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610c70565b6019805460ff191660011790556040516000907faa71a6e005bc4e0ea53d6184338a28d3f4737f18bed30c92d93a239ad5a71747908290a150565b601954610100900460ff166103605760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610c25565b601954610100900460ff16156103605760405162461bcd60e51b8152602060048201526024808201527f5061757361626c653a207061757365642c207472616e73666572206973206c6f60448201526318dad95960e21b6064820152608401610c25565b8260088101928215610e32579160200282015b82811115610e3257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610dfd565b50610e3e929150611024565b5090565b8260058101928215610e32579160200282015b82811115610e32578251825591602001919060010190610e55565b5080546000825560060290600052602060002090810190610e919190611039565b50565b5080546000825560020290600052602060002090810190610e91919061106f565b8260028101928215610e325791602002820182811115610e32578251825591602001919060010190610e55565b600683019183908215610f1d579160200282015b82811115610f1d578251610f0d9083906003611093565b5091602001919060030190610ef6565b50610e3e9291506110c0565b604051806101c00160405280610f3d6110e1565b8152602001610f4a6110ff565b8152602001610f5761111e565b8152600060208201819052604082018190526060820152608001610f7961114b565b8152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600063ffffffff168152602001610fd8604051806060016040528060008152602001600081526020016000151581525090565b905290565b8260028101928215610e325791602002820182811115610e3257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610dfd565b5b80821115610e3e5760008155600101611025565b80821115610e3e576000808255600182018190556002820181905560038201819055600482018190556005820155600601611039565b5b80821115610e3e576000815560018101805463ffffffff19169055600201611070565b8260038101928215610e325791602002820182811115610e32578251825591602001919060010190610e55565b80821115610e3e5760008082556001820181905560028201556003016110c0565b60405180604001604052806002906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b60405180604001604052806002905b611135611169565b81526020019060019003908161112d5790505090565b6040518060a001604052806005906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff811182821017156111c1576111c1611187565b60405290565b6040805190810167ffffffffffffffff811182821017156111c1576111c1611187565b6040516060810167ffffffffffffffff811182821017156111c1576111c1611187565b6001600160a01b0381168114610e9157600080fd5b600082601f83011261123357600080fd5b60405161010080820182811067ffffffffffffffff8211171561125857611258611187565b6040528301818582111561126b57600080fd5b845b8281101561128e5780356112808161120d565b82526020918201910161126d565b509195945050505050565b600061010082840312156112ac57600080fd5b6112b68383611222565b9392505050565b6000602082840312156112cf57600080fd5b813560ff811681146112b657600080fd5b60006112ea6111c7565b90508060408301848111156112fe57600080fd5b835b81811015611318578035835260209283019201611300565b50505092915050565b600082601f83011261133257600080fd5b60405160a0810181811067ffffffffffffffff8211171561135557611355611187565b6040528060a084018581111561136a57600080fd5b845b8181101561128e57803583526020928301920161136c565b600060a0828403121561139657600080fd5b6112b68383611321565b803563ffffffff811681146113b457600080fd5b919050565b6000602082840312156113cb57600080fd5b6112b6826113a0565b6000602082840312156113e657600080fd5b5035919050565b6000806020838503121561140057600080fd5b823567ffffffffffffffff8082111561141857600080fd5b818501915085601f83011261142c57600080fd5b81358181111561143b57600080fd5b86602060c08302850101111561145057600080fd5b60209290920196919550909350505050565b6000601f838184011261147457600080fd5b61147c6111c7565b8060c085018681111561148e57600080fd5b855b818110156114ef5787858201126114a75760008081fd5b6114af6111ea565b80606083018a8111156114c25760008081fd5b835b818110156114dc5780358452602093840193016114c4565b5050855250602090930192606001611490565b50909695505050505050565b600060c0828403121561150d57600080fd5b6112b68383611462565b60208082528251828201819052600091906040908185019086840185805b8381101561159b57825180518652878101518887015286810151878701845b60028110156115715782518252918a0191908a0190600101611554565b5050506060810151608087810191909152015160a086015260c09094019391860191600101611535565b509298975050505050505050565b6000606082840312156115bb57600080fd5b50919050565b8060005b60028110156115ed5781516001600160a01b03168452602093840193909101906001016115c5565b50505050565b8060005b60088110156115ed5781516001600160a01b03168452602093840193909101906001016115f7565b806000805b600281101561166a57825185835b6003811015611651578251825260209283019290910190600101611632565b5050506060949094019360209290920191600101611624565b5050505050565b8060005b60058110156115ed578151845260209384019390910190600101611675565b6000610420820190506116a88284516115c1565b60208301516116ba60408401826115f3565b5060408301516101406116cf8185018361161f565b606085015163ffffffff9081166102008601526080860151811661022086015260a08601511661024085015260c08501519150611710610260850183611671565b60e0850151610300850152610100850151610320850152610120850151610340850152840151151561036084015250610160830151151561038083015261018083015163ffffffff166103a08301526101a083015180516103c084015260208101516103e0840152604081015115156104008401525b5092915050565b600061042082840312156115bb57600080fd5b634e487b7160e01b600052603260045260246000fd5b8015158114610e9157600080fd5b6000602082840312156117d657600080fd5b81516112b6816117b6565b600060c082840312156117f357600080fd5b60405160a0810181811067ffffffffffffffff8211171561181657611816611187565b8060405250823581526020830135602082015283605f84011261183857600080fd5b61184584604085016112e0565b60408201526080830135606082015260a083013560808201528091505092915050565b60006001820161188857634e487b7160e01b600052601160045260246000fd5b5060010190565b80356113b4816117b6565b6000606082840312156118ac57600080fd5b6040516060810181811067ffffffffffffffff821117156118cf576118cf611187565b8060405250809150823581526020830135602082015260408301356118f3816117b6565b6040919091015292915050565b60006060828403121561191257600080fd5b6112b6838361189a565b600082601f83011261192d57600080fd5b6119356111c7565b80604084018581111561194757600080fd5b845b8181101561196a57803561195c8161120d565b845260209384019301611949565b509095945050505050565b6000610420828403121561198857600080fd5b61199061119d565b61199a848461191c565b81526119a98460408501611222565b60208201526101406119bd85828601611462565b60408301526119cf61020085016113a0565b60608301526119e161022085016113a0565b60808301526119f361024085016113a0565b60a0830152611a06856102608601611321565b60c083015261030084013560e0830152610320840135610100830152610340840135610120830152611a3b610360850161188f565b90820152611a4c610380840161188f565b610160820152611a5f6103a084016113a0565b610180820152611a73846103c0850161189a565b6101a08201529392505050565b8060005b60028110156115ed578135611a988161120d565b6001600160a01b031684526020938401939190910190600101611a84565b8060005b60088110156115ed578135611ace8161120d565b6001600160a01b031684526020938401939190910190600101611aba565b806000805b600281101561166a57606080848737948501828152949290920191600101611af1565b60a081833750600060a082015250565b80358252602081013560208301526040810135611b40816117b6565b8015156040840152505050565b6104208101611b5c8284611a80565b611b6c6040830160408501611ab6565b610140611b7d818401828601611aec565b50610200611b8c8185016113a0565b63ffffffff1690830152610220611ba48482016113a0565b63ffffffff1690830152610240611bbc8482016113a0565b63ffffffff1690830152610260611bd7818401858301611b14565b50610300838101359083015261032080840135908301526103408084013590830152610360611c0781850161188f565b151590830152610380611c1b84820161188f565b1515908301526103a0611c2f8482016113a0565b63ffffffff16908301526103c0611786818401858301611b2456fea2646970667358221220cc7c43fd1ed08067ad1a5654ea5b12a1573ce4cb89b0cd95c1fc2fa21c20da1664736f6c634300080f0033",
  "devdoc": {
    "author": "Decentralized Foundation Team",
    "kind": "dev",
    "methods": {},
    "title": "ERC721Facet EIP-2535 Diamond Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4283,
        "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4540_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)8_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[8]",
        "numberOfBytes": "256"
      },
      "t_array(t_array(t_uint256)3_storage)2_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][2]",
        "numberOfBytes": "192"
      },
      "t_array(t_contract(IERC20)737)2_storage": {
        "base": "t_contract(IERC20)737",
        "encoding": "inplace",
        "label": "contract IERC20[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(GemTypeConfig)4430_storage)dyn_storage": {
        "base": "t_struct(GemTypeConfig)4430_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GemTypeMintWindow)4435_storage)dyn_storage": {
        "base": "t_struct(GemTypeMintWindow)4435_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeMintWindow[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)737": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Booster)4457": {
        "encoding": "inplace",
        "label": "enum Booster",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4457,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => mapping(enum Booster => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_mapping(t_enum(Booster)4457,t_uint256))"
      },
      "t_mapping(t_address,t_struct(Fi)4478_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Fi)",
        "numberOfBytes": "32",
        "value": "t_struct(Fi)4478_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Booster)4457,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Booster)4457",
        "label": "mapping(enum Booster => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Gem)4497_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gem)",
        "numberOfBytes": "32",
        "value": "t_struct(Gem)4497_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_mapping(t_enum(Booster)4457,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(enum Booster => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Booster)4457,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4540_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4500,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "config",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ProtocolConfig)4417_storage"
          },
          {
            "astId": 4504,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gemTypes",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_struct(GemTypeConfig)4430_storage)dyn_storage"
          },
          {
            "astId": 4508,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gemTypesMintWindows",
            "offset": 0,
            "slot": "30",
            "type": "t_array(t_struct(GemTypeMintWindow)4435_storage)dyn_storage"
          },
          {
            "astId": 4511,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "defoTokenLimitWindow",
            "offset": 0,
            "slot": "31",
            "type": "t_struct(DEFOTokenLimitWindow)4444_storage"
          },
          {
            "astId": 4516,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gems",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_uint256,t_struct(Gem)4497_storage)"
          },
          {
            "astId": 4519,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "nft",
            "offset": 0,
            "slot": "34",
            "type": "t_struct(ERC721Storage)4351_storage"
          },
          {
            "astId": 4522,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "total",
            "offset": 0,
            "slot": "47",
            "type": "t_struct(Fi)4478_storage"
          },
          {
            "astId": 4527,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "usersFi",
            "offset": 0,
            "slot": "57",
            "type": "t_mapping(t_address,t_struct(Fi)4478_storage)"
          },
          {
            "astId": 4536,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "usersNextGemBooster",
            "offset": 0,
            "slot": "58",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4457,t_uint256)))"
          },
          {
            "astId": 4539,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "defoTokenLimitPerRewards",
            "offset": 0,
            "slot": "59",
            "type": "t_struct(DEFOTokenLimitPerRewards)4453_storage"
          }
        ],
        "numberOfBytes": "1952"
      },
      "t_struct(Counter)2737_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2736,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DEFOTokenLimitPerRewards)4453_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitPerRewards",
        "members": [
          {
            "astId": 4448,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4452,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "timeOfWindowStart",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DEFOTokenLimitWindow)4444_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitWindow",
        "members": [
          {
            "astId": 4439,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4443,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "timeOfLastSale",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefoTokenLimitConfig)4376_storage": {
        "encoding": "inplace",
        "label": "struct DefoTokenLimitConfig",
        "members": [
          {
            "astId": 4371,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "saleLimitPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4373,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "saleLimitAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4375,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "limitByReward",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ERC721Storage)4351_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage",
        "members": [
          {
            "astId": 4306,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4308,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4311,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokenIdTracker",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Counter)2737_storage"
          },
          {
            "astId": 4315,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "owners",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4319,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "balances",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4323,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokenApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4329,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "operatorApprovals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 4331,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4337,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "ownedTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 4341,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "ownedTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4344,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "allTokens",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4348,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "allTokensIndex",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4350,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "init",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Fi)4478_storage": {
        "encoding": "inplace",
        "label": "struct Fi",
        "members": [
          {
            "astId": 4459,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "claimedGross",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4461,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "claimedNet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4463,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "stakedGross",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4465,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "stakedNet",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4467,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "unStakedGross",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4469,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "unStakedGrossUp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4471,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "unStakedNet",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4473,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "donated",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4475,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "claimTaxPaid",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4477,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "vaultTaxPaid",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Gem)4497_storage": {
        "encoding": "inplace",
        "label": "struct Gem",
        "members": [
          {
            "astId": 4480,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gemTypeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4483,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "booster",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Booster)4457"
          },
          {
            "astId": 4485,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintTime",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4487,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "lastRewardWithdrawalTime",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4489,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "lastMaintenanceTime",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4492,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "fi",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Fi)4478_storage"
          },
          {
            "astId": 4494,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "presold",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 4496,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "maintenanceFeePaid",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(GemTypeConfig)4430_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeConfig",
        "members": [
          {
            "astId": 4419,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "maintenanceFeeDai",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4421,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "rewardAmountDefo",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4425,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 4427,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taperRewardsThresholdDefo",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4429,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "maxMintsPerLimitWindow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(GemTypeMintWindow)4435_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeMintWindow",
        "members": [
          {
            "astId": 4432,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4434,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "endOfMintLimitWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProtocolConfig)4417_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolConfig",
        "members": [
          {
            "astId": 4381,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "paymentTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20)737)2_storage"
          },
          {
            "astId": 4385,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "wallets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)8_storage"
          },
          {
            "astId": 4391,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "incomeDistributionOnMint",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_array(t_uint256)3_storage)2_storage"
          },
          {
            "astId": 4393,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "maintenancePeriod",
            "offset": 0,
            "slot": "16",
            "type": "t_uint32"
          },
          {
            "astId": 4395,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "rewardPeriod",
            "offset": 4,
            "slot": "16",
            "type": "t_uint32"
          },
          {
            "astId": 4397,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taxScaleSinceLastClaimPeriod",
            "offset": 8,
            "slot": "16",
            "type": "t_uint32"
          },
          {
            "astId": 4401,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taxRates",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_uint256)5_storage"
          },
          {
            "astId": 4403,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "charityContributionRate",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 4405,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "vaultWithdrawalTaxRate",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 4407,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taperRate",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256"
          },
          {
            "astId": 4409,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintLock",
            "offset": 0,
            "slot": "25",
            "type": "t_bool"
          },
          {
            "astId": 4411,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "transferLock",
            "offset": 1,
            "slot": "25",
            "type": "t_bool"
          },
          {
            "astId": 4413,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintLimitWindow",
            "offset": 2,
            "slot": "25",
            "type": "t_uint32"
          },
          {
            "astId": 4416,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "defoTokenLimitConfig",
            "offset": 0,
            "slot": "26",
            "type": "t_struct(DefoTokenLimitConfig)4376_storage"
          }
        ],
        "numberOfBytes": "928"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}