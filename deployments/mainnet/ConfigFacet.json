{
  "address": "0x87c88acbfC5D8715eDe1F04A78209bE980860bae",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20[2]",
              "name": "paymentTokens",
              "type": "address[2]"
            },
            {
              "internalType": "address[7]",
              "name": "wallets",
              "type": "address[7]"
            },
            {
              "internalType": "uint256[3][2]",
              "name": "incomeDistributionOnMint",
              "type": "uint256[3][2]"
            },
            {
              "internalType": "uint32",
              "name": "maintenancePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "rewardPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "taxScaleSinceLastClaimPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint256[5]",
              "name": "taxRates",
              "type": "uint256[5]"
            },
            {
              "internalType": "uint256",
              "name": "charityContributionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultWithdrawalTaxRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taperRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mintLock",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferLock",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "mintLimitWindow",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "saleLimitPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "saleLimitAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "limitByReward",
                  "type": "bool"
                }
              ],
              "internalType": "struct DefoTokenLimitConfig",
              "name": "defoTokenLimitConfig",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct ProtocolConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "ConfigurationChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maintenanceFeeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmountDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "price",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "taperRewardsThresholdDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxMintsPerLimitWindow",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct GemTypeConfig",
          "name": "_gemTypeConfig",
          "type": "tuple"
        }
      ],
      "name": "GemTypeConfigurationChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20[2]",
              "name": "paymentTokens",
              "type": "address[2]"
            },
            {
              "internalType": "address[7]",
              "name": "wallets",
              "type": "address[7]"
            },
            {
              "internalType": "uint256[3][2]",
              "name": "incomeDistributionOnMint",
              "type": "uint256[3][2]"
            },
            {
              "internalType": "uint32",
              "name": "maintenancePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "rewardPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "taxScaleSinceLastClaimPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint256[5]",
              "name": "taxRates",
              "type": "uint256[5]"
            },
            {
              "internalType": "uint256",
              "name": "charityContributionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultWithdrawalTaxRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taperRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mintLock",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferLock",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "mintLimitWindow",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "saleLimitPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "saleLimitAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "limitByReward",
                  "type": "bool"
                }
              ],
              "internalType": "struct DefoTokenLimitConfig",
              "name": "defoTokenLimitConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct ProtocolConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGemTypesConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maintenanceFeeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmountDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "price",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "taperRewardsThresholdDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxMintsPerLimitWindow",
              "type": "uint256"
            }
          ],
          "internalType": "struct GemTypeConfig[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_charityContributionRate",
          "type": "uint256"
        }
      ],
      "name": "setCharityContributionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20[2]",
              "name": "paymentTokens",
              "type": "address[2]"
            },
            {
              "internalType": "address[7]",
              "name": "wallets",
              "type": "address[7]"
            },
            {
              "internalType": "uint256[3][2]",
              "name": "incomeDistributionOnMint",
              "type": "uint256[3][2]"
            },
            {
              "internalType": "uint32",
              "name": "maintenancePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "rewardPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "taxScaleSinceLastClaimPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint256[5]",
              "name": "taxRates",
              "type": "uint256[5]"
            },
            {
              "internalType": "uint256",
              "name": "charityContributionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultWithdrawalTaxRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taperRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mintLock",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferLock",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "mintLimitWindow",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "saleLimitPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "saleLimitAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "limitByReward",
                  "type": "bool"
                }
              ],
              "internalType": "struct DefoTokenLimitConfig",
              "name": "defoTokenLimitConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct ProtocolConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "saleLimitPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "saleLimitAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "limitByReward",
              "type": "bool"
            }
          ],
          "internalType": "struct DefoTokenLimitConfig",
          "name": "_defoTokenLimitConfig",
          "type": "tuple"
        }
      ],
      "name": "setConfigDefoTokenLimitConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3][2]",
          "name": "_incomeDistributionOnMint",
          "type": "uint256[3][2]"
        }
      ],
      "name": "setConfigIncomeDistributionOnMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maintenancePeriod",
          "type": "uint32"
        }
      ],
      "name": "setConfigMaintenancePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_mintLimitWindow",
          "type": "uint32"
        }
      ],
      "name": "setConfigMintLimitWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_rewardPeriod",
          "type": "uint32"
        }
      ],
      "name": "setConfigRewardPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taperRate",
          "type": "uint256"
        }
      ],
      "name": "setConfigTaperRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "_taxRates",
          "type": "uint256[5]"
        }
      ],
      "name": "setConfigTaxRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_taxScaleSinceLastClaimPeriod",
          "type": "uint32"
        }
      ],
      "name": "setConfigTaxScaleSinceLastClaimPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultWithdrawalTaxRate",
          "type": "uint256"
        }
      ],
      "name": "setConfigVaultWithdrawalTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[7]",
          "name": "_wallets",
          "type": "address[7]"
        }
      ],
      "name": "setConfigWallets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maintenanceFeeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmountDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "price",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "taperRewardsThresholdDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxMintsPerLimitWindow",
              "type": "uint256"
            }
          ],
          "internalType": "struct GemTypeConfig[]",
          "name": "_gemTypeConfig",
          "type": "tuple[]"
        }
      ],
      "name": "setGemTypesConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_gemTypeId",
          "type": "uint8"
        }
      ],
      "name": "zeroMintCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8b2d5cf70d161d887ce528f006db2ca7016699c2efe0c1a21b3a1e4ca5da981",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe4704c3794F20d5479942b2733F769c54Ca37de7",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "1552617",
    "logsBloom": "0x
    "blockHash": "0x0e1d0e1590587dbaa03784b4a6f2ff79227c3574d855236a7b00af9d3f33b0e5",
    "transactionHash": "0xd8b2d5cf70d161d887ce528f006db2ca7016699c2efe0c1a21b3a1e4ca5da981",
    "logs": [],
    "blockNumber": 20518616,
    "cumulativeGasUsed": "1837811",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "cf83d4ba537ba4fe4e5351d0e106537f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20[2]\",\"name\":\"paymentTokens\",\"type\":\"address[2]\"},{\"internalType\":\"address[7]\",\"name\":\"wallets\",\"type\":\"address[7]\"},{\"internalType\":\"uint256[3][2]\",\"name\":\"incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"},{\"internalType\":\"uint32\",\"name\":\"maintenancePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256[5]\",\"name\":\"taxRates\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"charityContributionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultWithdrawalTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taperRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"mintLimitWindow\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"defoTokenLimitConfig\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct ProtocolConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"ConfigurationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maintenanceFeeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"price\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"taperRewardsThresholdDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintsPerLimitWindow\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GemTypeConfig\",\"name\":\"_gemTypeConfig\",\"type\":\"tuple\"}],\"name\":\"GemTypeConfigurationChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20[2]\",\"name\":\"paymentTokens\",\"type\":\"address[2]\"},{\"internalType\":\"address[7]\",\"name\":\"wallets\",\"type\":\"address[7]\"},{\"internalType\":\"uint256[3][2]\",\"name\":\"incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"},{\"internalType\":\"uint32\",\"name\":\"maintenancePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256[5]\",\"name\":\"taxRates\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"charityContributionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultWithdrawalTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taperRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"mintLimitWindow\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"defoTokenLimitConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct ProtocolConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGemTypesConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maintenanceFeeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"price\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"taperRewardsThresholdDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintsPerLimitWindow\",\"type\":\"uint256\"}],\"internalType\":\"struct GemTypeConfig[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_charityContributionRate\",\"type\":\"uint256\"}],\"name\":\"setCharityContributionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20[2]\",\"name\":\"paymentTokens\",\"type\":\"address[2]\"},{\"internalType\":\"address[7]\",\"name\":\"wallets\",\"type\":\"address[7]\"},{\"internalType\":\"uint256[3][2]\",\"name\":\"incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"},{\"internalType\":\"uint32\",\"name\":\"maintenancePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256[5]\",\"name\":\"taxRates\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"charityContributionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultWithdrawalTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taperRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"mintLimitWindow\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"defoTokenLimitConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct ProtocolConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"_defoTokenLimitConfig\",\"type\":\"tuple\"}],\"name\":\"setConfigDefoTokenLimitConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3][2]\",\"name\":\"_incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"}],\"name\":\"setConfigIncomeDistributionOnMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maintenancePeriod\",\"type\":\"uint32\"}],\"name\":\"setConfigMaintenancePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_mintLimitWindow\",\"type\":\"uint32\"}],\"name\":\"setConfigMintLimitWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rewardPeriod\",\"type\":\"uint32\"}],\"name\":\"setConfigRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taperRate\",\"type\":\"uint256\"}],\"name\":\"setConfigTaperRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_taxRates\",\"type\":\"uint256[5]\"}],\"name\":\"setConfigTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"}],\"name\":\"setConfigTaxScaleSinceLastClaimPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultWithdrawalTaxRate\",\"type\":\"uint256\"}],\"name\":\"setConfigVaultWithdrawalTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[7]\",\"name\":\"_wallets\",\"type\":\"address[7]\"}],\"name\":\"setConfigWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maintenanceFeeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"price\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"taperRewardsThresholdDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintsPerLimitWindow\",\"type\":\"uint256\"}],\"internalType\":\"struct GemTypeConfig[]\",\"name\":\"_gemTypeConfig\",\"type\":\"tuple[]\"}],\"name\":\"setGemTypesConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gemTypeId\",\"type\":\"uint8\"}],\"name\":\"zeroMintCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Decentralized Foundation Team\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC721Facet EIP-2535 Diamond Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/ConfigFacet.sol\":\"ConfigFacet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/base-facet/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n/**\\n * @title  BaseFacet\\n * @author Decentralized Foundation Team\\n * @notice BaseFacet is a base contract all facets to inherit, includes cross-facet utils and  common reusable functions for DEFO Diamond\\n */\\ncontract BaseFacet is Storage {\\n\\n    /* ====================== Modifiers ====================== */\\n\\n    modifier exists(uint256 _tokenId) {\\n        _requireExists(_tokenId);\\n        _;\\n    }\\n\\n    modifier onlyGemHolder(uint256 _tokenId) {\\n        require(s.nft.owners[_tokenId] == _msgSender(), \\\"You don't own this gem\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n    modifier nonZeroAddress(address _owner) {\\n        require(_owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        _;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _msgSender() internal override view returns (address sender_) {\\n        if (Context._msgSender() == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function _getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function _requireExists(uint256 _tokenId) internal view {\\n        require(_exists(_tokenId), \\\"ERC721: tokenId is not valid\\\");\\n    }\\n\\n    function _exists(uint256 _tokenId) internal view returns (bool) {\\n        return (s.nft.owners[_tokenId] != address(0));\\n    }\\n\\n    ///todo ensure passing memory array here to the public functions is pretty optimal\\n    function _getGemIds(address _user) internal view returns (uint256[] memory) {\\n        uint256 numberOfGems = s.nft.balances[_user];\\n        uint256[] memory gemIds = new uint256[](numberOfGems);\\n        for (uint256 i = 0; i < numberOfGems; i++) {\\n            uint256 gemId = s.nft.ownedTokens[_user][i];\\n            require(_exists(gemId), \\\"A gem doesn't exists\\\");\\n            gemIds[i] = gemId;\\n        }\\n        return gemIds;\\n    }\\n\\n    function _getAllUsers() internal view returns (address[] memory users_) {\\n        users_ = new address[](s.nft.allTokens.length);\\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\\n            users_[tokenId] = s.nft.owners[tokenId];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5ee18d83372dec082d66a9c61a88c6b5c034a741118da8be0524f9f1ed4f4b13\",\"license\":\"GPL-3.0\"},\"contracts/base-facet/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {AppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0x66f07eea1ae3a0fbf40fbf070d67bed29b4a0a2dfbb689f58292d28b5065418a\",\"license\":\"GPL-3.0\"},\"contracts/data-types/IDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n/**\\n*   @dev The only source for all the data structures used in the protocol storage\\n*   @dev This includes general config, gem type config, and mutable data\\n*/\\n\\n/// @dev number of payment tokens to enumerate the error, initially it's Defo and Dai,\\n/// @dev see PaymentTokens enum\\nuint256 constant PAYMENT_TOKENS = 2;\\n\\n/// @dev number of income recievers on yield gem mint\\nuint256 constant PAYMENT_RECEIVERS = 3;\\n\\n/// @dev total wallets on the protocol, see Wallets enum\\nuint256 constant WALLETS = 7;\\n\\n/// @dev total number of supported tax tiers\\nuint256 constant TAX_TIERS = 5;\\n\\n/**\\n*   @notice a struct for data compliance with erc721 standard\\n*   @param name Token name\\n*   @param symbol Token symbol\\n*   @param owners Mapping from token ID to owner address\\n*   @param balances Mapping owner address to token count\\n*   @param tokenApprovals Mapping from token ID to approved address\\n*   @param operatorApprovals Mapping from owner to operator approvals\\n*   @param ownedTokens Mapping from owner to list of owned token IDs\\n*   @param ownedTokensIndex Mapping from token ID to index of the owner tokens list\\n*   @param allTokens Array with all token ids, used for enumeration\\n*   @param allTokensIndex Mapping from token id to position in the allTokens array\\n*/\\n    struct ERC721Storage {\\n        string name;\\n        string symbol;\\n        Counters.Counter tokenIdTracker;\\n        mapping(uint256 => address) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n        string baseURI;\\n        mapping(address => mapping(uint256 => uint256)) ownedTokens;\\n        mapping(uint256 => uint256) ownedTokensIndex;\\n        uint256[] allTokens;\\n        mapping(uint256 => uint256) allTokensIndex;\\n        bool init;\\n    }\\n\\n\\n/// @notice token enum to index arrays of rates and addresses, the convention is that Dai is at place 0, Defo is at 1\\n/// @dev the order is extremely important once deployed\\n    enum PaymentTokens {\\n        Dai,\\n        Defo\\n    }\\n\\n/// @notice protocol wallets for easy enumeration,\\n/// @dev the order is extremely important once deployed, see configuration scripts\\n    enum Wallets {\\n        Treasury,\\n        RewardPool,\\n        LiquidityPair,\\n        Stabilizer,\\n        Charity,\\n        Vault,\\n        RedeemContract\\n    }\\n\\n\\n/// @notice these tiers correspond to the configurable percentage from the diamond storage\\n    enum TaxTiers {\\n        Tier0NoPayment,\\n        Tier1HugeTax,\\n        Tier2MediumTax,\\n        Tier3SmallTax,\\n        Tier4NoTax\\n    }\\n\\n/**\\n * @notice DefoTokenLimitConfig DEFO ERC20 Token transfer limiter, this is for the 1000 DEFO per 24h sale limitation, can be changes with setTransferLimit\\n * @param saleLimitPeriod initially 1 day\\n * @param saleLimitAmount initially 1000 tokens\\n*/\\n    struct DefoTokenLimitConfig {\\n        uint256 saleLimitPeriod;\\n        uint256 saleLimitAmount;\\n        bool limitByReward;\\n    }\\n\\n/**\\n * @notice Main Protocol Configuration structure\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set, including no minting\\n     * @param incomeDistributionOnMint distribution of the payment among tokens in percent rates, all values use percentage multiplier (see percent helper), here addresses are from the Addresses\\n     * @param maintenancePeriod a period in seconds for maintenance fee accrual, initially one month\\n     * @param rewardPeriod a period in seconds for generating yield gem rewards, initially one week\\n     * @param mintCountResetPeriod a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs.\\n     * @param taxScaleSinceLastClaimPeriod a period in seconds for a tax scale to work out, initially one week\\n     * @param taxRates tax rates in percent (with percent multiplier, see percent helper contract), initially 30%, 30%, 15%, 0\\n     * @param charityContributionRate charity rate (w multiplier as all percent values in the project), initially 5%\\n     * @param vaultWithdrawalRate fee paid to withdraw amount from the vault back to the earned rewards, initially 10%\\n     * @param taperRate taper rate, initially 20%\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set\\n     * @param mintLimitWindow a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs, see GemTypeConfig.maxMintsPerLimitWindow\\n     */\\n\\n    struct ProtocolConfig {\\n        IERC20[PAYMENT_TOKENS] paymentTokens;\\n        address[WALLETS] wallets;\\n        uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] incomeDistributionOnMint;\\n        // time periods\\n        uint32 maintenancePeriod;\\n        uint32 rewardPeriod;\\n        uint32 taxScaleSinceLastClaimPeriod;\\n        // taxes and contributions\\n        uint256[TAX_TIERS] taxRates;\\n        uint256 charityContributionRate;\\n        uint256 vaultWithdrawalTaxRate;\\n        uint256 taperRate;\\n        // locks\\n        bool mintLock;\\n        bool transferLock;\\n        // mint limit period for coutner reset\\n        uint32 mintLimitWindow;\\n        DefoTokenLimitConfig defoTokenLimitConfig;\\n    }\\n\\n/**\\n * @notice A struct containing configuration details for gemType\\n     * @param maintenanceFee Maintenance fee in Dai for the node type, amount in wei per month\\n     * @param rewardAmountDefo Reward in DEFO for the node type, amount in wei per week\\n     * @param price Price in DEFO and DAI (in wei), respectively, according to the PaymentTokens enum\\n     * @param taperRewardsThresholdDefo Taper threshold, in wei, decreasing rate every given amount of rewards in DEFO\\n     * @param maxMintsPerLimitWindow number of gems, mint limit for a node type, see ProtocolConfig.mintLimitWindow\\n     */\\n    struct GemTypeConfig {\\n        uint256 maintenanceFeeDai;\\n        uint256 rewardAmountDefo;\\n        uint256[PAYMENT_TOKENS] price;\\n        uint256 taperRewardsThresholdDefo;\\n        uint256 maxMintsPerLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct containing current mutable status for gemType\\n     * @param mintCount counter incrementing by one on every mint, during mintCountResetPeriod; after mintCountResetPeriod with no mints, reset to 0\\n     * @param endOfMintLimitWindow a moment to reset the mintCount counter to zero, set the new endOfMintLimitWindow and start over\\n     */\\n    struct GemTypeMintWindow {\\n        uint256 mintCount;\\n        uint32 endOfMintLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct describing current DEFO Token limiter input\\n * @param tokensSold DEFO tokens sold per limit window, \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfLastSale time of last sale\\n     */\\n    struct DEFOTokenLimitWindow {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfLastSale;\\n    }\\n\\n/**\\n * @notice A struct describing DEFO Token limit per weekly rewards\\n * @param tokensSold DEFO tokens sold per reward period window starting from the first sale \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfWindowStart time of first sale in the window\\n     */\\n    struct DEFOTokenLimitPerRewards {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfWindowStart;\\n    }\\n\\n    enum Booster {\\n        None,\\n        Delta,\\n        Omega\\n    }\\n\\n/**\\n * @notice A struct describing financial state, provides the complete state for user, gem, or protocol total.\\n * @notice It gives the current exact balance of the Vault, Rewards, and Charity.\\n * @param claimedGross rewards amount previously claimed for all time, gross amount - before tax and charity\\n * @param claimedNet rewards claimed and to user, net amount after tax and charity\\n * @param stakedGross amount removed from rewards to stake, charity not yet deducted\\n * @param stakedNet amount put to the vault - charity has been deducted\\n * @param unStakedGross  amount removed from the vault, pre withdraw tax and charity\\n * @param unStakedGrossUpped  amount removed from the vault gross-upped with charity to equal to the stakedGross amount\\n * @param unStakedNet  amount returned to the earned rewards, post withdraw tax and charity\\n * @param donated sent to charity\\n * @param claimTaxPaid claim tax deducted - 30%, 15%, 15%\\n * @param vaultTaxPaid vault withdrawal tax deducted\\n     */\\n    struct Fi {\\n        uint256 claimedGross;\\n        uint256 claimedNet;\\n        uint256 stakedGross;\\n        uint256 stakedNet;\\n        uint256 unStakedGross;\\n        uint256 unStakedGrossUp;\\n        uint256 unStakedNet;\\n        uint256 donated;\\n        uint256 claimTaxPaid;\\n        uint256 vaultTaxPaid;\\n    }\\n\\n/**\\n * @notice current state of a gem, a gem is an instance with consistent yield and fee rates specified by the pair (gemType, booster)\\n * @param gemType node type, initially it's  0 -> Ruby , 1 -> Sapphire, 2 -> Diamond, and boosters\\n * @param booster node Booster 0 -> None , 1 -> Delta , 2 -> Omega\\n * @param mintTime timestamp of the mint time\\n * @param lastRewardWithdrawalTime timestamp of last reward claim OR stake. Same as mintTime if not yet claimed.\\n * @param lastMaintenanceTime timestamp of the last maintenance (could be a date in the future in case of the upfront payment)\\n * @param presold flag that this gem was bought on presale, used to avoid double minting\\n*/\\n    struct Gem {\\n        uint8 gemTypeId;\\n        Booster booster;\\n        uint32 mintTime;\\n        uint32 lastRewardWithdrawalTime;\\n        uint32 lastMaintenanceTime;\\n        Fi fi;\\n        bool presold;\\n    }\\n\\n/**\\n*   @notice Main Contract Storage utilizing App Storage pattern for Diamond Proxy data organization\\n*   @param config main configuration, basically everything except gemType specific\\n*   @param gemTypes supported gem types with their details, gemTypeId is the index of the array\\n*   @param gems mapping indexed by tokenId, where tokenId is in the nft.allTokens\\n*   @param gemTypesMintWindows windows for limiting yield gem mints per gem type\\n*   @param defoTokenLimitWindow window for limiting DEFO Token sale\\n*   @param nft ERC721 standard related storage\\n*   @param total cumulated amounts for all operations\\n*   @param usersFi financial info per each user\\n*   @param usersNextGemBooster used for presale, number (uint256) of boosters (Booster) with a type (uint8) left for a user (address)\\n*/\\n    struct AppStorage {\\n        // configuration\\n        ProtocolConfig config;\\n        GemTypeConfig[] gemTypes;\\n        // current state\\n        GemTypeMintWindow[] gemTypesMintWindows;\\n        DEFOTokenLimitWindow defoTokenLimitWindow;\\n        mapping(uint256 => Gem) gems;\\n        ERC721Storage nft;\\n        // Cumulations\\n        Fi total;\\n        // User data, users list is s.nft.owners, size s.nft.allTokens.length (managed by ERC721Enumerable)\\n        mapping(address => Fi) usersFi;\\n        mapping(address => mapping(uint8 => mapping(Booster => uint256))) usersNextGemBooster;\\n        DEFOTokenLimitPerRewards defoTokenLimitPerRewards;\\n    }\\n\",\"keccak256\":\"0xf50074fb6193948cd88f1a0cb1a469359d3496b31f52edc0aac2ca53643bab99\",\"license\":\"GPL-3.0\"},\"contracts/facets/ConfigFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IConfig.sol\\\";\\nimport \\\"../base-facet/BaseFacet.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibPauser.sol\\\";\\nimport \\\"../libraries/LibMintLimiter.sol\\\";\\nimport \\\"../libraries/PercentHelper.sol\\\";\\n\\n/** @title  ERC721Facet EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\\n*/\\ncontract ConfigFacet is BaseFacet, IConfig {\\n\\n    /* ============ External and Public Functions ============ */\\n\\n    function setConfig(ProtocolConfig calldata _config) external onlyOwner {\\n        ProtocolConfig memory calldataToStorage = _config;\\n        s.config = calldataToStorage;\\n        emit ConfigurationChange(_config);\\n    }\\n\\n    function setGemTypesConfig(GemTypeConfig[] calldata _gemTypeConfig) external onlyOwner {\\n        // fill in the storage and reset mint limit window counter for every gem type\\n        delete s.gemTypes;\\n        delete s.gemTypesMintWindows;\\n        for (uint gemTypeId = 0; gemTypeId < _gemTypeConfig.length; gemTypeId++) {\\n            GemTypeConfig memory cur = _gemTypeConfig[gemTypeId];\\n            s.gemTypes.push(cur);\\n            GemTypeMintWindow memory initWindow = GemTypeMintWindow(0, uint32(block.timestamp));\\n            s.gemTypesMintWindows.push(initWindow);\\n        }\\n    }\\n\\n    function setConfigWallets(address[WALLETS] memory _wallets) external onlyOwner {\\n        s.config.wallets = _wallets;\\n    }\\n\\n    function setConfigIncomeDistributionOnMint(uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] memory _incomeDistributionOnMint) external onlyOwner {\\n        s.config.incomeDistributionOnMint = _incomeDistributionOnMint;\\n    }\\n\\n    function setConfigMaintenancePeriod(uint32 _maintenancePeriod) external onlyOwner {\\n        s.config.maintenancePeriod = _maintenancePeriod;\\n    }\\n\\n    function setConfigRewardPeriod(uint32 _rewardPeriod) external onlyOwner {\\n        s.config.rewardPeriod = _rewardPeriod;\\n    }\\n\\n    function setConfigTaxScaleSinceLastClaimPeriod(uint32 _taxScaleSinceLastClaimPeriod) external onlyOwner {\\n        s.config.taxScaleSinceLastClaimPeriod = _taxScaleSinceLastClaimPeriod;\\n    }\\n\\n    function setConfigTaxRates(uint256[TAX_TIERS] memory _taxRates) external onlyOwner {\\n        s.config.taxRates = _taxRates;\\n    }\\n\\n    function setCharityContributionRate(uint256 _charityContributionRate) external onlyOwner {\\n        s.config.charityContributionRate = _charityContributionRate;\\n    }\\n\\n    function setConfigVaultWithdrawalTaxRate(uint256 _vaultWithdrawalTaxRate) external onlyOwner {\\n        s.config.vaultWithdrawalTaxRate = _vaultWithdrawalTaxRate;\\n    }\\n\\n    function setConfigTaperRate(uint256 _taperRate) external onlyOwner {\\n        s.config.taperRate = _taperRate;\\n    }\\n\\n    function setConfigMintLimitWindow(uint32 _mintLimitWindow) external onlyOwner {\\n        s.config.mintLimitWindow = _mintLimitWindow;\\n    }\\n\\n    function setConfigDefoTokenLimitConfig(DefoTokenLimitConfig calldata _defoTokenLimitConfig) external onlyOwner {\\n        DefoTokenLimitConfig memory temp = _defoTokenLimitConfig;\\n        s.config.defoTokenLimitConfig = temp;\\n    }\\n\\n    function lockMint() public onlyOwner {\\n        LibMintLimiter.lockMint();\\n    }\\n\\n    function unlockMint() public onlyOwner {\\n        LibMintLimiter.unlockMint();\\n    }\\n\\n    function pause() external onlyOwner {\\n        LibPauser._pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        LibPauser._unpause();\\n    }\\n\\n\\n    function getConfig() external view returns (ProtocolConfig memory) {\\n        return s.config;\\n    }\\n\\n    function getGemTypesConfig() external view returns (GemTypeConfig[] memory) {\\n        return s.gemTypes;\\n    }\\n\\n    function zeroMintCount(uint8 _gemTypeId) external onlyOwner {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        GemTypeMintWindow storage windowStorage = s.gemTypesMintWindows[_gemTypeId];\\n        windowStorage.mintCount = 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xbfe0ae197fa8d6e34ebd179eeeec55ba7256e2e31343216634c25cfff2d7d09b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n\\n/** @title  IConfig EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice The Yield Gem Configuration, setters and getters\\n*/\\ninterface IConfig {\\n    event ConfigurationChange(ProtocolConfig config);\\n    event GemTypeConfigurationChange(GemTypeConfig _gemTypeConfig);\\n\\n    function setConfig(ProtocolConfig calldata _config) external;\\n\\n    function getConfig() external view returns (ProtocolConfig memory);\\n\\n    function setGemTypesConfig(GemTypeConfig[] calldata _gemTypesConfig) external;\\n\\n    function getGemTypesConfig() external view returns (GemTypeConfig[] memory);\\n\\n    function lockMint() external;\\n\\n    function unlockMint() external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n}\\n\",\"keccak256\":\"0x4cb080dc01265144a608303fbd9a1e54f3f56a4849b08b5ebac9df46e563ba79\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/** @title  LibAppStorage EIP-2535 Diamond Facet Storage\\n  * @author Decentralized Foundation Team\\n  * @notice This diamond storage library is inherited by all facets and imported in libraries\\n*/\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf2e84cec0bd10a28b47d23a086c1d77096efac4f3b3d6f1c132ebbe814c8b1d5\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibMintLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n// helper for limit daily mints\\nlibrary LibMintLimiter {\\n    event MintLocked();\\n    event MintUnlocked();\\n\\n    /**\\n    *   @notice checks if a gem is mintable\\n    *   @param _gemTypeId type of a gem, initially it's 0,1,2 for sapphire, ruby, and diamond, respectively\\n    *   @return true if mint is available, no revert\\n    *   @dev checks mintLock config and daily mintcount limit\\n    */\\n    function isMintAvailableForGem(uint8 _gemTypeId) internal view returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(_gemTypeId < s.gemTypes.length, \\\"Wrong gem type\\\");\\n        GemTypeConfig memory gemType = s.gemTypes[_gemTypeId];\\n        GemTypeMintWindow memory gemTypeMintWindow = s.gemTypesMintWindows[_gemTypeId];\\n\\n        return !(s.config.mintLock) &&\\n        //checking if the limit in the current mint window has not been reached yet\\n        (((gemTypeMintWindow.mintCount < gemType.maxMintsPerLimitWindow) &&\\n        (block.timestamp <= gemTypeMintWindow.endOfMintLimitWindow)) ||\\n        //or we're already in another window ahead\\n        (block.timestamp > gemTypeMintWindow.endOfMintLimitWindow));\\n    }\\n\\n    function updateMintCount(uint8 _gemTypeId) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        GemTypeMintWindow storage windowStorage = s.gemTypesMintWindows[_gemTypeId];\\n        if (block.timestamp > windowStorage.endOfMintLimitWindow) {\\n            //setting up new mint window\\n            do {\\n                windowStorage.endOfMintLimitWindow += s.config.mintLimitWindow;\\n            }\\n            while (block.timestamp > windowStorage.endOfMintLimitWindow);\\n            windowStorage.mintCount = 0;\\n        }\\n        windowStorage.mintCount++;\\n    }\\n\\n    function getCurrentMintWindow(uint8 _gemTypeId) internal view returns (GemTypeMintWindow memory) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(_gemTypeId < s.gemTypes.length, \\\"Wrong gem type\\\");\\n        GemTypeMintWindow memory window = s.gemTypesMintWindows[_gemTypeId];\\n        if (block.timestamp > window.endOfMintLimitWindow) {\\n            //setting up new mint window\\n            do {\\n                window.endOfMintLimitWindow += s.config.mintLimitWindow;\\n            }\\n            while (block.timestamp > window.endOfMintLimitWindow);\\n            window.mintCount = 0;\\n        }\\n        return window;\\n    }\\n\\n\\n    function lockMint() internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.mintLock = true;\\n        emit MintLocked();\\n    }\\n\\n    function unlockMint() internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.mintLock = false;\\n        emit MintUnlocked();\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xb456ab1987377d3a09ccceedb38069555ee5f9e00e12f37434550da0f3d622f3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibPauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/**\\n*   @notice Pausable contract\\n*   @dev should start with  s.config.transferLock = false which is default\\n*/\\n\\nlibrary LibPauser {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function _paused() internal view returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.config.transferLock;\\n    }\\n\\n    function _requireNotPaused() internal view {\\n        require(!_paused(), \\\"Pausable: paused, transfer is locked\\\");\\n    }\\n\\n    function _requirePaused() internal view {\\n        require(_paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    function _pause() internal whenNotPaused {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.transferLock = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function _unpause() internal whenPaused {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.transferLock = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x3c65fc92fa0331bcde5c781013a71c91e75444c00c16669794b478bd6bbc7c7a\",\"license\":\"GPL-3.0\"},\"contracts/libraries/PercentHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n\\n/**\\n * @notice Library for percentage integer math, note PERCENTAGE_PRECISION_MULTIPLIER when configuring the protocol\\n * @author Decentralized Foundation Team\\n * @dev PERCENTAGE_PRECISION_MULTIPLIER*100 = 10000 greater than real percent, so 20% is represented as 2000, meaning 0.2\\n */\\n\\nlibrary PercentHelper {\\n    uint256 constant PERCENTAGE_PRECISION_MULTIPLIER = 100;\\n    uint256 constant HUNDRED_PERCENT = 100 * PERCENTAGE_PRECISION_MULTIPLIER;\\n\\n    /**\\n     * @dev simply a ratio of the given value, e.g. if tax is 30% and value if 100 the function gives 30\\n     * @param value Value to get ratio from\\n     * @param tax Percent to apply\\n     */\\n    ///todo make pure once got rid of the console.log\\n    function rate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (value * tax) / HUNDRED_PERCENT : 0;\\n    }\\n\\n    /**\\n    * @dev simple gross-up, gives back gross for net value, if charity is 5%, then gross up of 95 gives 100\\n     * @param netValue Net value to gross up\\n     * @param tax Percent that was applied\\n     */\\n    function grossUp(uint256 netValue, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (netValue * HUNDRED_PERCENT) / (HUNDRED_PERCENT - tax) : 0;\\n    }\\n\\n\\n    /// @dev received inverted percent for taper calc, if ratio is 20%, then 1/(1-20%) = 25%\\n    function invertedRate(uint256 value, uint256 ratio) internal pure returns (uint256) {\\n        return value * HUNDRED_PERCENT / (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function oneHundredLessPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function minusHundredPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (ratio - HUNDRED_PERCENT);\\n    }\\n\\n\\n    function reversePercent(uint256 ratio) internal pure returns (uint256) {\\n        return PERCENTAGE_PRECISION_MULTIPLIER / ratio;\\n    }\\n\\n    function percentPower(uint256 value, uint256 ratio, uint pow) internal pure returns (uint256) {\\n        return value * PERCENTAGE_PRECISION_MULTIPLIER ** pow / ratio ** pow;\\n    }\\n\\n\\n    /// @dev simply value less given percentage, e.g. if tax is 30% the functio gives 70 for 100\\n    function lessRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value - rate(value, tax);\\n    }\\n\\n    function plusRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value + rate(value, tax);\\n    }\\n}\\n\",\"keccak256\":\"0x70d9a8e3cf2aad9102eda57cb8d7efacca2f96f89d50aef7c6088f522c4763ae\",\"license\":\"GPL-3.0\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611b12806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636bfe99ec116100ad5780638ad15c21116100715780638ad15c211461023a5780639956d1db1461024d578063c3f909d414610260578063d864d02a14610275578063e0b6bb671461028857600080fd5b80636bfe99ec146101db57806383c7d152146101ee5780638456cb59146102015780638838640e146102095780638a1ad3251461022757600080fd5b8063683da553116100f4578063683da5531461017c578063685e2a9a1461018f578063689da232146101a257806369d40589146101b55780636bcb63d6146101c857600080fd5b80633f4ba83a146101315780633f5db5ca1461013b57806341ef35c61461014e5780635a9a664f1461016157806364fa266714610169575b600080fd5b610139610290565b005b610139610149366004611047565b6102a2565b61013961015c3660046111a6565b6102da565b6101396102f3565b6101396101773660046111c2565b610303565b61013961018a3660046111f4565b6104ab565b61013961019d36600461120f565b6104d7565b6101396101b0366004611228565b6104e4565b6101396101c33660046111f4565b610693565b6101396101d63660046111f4565b6106c1565b6101396101e9366004611336565b6106f1565b6101396101fc3660046113d3565b610706565b61013961071b565b61021161072b565b60405161021e91906113ef565b60405180910390f35b6101396102353660046111f4565b6107e6565b61013961024836600461120f565b61080a565b61013961025b366004611481565b610817565b610268610856565b60405161021e9190611566565b61013961028336600461120f565b610a46565b610139610a53565b610298610a63565b6102a0610aef565b565b6102aa610a63565b60008081601d018360ff16815481106102c5576102c561165f565b60009182526020822060029091020155505050565b6102e2610a63565b6102ef6010826005610cab565b5050565b6102fb610a63565b6102a0610b3c565b61030b610a63565b600061031c36839003830183611741565b805190915081906000906103339082906002610ce9565b5060208201516103499060028301906007610d31565b50604082015161035f9060098301906002610d78565b506060820151600f82018054608085015160a086015163ffffffff908116600160401b0263ffffffff60401b199282166401000000000267ffffffffffffffff199094169190951617919091171691909117905560c08201516103c89060108301906005610cab565b5060e08201516015820155610100808301516016830155610120830151601783015561014083015160188301805461016086015161018087015161ffff1990921693151561ff001916939093179215159093029190911765ffffffff000019166201000063ffffffff909316929092029190911790556101a090910151805160198301556020810151601a830155604090810151601b909201805460ff191692151592909217909155517fe187417c9675ae5cc80acb8ab43a9ae12145aa303ca0ea50e84d060e5ef46aa79061049f908490611915565b60405180910390a15050565b6104b3610a63565b6018805463ffffffff909216620100000265ffffffff000019909216919091179055565b6104df610a63565b601555565b6104ec610a63565b6104f8601c6000610dbf565b610504601d6000610de3565b60005b8181101561068e5760008383838181106105235761052361165f565b905060c002018036038101906105399190611a12565b601c8054600181018255600091909152815160069091027f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211810191825560208301517f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a212820155604083015192935083926105d7917f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21301906002610e04565b5060608201516004820155608090910151600590910155506040805180820190915260008082524263ffffffff90811660208401908152601d8054600181018255935292517f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f60029093029283015591517f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc1461350909101805463ffffffff1916919092161790558061068681611a99565b915050610507565b505050565b61069b610a63565b600f805463ffffffff909216600160401b0263ffffffff60401b19909216919091179055565b6106c9610a63565b600f805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b6106f9610a63565b6102ef6009826002610d78565b61070e610a63565b6102ef6002826007610d31565b610723610a63565b6102a0610b74565b60606000601c01805480602002602001604051908101604052809291908181526020016000905b828210156107dd5760008481526020908190206040805160a081018252600686029092018054835260018101549383019390935280518082018083529293929184019160028085019182845b81548152602001906001019080831161079e57505050505081526020016004820154815260200160058201548152505081526020019060010190610752565b50505050905090565b6107ee610a63565b600f805463ffffffff191663ffffffff92909216919091179055565b610812610a63565b601655565b61081f610a63565b600061083036839003830183611ac0565b80516019556020810151601a5560400151601b805460ff19169115159190911790555050565b61085e610e31565b6040805161020081019091526000816101c081018260028282826020028201915b81546001600160a01b0316815260019091019060200180831161087f5750505091835250506040805160e081019182905260209092019190600284019060079082845b81546001600160a01b031681526001909101906020018083116108c2575050509183525050604080518082019091526020909101906009830160026000835b828210156109485760408051606081019182905290600384810287019182845b81548152602001906001019080831161092157505050505081526020019060010190610901565b50505090825250600f82015463ffffffff808216602084015264010000000082048116604080850191909152600160401b909204166060830152805160a081019182905260809092019190601084019060059082845b81548152602001906001019080831161099e575050509183525050601582015460208083019190915260168301546040808401919091526017840154606080850191909152601885015460ff8082161515608087015261010082048116151560a08701526201000090910463ffffffff1660c08601528251918201835260198601548252601a86015493820193909352601b9094015490911615159083015260e00152919050565b610a4e610a63565b601755565b610a5b610a63565b6102a0610bbe565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146102a05760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b60648201526084015b60405180910390fd5b610af7610bf9565b6018805461ff00191690556040513381526000907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b6018805460ff191690556040516000907f16fe33fab5fd851b7e9a856a666ea43cc5515bbb51689c3d370085d004418123908290a150565b610b7c610c47565b6018805461ff0019166101001790556040513381526000907f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610b31565b6018805460ff191660011790556040516000907faa71a6e005bc4e0ea53d6184338a28d3f4737f18bed30c92d93a239ad5a71747908290a150565b601854610100900460ff166102a05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610ae6565b601854610100900460ff16156102a05760405162461bcd60e51b8152602060048201526024808201527f5061757361626c653a207061757365642c207472616e73666572206973206c6f60448201526318dad95960e21b6064820152608401610ae6565b8260058101928215610cd9579160200282015b82811115610cd9578251825591602001919060010190610cbe565b50610ce5929150610ee5565b5090565b8260028101928215610cd9579160200282015b82811115610cd957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610cfc565b8260078101928215610cd95791602002820182811115610cd957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610cfc565b600683019183908215610db3579160200282015b82811115610db3578251610da39083906003610efa565b5091602001919060030190610d8c565b50610ce5929150610f27565b5080546000825560060290600052602060002090810190610de09190610f48565b50565b5080546000825560020290600052602060002090810190610de09190610f7e565b8260028101928215610cd95791602002820182811115610cd9578251825591602001919060010190610cbe565b604051806101c00160405280610e45610fa2565b8152602001610e52610fc0565b8152602001610e5f610fde565b8152600060208201819052604082018190526060820152608001610e8161100b565b8152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600063ffffffff168152602001610ee0604051806060016040528060008152602001600081526020016000151581525090565b905290565b5b80821115610ce55760008155600101610ee6565b8260038101928215610cd95791602002820182811115610cd9578251825591602001919060010190610cbe565b80821115610ce5576000808255600182018190556002820155600301610f27565b80821115610ce5576000808255600182018190556002820181905560038201819055600482018190556005820155600601610f48565b5b80821115610ce5576000815560018101805463ffffffff19169055600201610f7f565b60405180604001604052806002906020820280368337509192915050565b6040518060e001604052806007906020820280368337509192915050565b60405180604001604052806002905b610ff5611029565b815260200190600190039081610fed5790505090565b6040518060a001604052806005906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60006020828403121561105957600080fd5b813560ff8116811461106a57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff811182821017156110ab576110ab611071565b60405290565b6040805190810167ffffffffffffffff811182821017156110ab576110ab611071565b6040516060810167ffffffffffffffff811182821017156110ab576110ab611071565b60006111016110b1565b905080604083018481111561111557600080fd5b835b8181101561112f578035835260209283019201611117565b50505092915050565b600082601f83011261114957600080fd5b60405160a0810181811067ffffffffffffffff8211171561116c5761116c611071565b6040528060a084018581111561118157600080fd5b845b8181101561119b578035835260209283019201611183565b509195945050505050565b600060a082840312156111b857600080fd5b61106a8383611138565b600061040082840312156111d557600080fd5b50919050565b803563ffffffff811681146111ef57600080fd5b919050565b60006020828403121561120657600080fd5b61106a826111db565b60006020828403121561122157600080fd5b5035919050565b6000806020838503121561123b57600080fd5b823567ffffffffffffffff8082111561125357600080fd5b818501915085601f83011261126757600080fd5b81358181111561127657600080fd5b86602060c08302850101111561128b57600080fd5b60209290920196919550909350505050565b6000601f83818401126112af57600080fd5b6112b76110b1565b8060c08501868111156112c957600080fd5b855b8181101561132a5787858201126112e25760008081fd5b6112ea6110d4565b80606083018a8111156112fd5760008081fd5b835b818110156113175780358452602093840193016112ff565b50508552506020909301926060016112cb565b50909695505050505050565b600060c0828403121561134857600080fd5b61106a838361129d565b6001600160a01b0381168114610de057600080fd5b600082601f83011261137857600080fd5b60405160e0810181811067ffffffffffffffff8211171561139b5761139b611071565b6040528060e08401858111156113b057600080fd5b845b8181101561119b5780356113c581611352565b8352602092830192016113b2565b600060e082840312156113e557600080fd5b61106a8383611367565b60208082528251828201819052600091906040908185019086840185805b8381101561147357825180518652878101518887015286810151878701845b60028110156114495782518252918a0191908a019060010161142c565b5050506060810151608087810191909152015160a086015260c0909401939186019160010161140d565b509298975050505050505050565b6000606082840312156111d557600080fd5b8060005b60028110156114bf5781516001600160a01b0316845260209384019390910190600101611497565b50505050565b8060005b60078110156114bf5781516001600160a01b03168452602093840193909101906001016114c9565b806000805b600281101561153c57825185835b6003811015611523578251825260209283019290910190600101611504565b50505060609490940193602092909201916001016114f6565b5050505050565b8060005b60058110156114bf578151845260209384019390910190600101611547565b60006104008201905061157a828451611493565b602083015161158c60408401826114c5565b5060408301516101206115a1818501836114f1565b606085015163ffffffff9081166101e08601526080860151811661020086015260a08601511661022085015260c085015191506115e2610240850183611543565b60e08501516102e0850152610100850151610300850152840151610320840152506101408301511515610340830152610160830151151561036083015261018083015163ffffffff166103808301526101a083015180516103a084015260208101516103c0840152604081015115156103e08401525b5092915050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261168657600080fd5b61168e6110b1565b8060408401858111156116a057600080fd5b845b818110156116c35780356116b581611352565b8452602093840193016116a2565b509095945050505050565b803580151581146111ef57600080fd5b6000606082840312156116f057600080fd5b6040516060810181811067ffffffffffffffff8211171561171357611713611071565b80604052508091508235815260208301356020820152611735604084016116ce565b60408201525092915050565b6000610400828403121561175457600080fd5b61175c611087565b6117668484611675565b81526117758460408501611367565b60208201526101206117898582860161129d565b604083015261179b6101e085016111db565b60608301526117ad61020085016111db565b60808301526117bf61022085016111db565b60a08301526117d2856102408601611138565b60c08301526102e084013560e08301526103008401356101008301526103208401359082015261180561034084016116ce565b61014082015261181861036084016116ce565b61016082015261182b61038084016111db565b61018082015261183f846103a085016116de565b6101a08201529392505050565b8060005b60028110156114bf57813561186481611352565b6001600160a01b031684526020938401939190910190600101611850565b8060005b60078110156114bf57813561189a81611352565b6001600160a01b031684526020938401939190910190600101611886565b806000805b600281101561153c576060808487379485018281529492909201916001016118bd565b60a081833750600060a082015250565b803582526020810135602083015261190a604082016116ce565b151560408301525050565b6104008101611924828461184c565b6119346040830160408501611882565b6101206119458184018286016118b8565b506101e06119548185016111db565b63ffffffff169083015261020061196c8482016111db565b63ffffffff16908301526102206119848482016111db565b63ffffffff169083015261024061199f8184018583016118e0565b506102e08381013590830152610300808401359083015261032080840135908301526103406119cf8185016116ce565b1515908301526103606119e38482016116ce565b1515908301526103806119f78482016111db565b63ffffffff16908301526103a06116588184018583016118f0565b600060c08284031215611a2457600080fd5b60405160a0810181811067ffffffffffffffff82111715611a4757611a47611071565b8060405250823581526020830135602082015283605f840112611a6957600080fd5b611a7684604085016110f7565b60408201526080830135606082015260a083013560808201528091505092915050565b600060018201611ab957634e487b7160e01b600052601160045260246000fd5b5060010190565b600060608284031215611ad257600080fd5b61106a83836116de56fea26469706673582212202ae05c23bcd3c1ed5928e0bef1dc5133458a3ef236dc665e35b0bff810f91fa464736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80636bfe99ec116100ad5780638ad15c21116100715780638ad15c211461023a5780639956d1db1461024d578063c3f909d414610260578063d864d02a14610275578063e0b6bb671461028857600080fd5b80636bfe99ec146101db57806383c7d152146101ee5780638456cb59146102015780638838640e146102095780638a1ad3251461022757600080fd5b8063683da553116100f4578063683da5531461017c578063685e2a9a1461018f578063689da232146101a257806369d40589146101b55780636bcb63d6146101c857600080fd5b80633f4ba83a146101315780633f5db5ca1461013b57806341ef35c61461014e5780635a9a664f1461016157806364fa266714610169575b600080fd5b610139610290565b005b610139610149366004611047565b6102a2565b61013961015c3660046111a6565b6102da565b6101396102f3565b6101396101773660046111c2565b610303565b61013961018a3660046111f4565b6104ab565b61013961019d36600461120f565b6104d7565b6101396101b0366004611228565b6104e4565b6101396101c33660046111f4565b610693565b6101396101d63660046111f4565b6106c1565b6101396101e9366004611336565b6106f1565b6101396101fc3660046113d3565b610706565b61013961071b565b61021161072b565b60405161021e91906113ef565b60405180910390f35b6101396102353660046111f4565b6107e6565b61013961024836600461120f565b61080a565b61013961025b366004611481565b610817565b610268610856565b60405161021e9190611566565b61013961028336600461120f565b610a46565b610139610a53565b610298610a63565b6102a0610aef565b565b6102aa610a63565b60008081601d018360ff16815481106102c5576102c561165f565b60009182526020822060029091020155505050565b6102e2610a63565b6102ef6010826005610cab565b5050565b6102fb610a63565b6102a0610b3c565b61030b610a63565b600061031c36839003830183611741565b805190915081906000906103339082906002610ce9565b5060208201516103499060028301906007610d31565b50604082015161035f9060098301906002610d78565b506060820151600f82018054608085015160a086015163ffffffff908116600160401b0263ffffffff60401b199282166401000000000267ffffffffffffffff199094169190951617919091171691909117905560c08201516103c89060108301906005610cab565b5060e08201516015820155610100808301516016830155610120830151601783015561014083015160188301805461016086015161018087015161ffff1990921693151561ff001916939093179215159093029190911765ffffffff000019166201000063ffffffff909316929092029190911790556101a090910151805160198301556020810151601a830155604090810151601b909201805460ff191692151592909217909155517fe187417c9675ae5cc80acb8ab43a9ae12145aa303ca0ea50e84d060e5ef46aa79061049f908490611915565b60405180910390a15050565b6104b3610a63565b6018805463ffffffff909216620100000265ffffffff000019909216919091179055565b6104df610a63565b601555565b6104ec610a63565b6104f8601c6000610dbf565b610504601d6000610de3565b60005b8181101561068e5760008383838181106105235761052361165f565b905060c002018036038101906105399190611a12565b601c8054600181018255600091909152815160069091027f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211810191825560208301517f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a212820155604083015192935083926105d7917f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21301906002610e04565b5060608201516004820155608090910151600590910155506040805180820190915260008082524263ffffffff90811660208401908152601d8054600181018255935292517f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f60029093029283015591517f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc1461350909101805463ffffffff1916919092161790558061068681611a99565b915050610507565b505050565b61069b610a63565b600f805463ffffffff909216600160401b0263ffffffff60401b19909216919091179055565b6106c9610a63565b600f805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b6106f9610a63565b6102ef6009826002610d78565b61070e610a63565b6102ef6002826007610d31565b610723610a63565b6102a0610b74565b60606000601c01805480602002602001604051908101604052809291908181526020016000905b828210156107dd5760008481526020908190206040805160a081018252600686029092018054835260018101549383019390935280518082018083529293929184019160028085019182845b81548152602001906001019080831161079e57505050505081526020016004820154815260200160058201548152505081526020019060010190610752565b50505050905090565b6107ee610a63565b600f805463ffffffff191663ffffffff92909216919091179055565b610812610a63565b601655565b61081f610a63565b600061083036839003830183611ac0565b80516019556020810151601a5560400151601b805460ff19169115159190911790555050565b61085e610e31565b6040805161020081019091526000816101c081018260028282826020028201915b81546001600160a01b0316815260019091019060200180831161087f5750505091835250506040805160e081019182905260209092019190600284019060079082845b81546001600160a01b031681526001909101906020018083116108c2575050509183525050604080518082019091526020909101906009830160026000835b828210156109485760408051606081019182905290600384810287019182845b81548152602001906001019080831161092157505050505081526020019060010190610901565b50505090825250600f82015463ffffffff808216602084015264010000000082048116604080850191909152600160401b909204166060830152805160a081019182905260809092019190601084019060059082845b81548152602001906001019080831161099e575050509183525050601582015460208083019190915260168301546040808401919091526017840154606080850191909152601885015460ff8082161515608087015261010082048116151560a08701526201000090910463ffffffff1660c08601528251918201835260198601548252601a86015493820193909352601b9094015490911615159083015260e00152919050565b610a4e610a63565b601755565b610a5b610a63565b6102a0610bbe565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146102a05760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b60648201526084015b60405180910390fd5b610af7610bf9565b6018805461ff00191690556040513381526000907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b6018805460ff191690556040516000907f16fe33fab5fd851b7e9a856a666ea43cc5515bbb51689c3d370085d004418123908290a150565b610b7c610c47565b6018805461ff0019166101001790556040513381526000907f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610b31565b6018805460ff191660011790556040516000907faa71a6e005bc4e0ea53d6184338a28d3f4737f18bed30c92d93a239ad5a71747908290a150565b601854610100900460ff166102a05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610ae6565b601854610100900460ff16156102a05760405162461bcd60e51b8152602060048201526024808201527f5061757361626c653a207061757365642c207472616e73666572206973206c6f60448201526318dad95960e21b6064820152608401610ae6565b8260058101928215610cd9579160200282015b82811115610cd9578251825591602001919060010190610cbe565b50610ce5929150610ee5565b5090565b8260028101928215610cd9579160200282015b82811115610cd957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610cfc565b8260078101928215610cd95791602002820182811115610cd957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610cfc565b600683019183908215610db3579160200282015b82811115610db3578251610da39083906003610efa565b5091602001919060030190610d8c565b50610ce5929150610f27565b5080546000825560060290600052602060002090810190610de09190610f48565b50565b5080546000825560020290600052602060002090810190610de09190610f7e565b8260028101928215610cd95791602002820182811115610cd9578251825591602001919060010190610cbe565b604051806101c00160405280610e45610fa2565b8152602001610e52610fc0565b8152602001610e5f610fde565b8152600060208201819052604082018190526060820152608001610e8161100b565b8152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600063ffffffff168152602001610ee0604051806060016040528060008152602001600081526020016000151581525090565b905290565b5b80821115610ce55760008155600101610ee6565b8260038101928215610cd95791602002820182811115610cd9578251825591602001919060010190610cbe565b80821115610ce5576000808255600182018190556002820155600301610f27565b80821115610ce5576000808255600182018190556002820181905560038201819055600482018190556005820155600601610f48565b5b80821115610ce5576000815560018101805463ffffffff19169055600201610f7f565b60405180604001604052806002906020820280368337509192915050565b6040518060e001604052806007906020820280368337509192915050565b60405180604001604052806002905b610ff5611029565b815260200190600190039081610fed5790505090565b6040518060a001604052806005906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60006020828403121561105957600080fd5b813560ff8116811461106a57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff811182821017156110ab576110ab611071565b60405290565b6040805190810167ffffffffffffffff811182821017156110ab576110ab611071565b6040516060810167ffffffffffffffff811182821017156110ab576110ab611071565b60006111016110b1565b905080604083018481111561111557600080fd5b835b8181101561112f578035835260209283019201611117565b50505092915050565b600082601f83011261114957600080fd5b60405160a0810181811067ffffffffffffffff8211171561116c5761116c611071565b6040528060a084018581111561118157600080fd5b845b8181101561119b578035835260209283019201611183565b509195945050505050565b600060a082840312156111b857600080fd5b61106a8383611138565b600061040082840312156111d557600080fd5b50919050565b803563ffffffff811681146111ef57600080fd5b919050565b60006020828403121561120657600080fd5b61106a826111db565b60006020828403121561122157600080fd5b5035919050565b6000806020838503121561123b57600080fd5b823567ffffffffffffffff8082111561125357600080fd5b818501915085601f83011261126757600080fd5b81358181111561127657600080fd5b86602060c08302850101111561128b57600080fd5b60209290920196919550909350505050565b6000601f83818401126112af57600080fd5b6112b76110b1565b8060c08501868111156112c957600080fd5b855b8181101561132a5787858201126112e25760008081fd5b6112ea6110d4565b80606083018a8111156112fd5760008081fd5b835b818110156113175780358452602093840193016112ff565b50508552506020909301926060016112cb565b50909695505050505050565b600060c0828403121561134857600080fd5b61106a838361129d565b6001600160a01b0381168114610de057600080fd5b600082601f83011261137857600080fd5b60405160e0810181811067ffffffffffffffff8211171561139b5761139b611071565b6040528060e08401858111156113b057600080fd5b845b8181101561119b5780356113c581611352565b8352602092830192016113b2565b600060e082840312156113e557600080fd5b61106a8383611367565b60208082528251828201819052600091906040908185019086840185805b8381101561147357825180518652878101518887015286810151878701845b60028110156114495782518252918a0191908a019060010161142c565b5050506060810151608087810191909152015160a086015260c0909401939186019160010161140d565b509298975050505050505050565b6000606082840312156111d557600080fd5b8060005b60028110156114bf5781516001600160a01b0316845260209384019390910190600101611497565b50505050565b8060005b60078110156114bf5781516001600160a01b03168452602093840193909101906001016114c9565b806000805b600281101561153c57825185835b6003811015611523578251825260209283019290910190600101611504565b50505060609490940193602092909201916001016114f6565b5050505050565b8060005b60058110156114bf578151845260209384019390910190600101611547565b60006104008201905061157a828451611493565b602083015161158c60408401826114c5565b5060408301516101206115a1818501836114f1565b606085015163ffffffff9081166101e08601526080860151811661020086015260a08601511661022085015260c085015191506115e2610240850183611543565b60e08501516102e0850152610100850151610300850152840151610320840152506101408301511515610340830152610160830151151561036083015261018083015163ffffffff166103808301526101a083015180516103a084015260208101516103c0840152604081015115156103e08401525b5092915050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261168657600080fd5b61168e6110b1565b8060408401858111156116a057600080fd5b845b818110156116c35780356116b581611352565b8452602093840193016116a2565b509095945050505050565b803580151581146111ef57600080fd5b6000606082840312156116f057600080fd5b6040516060810181811067ffffffffffffffff8211171561171357611713611071565b80604052508091508235815260208301356020820152611735604084016116ce565b60408201525092915050565b6000610400828403121561175457600080fd5b61175c611087565b6117668484611675565b81526117758460408501611367565b60208201526101206117898582860161129d565b604083015261179b6101e085016111db565b60608301526117ad61020085016111db565b60808301526117bf61022085016111db565b60a08301526117d2856102408601611138565b60c08301526102e084013560e08301526103008401356101008301526103208401359082015261180561034084016116ce565b61014082015261181861036084016116ce565b61016082015261182b61038084016111db565b61018082015261183f846103a085016116de565b6101a08201529392505050565b8060005b60028110156114bf57813561186481611352565b6001600160a01b031684526020938401939190910190600101611850565b8060005b60078110156114bf57813561189a81611352565b6001600160a01b031684526020938401939190910190600101611886565b806000805b600281101561153c576060808487379485018281529492909201916001016118bd565b60a081833750600060a082015250565b803582526020810135602083015261190a604082016116ce565b151560408301525050565b6104008101611924828461184c565b6119346040830160408501611882565b6101206119458184018286016118b8565b506101e06119548185016111db565b63ffffffff169083015261020061196c8482016111db565b63ffffffff16908301526102206119848482016111db565b63ffffffff169083015261024061199f8184018583016118e0565b506102e08381013590830152610300808401359083015261032080840135908301526103406119cf8185016116ce565b1515908301526103606119e38482016116ce565b1515908301526103806119f78482016111db565b63ffffffff16908301526103a06116588184018583016118f0565b600060c08284031215611a2457600080fd5b60405160a0810181811067ffffffffffffffff82111715611a4757611a47611071565b8060405250823581526020830135602082015283605f840112611a6957600080fd5b611a7684604085016110f7565b60408201526080830135606082015260a083013560808201528091505092915050565b600060018201611ab957634e487b7160e01b600052601160045260246000fd5b5060010190565b600060608284031215611ad257600080fd5b61106a83836116de56fea26469706673582212202ae05c23bcd3c1ed5928e0bef1dc5133458a3ef236dc665e35b0bff810f91fa464736f6c634300080f0033",
  "devdoc": {
    "author": "Decentralized Foundation Team",
    "kind": "dev",
    "methods": {},
    "title": "ERC721Facet EIP-2535 Diamond Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4283,
        "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4537_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)7_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[7]",
        "numberOfBytes": "224"
      },
      "t_array(t_array(t_uint256)3_storage)2_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][2]",
        "numberOfBytes": "192"
      },
      "t_array(t_contract(IERC20)737)2_storage": {
        "base": "t_contract(IERC20)737",
        "encoding": "inplace",
        "label": "contract IERC20[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(GemTypeConfig)4429_storage)dyn_storage": {
        "base": "t_struct(GemTypeConfig)4429_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GemTypeMintWindow)4434_storage)dyn_storage": {
        "base": "t_struct(GemTypeMintWindow)4434_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeMintWindow[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)737": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Booster)4456": {
        "encoding": "inplace",
        "label": "enum Booster",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => mapping(enum Booster => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256))"
      },
      "t_mapping(t_address,t_struct(Fi)4477_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Fi)",
        "numberOfBytes": "32",
        "value": "t_struct(Fi)4477_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Booster)4456,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Booster)4456",
        "label": "mapping(enum Booster => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Gem)4494_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gem)",
        "numberOfBytes": "32",
        "value": "t_struct(Gem)4494_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(enum Booster => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Booster)4456,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4537_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4497,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "config",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ProtocolConfig)4416_storage"
          },
          {
            "astId": 4501,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gemTypes",
            "offset": 0,
            "slot": "28",
            "type": "t_array(t_struct(GemTypeConfig)4429_storage)dyn_storage"
          },
          {
            "astId": 4505,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gemTypesMintWindows",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_struct(GemTypeMintWindow)4434_storage)dyn_storage"
          },
          {
            "astId": 4508,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "defoTokenLimitWindow",
            "offset": 0,
            "slot": "30",
            "type": "t_struct(DEFOTokenLimitWindow)4443_storage"
          },
          {
            "astId": 4513,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gems",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_uint256,t_struct(Gem)4494_storage)"
          },
          {
            "astId": 4516,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "nft",
            "offset": 0,
            "slot": "33",
            "type": "t_struct(ERC721Storage)4351_storage"
          },
          {
            "astId": 4519,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "total",
            "offset": 0,
            "slot": "46",
            "type": "t_struct(Fi)4477_storage"
          },
          {
            "astId": 4524,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "usersFi",
            "offset": 0,
            "slot": "56",
            "type": "t_mapping(t_address,t_struct(Fi)4477_storage)"
          },
          {
            "astId": 4533,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "usersNextGemBooster",
            "offset": 0,
            "slot": "57",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256)))"
          },
          {
            "astId": 4536,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "defoTokenLimitPerRewards",
            "offset": 0,
            "slot": "58",
            "type": "t_struct(DEFOTokenLimitPerRewards)4452_storage"
          }
        ],
        "numberOfBytes": "1920"
      },
      "t_struct(Counter)2737_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2736,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DEFOTokenLimitPerRewards)4452_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitPerRewards",
        "members": [
          {
            "astId": 4447,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4451,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "timeOfWindowStart",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DEFOTokenLimitWindow)4443_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitWindow",
        "members": [
          {
            "astId": 4438,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4442,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "timeOfLastSale",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefoTokenLimitConfig)4375_storage": {
        "encoding": "inplace",
        "label": "struct DefoTokenLimitConfig",
        "members": [
          {
            "astId": 4370,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "saleLimitPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4372,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "saleLimitAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4374,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "limitByReward",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ERC721Storage)4351_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage",
        "members": [
          {
            "astId": 4306,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4308,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4311,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokenIdTracker",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Counter)2737_storage"
          },
          {
            "astId": 4315,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "owners",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4319,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "balances",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4323,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokenApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4329,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "operatorApprovals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 4331,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4337,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "ownedTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 4341,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "ownedTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4344,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "allTokens",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4348,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "allTokensIndex",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4350,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "init",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Fi)4477_storage": {
        "encoding": "inplace",
        "label": "struct Fi",
        "members": [
          {
            "astId": 4458,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "claimedGross",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4460,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "claimedNet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4462,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "stakedGross",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4464,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "stakedNet",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4466,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "unStakedGross",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4468,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "unStakedGrossUp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4470,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "unStakedNet",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4472,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "donated",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4474,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "claimTaxPaid",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4476,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "vaultTaxPaid",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Gem)4494_storage": {
        "encoding": "inplace",
        "label": "struct Gem",
        "members": [
          {
            "astId": 4479,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gemTypeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4482,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "booster",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Booster)4456"
          },
          {
            "astId": 4484,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintTime",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4486,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "lastRewardWithdrawalTime",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4488,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "lastMaintenanceTime",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4491,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "fi",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Fi)4477_storage"
          },
          {
            "astId": 4493,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "presold",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(GemTypeConfig)4429_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeConfig",
        "members": [
          {
            "astId": 4418,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "maintenanceFeeDai",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4420,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "rewardAmountDefo",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4424,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 4426,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taperRewardsThresholdDefo",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4428,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "maxMintsPerLimitWindow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(GemTypeMintWindow)4434_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeMintWindow",
        "members": [
          {
            "astId": 4431,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4433,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "endOfMintLimitWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProtocolConfig)4416_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolConfig",
        "members": [
          {
            "astId": 4380,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "paymentTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20)737)2_storage"
          },
          {
            "astId": 4384,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "wallets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)7_storage"
          },
          {
            "astId": 4390,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "incomeDistributionOnMint",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_array(t_uint256)3_storage)2_storage"
          },
          {
            "astId": 4392,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "maintenancePeriod",
            "offset": 0,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4394,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "rewardPeriod",
            "offset": 4,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4396,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taxScaleSinceLastClaimPeriod",
            "offset": 8,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4400,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taxRates",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_uint256)5_storage"
          },
          {
            "astId": 4402,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "charityContributionRate",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 4404,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "vaultWithdrawalTaxRate",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 4406,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taperRate",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 4408,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintLock",
            "offset": 0,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4410,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "transferLock",
            "offset": 1,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4412,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintLimitWindow",
            "offset": 2,
            "slot": "24",
            "type": "t_uint32"
          },
          {
            "astId": 4415,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "defoTokenLimitConfig",
            "offset": 0,
            "slot": "25",
            "type": "t_struct(DefoTokenLimitConfig)4375_storage"
          }
        ],
        "numberOfBytes": "896"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}