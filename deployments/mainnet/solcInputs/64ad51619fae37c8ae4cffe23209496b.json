{
  "language": "Solidity",
  "sources": {
    "contracts/base-facet/BaseFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\nimport \"./Storage.sol\";\n/**\n * @title  BaseFacet\n * @author Decentralized Foundation Team\n * @notice BaseFacet is a base contract all facets to inherit, includes cross-facet utils and  common reusable functions for DEFO Diamond\n */\ncontract BaseFacet is Storage {\n\n    /* ====================== Modifiers ====================== */\n\n    modifier exists(uint256 _tokenId) {\n        _requireExists(_tokenId);\n        _;\n    }\n\n    modifier onlyGemHolder(uint256 _tokenId) {\n        require(s.nft.owners[_tokenId] == _msgSender(), \"You don't own this gem\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        LibDiamond.enforceIsContractOwner();\n        _;\n    }\n    modifier nonZeroAddress(address _owner) {\n        require(_owner != address(0), \"ERC721: address zero is not a valid owner\");\n        _;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _msgSender() internal override view returns (address sender_) {\n        if (Context._msgSender() == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n        } else {\n            sender_ = msg.sender;\n        }\n    }\n\n    function _getChainID() internal view returns (uint256 id) {\n        assembly {\n            id := chainid()\n        }\n    }\n\n    function _requireExists(uint256 _tokenId) internal view {\n        require(_exists(_tokenId), \"ERC721: tokenId is not valid\");\n    }\n\n    function _exists(uint256 _tokenId) internal view returns (bool) {\n        return (s.nft.owners[_tokenId] != address(0));\n    }\n\n    ///todo ensure passing memory array here to the public functions is pretty optimal\n    function _getGemIds(address _user) internal view returns (uint256[] memory) {\n        uint256 numberOfGems = s.nft.balances[_user];\n        uint256[] memory gemIds = new uint256[](numberOfGems);\n        for (uint256 i = 0; i < numberOfGems; i++) {\n            uint256 gemId = s.nft.ownedTokens[_user][i];\n            require(_exists(gemId), \"A gem doesn't exists\");\n            gemIds[i] = gemId;\n        }\n        return gemIds;\n    }\n\n    function _getAllUsers() internal view returns (address[] memory users_) {\n        users_ = new address[](s.nft.allTokens.length);\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\n            users_[tokenId] = s.nft.owners[tokenId];\n        }\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    },
    "contracts/base-facet/Storage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport {AppStorage} from \"../libraries/LibAppStorage.sol\";\n\ncontract Storage is Context {\n    AppStorage internal s;\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "contracts/libraries/LibAppStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../data-types/IDataTypes.sol\";\n\n/** @title  LibAppStorage EIP-2535 Diamond Facet Storage\n  * @author Decentralized Foundation Team\n  * @notice This diamond storage library is inherited by all facets and imported in libraries\n*/\nlibrary LibAppStorage {\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\n        assembly {\n            ds.slot := 0\n        }\n    }\n}\n"
    },
    "contracts/data-types/IDataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n/**\n*   @dev The only source for all the data structures used in the protocol storage\n*   @dev This includes general config, gem type config, and mutable data\n*/\n\n/// @dev number of payment tokens to enumerate the error, initially it's Defo and Dai,\n/// @dev see PaymentTokens enum\nuint256 constant PAYMENT_TOKENS = 2;\n\n/// @dev number of income recievers on yield gem mint\nuint256 constant PAYMENT_RECEIVERS = 3;\n\n/// @dev total wallets on the protocol, see Wallets enum\nuint256 constant WALLETS = 7;\n\n/// @dev total number of supported tax tiers\nuint256 constant TAX_TIERS = 5;\n\n/**\n*   @notice a struct for data compliance with erc721 standard\n*   @param name Token name\n*   @param symbol Token symbol\n*   @param owners Mapping from token ID to owner address\n*   @param balances Mapping owner address to token count\n*   @param tokenApprovals Mapping from token ID to approved address\n*   @param operatorApprovals Mapping from owner to operator approvals\n*   @param ownedTokens Mapping from owner to list of owned token IDs\n*   @param ownedTokensIndex Mapping from token ID to index of the owner tokens list\n*   @param allTokens Array with all token ids, used for enumeration\n*   @param allTokensIndex Mapping from token id to position in the allTokens array\n*/\n    struct ERC721Storage {\n        string name;\n        string symbol;\n        Counters.Counter tokenIdTracker;\n        mapping(uint256 => address) owners;\n        mapping(address => uint256) balances;\n        mapping(uint256 => address) tokenApprovals;\n        mapping(address => mapping(address => bool)) operatorApprovals;\n        string baseURI;\n        mapping(address => mapping(uint256 => uint256)) ownedTokens;\n        mapping(uint256 => uint256) ownedTokensIndex;\n        uint256[] allTokens;\n        mapping(uint256 => uint256) allTokensIndex;\n        bool init;\n    }\n\n\n/// @notice token enum to index arrays of rates and addresses, the convention is that Dai is at place 0, Defo is at 1\n/// @dev the order is extremely important once deployed\n    enum PaymentTokens {\n        Dai,\n        Defo\n    }\n\n/// @notice protocol wallets for easy enumeration,\n/// @dev the order is extremely important once deployed, see configuration scripts\n    enum Wallets {\n        Treasury,\n        RewardPool,\n        LiquidityPair,\n        Stabilizer,\n        Charity,\n        Vault,\n        RedeemContract\n    }\n\n\n/// @notice these tiers correspond to the configurable percentage from the diamond storage\n    enum TaxTiers {\n        Tier0NoPayment,\n        Tier1HugeTax,\n        Tier2MediumTax,\n        Tier3SmallTax,\n        Tier4NoTax\n    }\n\n/**\n * @notice DefoTokenLimitConfig DEFO ERC20 Token transfer limiter, this is for the 1000 DEFO per 24h sale limitation, can be changes with setTransferLimit\n * @param saleLimitPeriod initially 1 day\n * @param saleLimitAmount initially 1000 tokens\n*/\n    struct DefoTokenLimitConfig {\n        uint256 saleLimitPeriod;\n        uint256 saleLimitAmount;\n        bool limitByReward;\n    }\n\n/**\n * @notice Main Protocol Configuration structure\n     * @param mintLock no mint for all gems, no minting if set\n     * @param transferLock no transfer if set, including no minting\n     * @param incomeDistributionOnMint distribution of the payment among tokens in percent rates, all values use percentage multiplier (see percent helper), here addresses are from the Addresses\n     * @param maintenancePeriod a period in seconds for maintenance fee accrual, initially one month\n     * @param rewardPeriod a period in seconds for generating yield gem rewards, initially one week\n     * @param mintCountResetPeriod a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs.\n     * @param taxScaleSinceLastClaimPeriod a period in seconds for a tax scale to work out, initially one week\n     * @param taxRates tax rates in percent (with percent multiplier, see percent helper contract), initially 30%, 30%, 15%, 0\n     * @param charityContributionRate charity rate (w multiplier as all percent values in the project), initially 5%\n     * @param vaultWithdrawalRate fee paid to withdraw amount from the vault back to the earned rewards, initially 10%\n     * @param taperRate taper rate, initially 20%\n     * @param mintLock no mint for all gems, no minting if set\n     * @param transferLock no transfer if set\n     * @param mintLimitWindow a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs, see GemTypeConfig.maxMintsPerLimitWindow\n     */\n\n    struct ProtocolConfig {\n        IERC20[PAYMENT_TOKENS] paymentTokens;\n        address[WALLETS] wallets;\n        uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] incomeDistributionOnMint;\n        // time periods\n        uint32 maintenancePeriod;\n        uint32 rewardPeriod;\n        uint32 taxScaleSinceLastClaimPeriod;\n        // taxes and contributions\n        uint256[TAX_TIERS] taxRates;\n        uint256 charityContributionRate;\n        uint256 vaultWithdrawalTaxRate;\n        uint256 taperRate;\n        // locks\n        bool mintLock;\n        bool transferLock;\n        // mint limit period for coutner reset\n        uint32 mintLimitWindow;\n        DefoTokenLimitConfig defoTokenLimitConfig;\n    }\n\n/**\n * @notice A struct containing configuration details for gemType\n     * @param maintenanceFee Maintenance fee in Dai for the node type, amount in wei per month\n     * @param rewardAmountDefo Reward in DEFO for the node type, amount in wei per week\n     * @param price Price in DEFO and DAI (in wei), respectively, according to the PaymentTokens enum\n     * @param taperRewardsThresholdDefo Taper threshold, in wei, decreasing rate every given amount of rewards in DEFO\n     * @param maxMintsPerLimitWindow number of gems, mint limit for a node type, see ProtocolConfig.mintLimitWindow\n     */\n    struct GemTypeConfig {\n        uint256 maintenanceFeeDai;\n        uint256 rewardAmountDefo;\n        uint256[PAYMENT_TOKENS] price;\n        uint256 taperRewardsThresholdDefo;\n        uint256 maxMintsPerLimitWindow;\n    }\n\n/**\n * @notice A struct containing current mutable status for gemType\n     * @param mintCount counter incrementing by one on every mint, during       mintCountResetPeriod; after mintCountResetPeriod with no mints, reset to 0\n     * @param endOfMintLimitWindow a moment to reset the mintCount counter to zero, set the new endOfMintLimitWindow and start over\n     */\n    struct GemTypeMintWindow {\n        uint256 mintCount;\n        uint32 endOfMintLimitWindow;\n    }\n\n/**\n * @notice A struct describing current DEFO Token limiter input\n * @param tokensSold DEFO tokens sold per limit window, \"sold\" = \"transferred to liquidity pair except the mint\"\n * @param timeOfLastSale time of last sale\n     */\n    struct DEFOTokenLimitWindow {\n        mapping(address => uint256) tokensSold;\n        mapping(address => uint256) timeOfLastSale;\n    }\n\n/**\n * @notice A struct describing DEFO Token limit per weekly rewards\n * @param tokensSold DEFO tokens sold per reward period window starting from the first sale \"sold\" = \"transferred to liquidity pair except the mint\"\n * @param timeOfWindowStart time of first sale in the window\n     */\n    struct DEFOTokenLimitPerRewards {\n        mapping(address => uint256) tokensSold;\n        mapping(address => uint256) timeOfWindowStart;\n    }\n\n    enum Booster {\n        None,\n        Delta,\n        Omega\n    }\n\n/**\n * @notice A struct describing financial state, provides the complete state for user, gem, or protocol total.\n * @notice It gives the current exact balance of the Vault, Rewards, and Charity.\n * @param claimedGross rewards amount previously claimed for all time, gross amount - before tax and charity\n * @param claimedNet rewards claimed and to user, net amount after tax and charity\n * @param stakedGross amount removed from rewards to stake, charity not yet deducted\n * @param stakedNet amount put to the vault - charity has been deducted\n * @param unStakedGross  amount removed from the vault, pre withdraw tax and charity\n * @param unStakedGrossUpped  amount removed from the vault gross-upped with charity to equal to the stakedGross amount\n * @param unStakedNet  amount returned to the earned rewards, post withdraw tax and charity\n * @param donated sent to charity\n * @param claimTaxPaid claim tax deducted - 30%, 15%, 15%\n * @param vaultTaxPaid vault withdrawal tax deducted\n     */\n    struct Fi {\n        uint256 claimedGross;\n        uint256 claimedNet;\n        uint256 stakedGross;\n        uint256 stakedNet;\n        uint256 unStakedGross;\n        uint256 unStakedGrossUp;\n        uint256 unStakedNet;\n        uint256 donated;\n        uint256 claimTaxPaid;\n        uint256 vaultTaxPaid;\n    }\n\n/**\n * @notice current state of a gem, a gem is an instance with consistent yield and fee rates specified by the pair (gemType, booster)\n * @param gemType node type, initially it's  0 -> Ruby , 1 -> Sapphire, 2 -> Diamond, and boosters\n * @param booster node Booster 0 -> None , 1 -> Delta , 2 -> Omega\n * @param mintTime timestamp of the mint time\n * @param lastRewardWithdrawalTime timestamp of last reward claim OR stake. Same as mintTime if not yet claimed.\n * @param lastMaintenanceTime timestamp of the last maintenance (could be a date in the future in case of the upfront payment)\n * @param presold flag that this gem was bought on presale, used to avoid double minting\n*/\n    struct Gem {\n        uint8 gemTypeId;\n        Booster booster;\n        uint32 mintTime;\n        uint32 lastRewardWithdrawalTime;\n        uint32 lastMaintenanceTime;\n        Fi fi;\n        bool presold;\n        uint256 maintenanceFeePaid;\n    }\n\n\n    struct MaintenanceFeeReductionRecord {\n        uint256 timeOfReduction;\n        uint256 maintenanceReductionPercent;\n    }\n\n/**\n*   @notice Main Contract Storage utilizing App Storage pattern for Diamond Proxy data organization\n*   @param config main configuration, basically everything except gemType specific\n*   @param gemTypes supported gem types with their details, gemTypeId is the index of the array\n*   @param gems mapping indexed by tokenId, where tokenId is in the nft.allTokens\n*   @param gemTypesMintWindows windows for limiting yield gem mints per gem type\n*   @param defoTokenLimitWindow window for limiting DEFO Token sale\n*   @param nft ERC721 standard related storage\n*   @param total cumulated amounts for all operations\n*   @param usersFi financial info per each user\n*   @param usersNextGemBooster used for presale, number (uint256) of boosters (Booster) with a type (uint8) left for a user (address)\n*/\n    struct AppStorage {\n        // configuration\n        ProtocolConfig config;\n        GemTypeConfig[] gemTypes;\n        // current state\n        GemTypeMintWindow[] gemTypesMintWindows;\n        DEFOTokenLimitWindow defoTokenLimitWindow;\n        mapping(uint256 => Gem) gems;\n        ERC721Storage nft;\n        // Cumulations\n        Fi total;\n        // User data, users list is s.nft.owners, size s.nft.allTokens.length (managed by ERC721Enumerable)\n        mapping(address => Fi) usersFi;\n        mapping(address => mapping(uint8 => mapping(Booster => uint256))) usersNextGemBooster;\n        DEFOTokenLimitPerRewards defoTokenLimitPerRewards;\n        address routerWallet;\n        GemTypeConfig[] gemTypes2;\n        MaintenanceFeeReductionRecord[] maintenanceFeeReductionTable;\n    }\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/facets/VaultFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../interfaces/IVault.sol\";\nimport \"../base-facet/BaseFacet.sol\";\nimport \"../libraries/LibDonations.sol\";\nimport \"../libraries/PercentHelper.sol\";\nimport \"../libraries/BoosterHelper.sol\";\nimport \"../libraries/PeriodicHelper.sol\";\nimport \"../libraries/TimeHelper.sol\";\nimport \"../libraries/TaxHelper.sol\";\nimport \"../libraries/FiHelper.sol\";\n\n/** @title  VaultFacet EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice Vault functionality - unStake, lottery, and getters\n*/\ncontract VaultFacet is BaseFacet, IVault {\n    using FiHelper for Fi;\n\n    /* ============ External and Public Functions ============ */\n    function unStakeReward(uint256 _tokenId, uint256 _amount) external onlyGemHolder(_tokenId) {\n        address user = _msgSender();\n        Gem storage gem = s.gems[_tokenId];\n        uint256 vaultAmount = gem.fi.stakedNet - gem.fi.unStakedGross;\n        require(vaultAmount >= _amount, \"Not enough amount in the vault for the gem\");\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\n        address[WALLETS] storage wallets = s.config.wallets;\n        Fi memory op;\n\n        op.unStakedGross = _amount;\n        op.unStakedGrossUp = PercentHelper.grossUp(_amount, s.config.charityContributionRate);\n        // sending withdrawal tax to the reward wallet\n        uint256 discountedFee = BoosterHelper.reduceVaultWithdrawalFee(gem.booster, s.config.vaultWithdrawalTaxRate);\n        op.vaultTaxPaid = PercentHelper.rate(_amount, discountedFee);\n        defo.transferFrom(\n            wallets[uint(Wallets.Vault)],\n            wallets[uint(Wallets.RewardPool)],\n            op.vaultTaxPaid);\n\n        op.unStakedNet = _amount - op.vaultTaxPaid;\n\n        defo.transferFrom(\n            wallets[uint(Wallets.Vault)],\n            wallets[uint(Wallets.RewardPool)],\n            op.unStakedNet);\n\n        emit UnStaked(user, op.unStakedGross, op.unStakedNet);\n        op.updateStorage(_tokenId, user);\n    }\n\n    function giveaway(uint256 _defoAmount) public {\n        address minter = _msgSender();\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\n        address[WALLETS] storage wallets = s.config.wallets;\n        require(_defoAmount > 0, \"Zero rewards for a gem\");\n\n        Fi memory op;\n        op.stakedGross = _defoAmount;\n        op.stakedNet = _defoAmount;\n\n        defo.transferFrom(\n            minter,\n            wallets[uint(Wallets.Vault)],\n            _defoAmount);\n        op.updateStorage(minter);\n        emit GivenAway(minter, _defoAmount);\n    }\n\n    function configureLottery(uint256 _numberOfWinners, uint32 _lotteryStart, uint32 _periodicity) external {\n\n    }\n\n    function getStaked(uint256 _tokenId) external view returns (uint256) {\n        return s.gems[_tokenId].fi.stakedNet - s.gems[_tokenId].fi.unStakedGross;\n    }\n\n    function getStakedAllGems() external view returns (uint256[] memory tokenIds_, uint256[] memory amounts_) {\n        address user = _msgSender();\n        tokenIds_ = _getGemIds(user);\n        amounts_ = new uint256[](tokenIds_.length);\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\n            uint256 tokenId = tokenIds_[i];\n            amounts_[i] = s.gems[tokenId].fi.stakedNet - s.gems[tokenId].fi.unStakedGross;\n        }\n        return (tokenIds_, amounts_);\n    }\n\n    function getTotalStaked() external view returns (uint256) {\n        address user = _msgSender();\n        return s.usersFi[user].stakedNet - s.usersFi[user].unStakedGross;\n    }\n\n    function getTotalStakedAllUsers() external view returns (uint256) {\n        return s.total.stakedNet - s.total.unStakedGross;\n    }\n\n    function lotteryWinners(uint32 _timestamp) external view returns (address[] memory) {\n    }\n\n}\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\n/** @title  IVault EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice Vault Interface - unStake, lottery, and getters\n*/\ninterface IVault {\n    // @dev here if we unStake, say, 100 DEFO from the vault, the  amountGross is unStaked, amountNet comes back to earned rewards\n    event UnStaked(address indexed user, uint256 amountGross, uint256 amountNet);\n    event GivenAway(address indexed minter, uint256 amountDefo);\n    event LotteryConfigured(uint256 numberOfWinners, uint32 lotteryStart, uint32 periodicity);\n    event LotteryWinnersDetermined(uint256[] winners);\n\n    /**\n    * @notice remove DEFO amount from the vault back to the unclaimed rewards\n    * @param _tokenId yield gem id\n    * @param _amount amount to remove from the vault in DEFO (wei precision)\n    */\n    function unStakeReward(uint256 _tokenId, uint256 _amount) external;\n\n    /**\n    * @notice vault lottery configuration\n    * @param _numberOfWinners number of winners of the vault lottery\n    * @param _lotteryStart lottery start moment to remember, blocktime format, zero for blocktime\n    * @param _periodicity periodicity in seconds, initially weekly\n    */\n    function configureLottery(uint256 _numberOfWinners, uint32 _lotteryStart, uint32 _periodicity) external;\n\n    /**\n    * @notice put defo to the vault from the user's wallet\n    * @param _defoAmount amount of DeFo to put to vault\n    */\n    function giveaway(uint256 _defoAmount) external;\n\n    /**\n    * @notice get DEFO amount currently in the vault for a specific yield gem\n    * @param _tokenId yield gem id\n    * @return amount in DEFO (wei precision)\n    */\n    function getStaked(uint256 _tokenId) external view returns (uint256);\n\n    /**\n    * @notice get DEFO amount currently in the vault for all user's yield gems\n    * @return tokenIds_ array of staked tokenIds\n    * @return amounts_ array of amounts (gross, currently in the vault)\n    */\n    function getStakedAllGems() external view returns (uint256[] memory tokenIds_, uint256[] memory amounts_);\n\n    /**\n    * @notice get amount currently in the vault for sender\n    * @return amount in DEFO (wei precision)\n    */\n    function getTotalStaked() external view returns (uint256);\n\n    /**\n    * @notice get amount currently in the vault for all protocol users\n    * @return amount in DEFO (wei precision)\n    */\n    function getTotalStakedAllUsers() external view returns (uint256);\n\n    /**\n    * @notice gets lottery winners in the lottery interval containing _timestamp\n    * @param _timestamp moment of the query, zero if now\n    * @return addresses of the lottery winners\n    * @dev the ones related to the requested period are put to the storage to return the same number in the future\n    */\n    function lotteryWinners(uint32 _timestamp) external view returns (address[] memory);\n\n}\n"
    },
    "contracts/libraries/LibDonations.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./LibAppStorage.sol\";\n\n// helper for limit daily mints\nlibrary LibDonations {\n    event Donated(address indexed user, uint256 amount);\n}\n"
    },
    "contracts/libraries/PercentHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./LibAppStorage.sol\";\n\n\n/**\n * @notice Library for percentage integer math, note PERCENTAGE_PRECISION_MULTIPLIER when configuring the protocol\n * @author Decentralized Foundation Team\n * @dev PERCENTAGE_PRECISION_MULTIPLIER*100 = 10000 greater than real percent, so 20% is represented as 2000, meaning 0.2\n */\n\nlibrary PercentHelper {\n    uint256 constant PERCENTAGE_PRECISION_MULTIPLIER = 100;\n    uint256 constant HUNDRED_PERCENT = 100 * PERCENTAGE_PRECISION_MULTIPLIER;\n\n    /**\n     * @dev simply a ratio of the given value, e.g. if tax is 30% and value if 100 the function gives 30\n     * @param value Value to get ratio from\n     * @param tax Percent to apply\n     */\n    ///todo make pure once got rid of the console.log\n    function rate(uint256 value, uint256 tax) internal pure returns (uint256) {\n        return tax > 0 ? (value * tax) / HUNDRED_PERCENT : 0;\n    }\n\n    /**\n    * @dev simple gross-up, gives back gross for net value, if charity is 5%, then gross up of 95 gives 100\n     * @param netValue Net value to gross up\n     * @param tax Percent that was applied\n     */\n    function grossUp(uint256 netValue, uint256 tax) internal pure returns (uint256) {\n        return tax > 0 ? (netValue * HUNDRED_PERCENT) / (HUNDRED_PERCENT - tax) : 0;\n    }\n\n\n    /// @dev received inverted percent for taper calc, if ratio is 20%, then 1/(1-20%) = 25%\n    function invertedRate(uint256 value, uint256 ratio) internal pure returns (uint256) {\n        return value * HUNDRED_PERCENT / (HUNDRED_PERCENT - ratio);\n    }\n\n    function oneHundredLessPercent(uint256 ratio) internal pure returns (uint256) {\n        return (HUNDRED_PERCENT - ratio);\n    }\n\n    function minusHundredPercent(uint256 ratio) internal pure returns (uint256) {\n        return (ratio - HUNDRED_PERCENT);\n    }\n\n\n    function reversePercent(uint256 ratio) internal pure returns (uint256) {\n        return PERCENTAGE_PRECISION_MULTIPLIER / ratio;\n    }\n\n    function percentPower(uint256 value, uint256 ratio, uint pow) internal pure returns (uint256) {\n        return value * PERCENTAGE_PRECISION_MULTIPLIER ** pow / ratio ** pow;\n    }\n\n\n    /// @dev simply value less given percentage, e.g. if tax is 30% the functio gives 70 for 100\n    function lessRate(uint256 value, uint256 tax) internal pure returns (uint256) {\n        return value - rate(value, tax);\n    }\n\n    function plusRate(uint256 value, uint256 tax) internal pure returns (uint256) {\n        return value + rate(value, tax);\n    }\n}\n"
    },
    "contracts/libraries/BoosterHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport {Booster} from \"../data-types/IDataTypes.sol\";\nimport \"./PercentHelper.sol\";\n\n/// @notice Library to boost rates and fees\n/// @author Decentralized Foundation\n///todo utilize percenthelper\nlibrary BoosterHelper {\n    /// @notice boosting rewards rate (which is an amount per second), 50% for omega, 25% for delta\n    function boostRewardsRate(Booster booster, uint256 rate) internal pure returns (uint256) {\n        if (booster == Booster.Omega) {\n            //50% more\n            return rate * 15000 / 10000;\n        } else if (booster == Booster.Delta) {\n            //25% more\n            return rate * 12500 / 10000;\n        } else return rate;\n    }\n\n    /// @notice reducing fees, 50% for omega, 25% reduction for delta\n    function reduceMaintenanceFee(Booster booster, uint256 fee) internal pure returns (uint256) {\n        if (booster == Booster.Omega) {\n            return fee / 2;\n        } else if (booster == Booster.Delta) {\n            return fee * 7500 / 10000;\n        } else return fee;\n    }\n\n    function reduceVaultWithdrawalFee(Booster booster, uint256 fee) internal pure returns (uint256) {\n        if (booster == Booster.Omega) {\n            return fee * 1000 / 10000;\n        } else if (booster == Booster.Delta) {\n            return fee / 2;\n        } else return fee;\n    }\n}\n"
    },
    "contracts/libraries/PeriodicHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./PercentHelper.sol\";\nimport \"./BoosterHelper.sol\";\nimport \"../data-types/IDataTypes.sol\";\n\n/// @notice Library for reward calculations\n/// @author Decentralized Foundation\nlibrary PeriodicHelper {\n    using PercentHelper for uint256;\n\n    /// @dev calculates rewards with a second precision to a given date, not prorated to date\n    function calculatePeriodicToDate(\n        uint256 ratePerPeriod,\n        uint32 lastEventTime,\n        uint32 toDate,\n        uint32 payOrDeductPeriod\n    ) internal pure returns (uint) {\n        return (toDate > lastEventTime) ? ((toDate - lastEventTime) / payOrDeductPeriod) * ratePerPeriod : 0;\n    }\n\n    /// @dev calculates rewards with a second precision, not prorated to date\n    function calculatePeriodic(\n        uint256 ratePerPeriod,\n        uint32 lastEventTime,\n        uint32 payOrDeductPeriod\n    ) internal view returns (uint) {\n\n        return calculatePeriodicToDate(ratePerPeriod, lastEventTime, uint32(block.timestamp), payOrDeductPeriod);\n    }\n\n    /// @dev calculates rewards with a second precision, not prorated to date\n    function calculatePeriodicWithReductionTable(\n        uint256 ratePerPeriod,\n        MaintenanceFeeReductionRecord[] storage reduction,\n        uint32 lastEventTime,\n        uint32 payOrDeductPeriod\n    ) internal view returns (uint) {\n        uint i = 0;\n        uint amount = 0;\n        uint32 toDate = lastEventTime + payOrDeductPeriod;\n        while (toDate < uint32(block.timestamp)) {\n            while (i < reduction.length && reduction[i].timeOfReduction < toDate) {\n                i++;\n            }\n            i--;\n            uint rate = ratePerPeriod.rate(reduction[i].maintenanceReductionPercent);\n            amount += rate;\n            toDate += payOrDeductPeriod;\n        }\n        return amount;\n    }\n\n    // @notice Calculated Tapered Reward starting from the mint time. To get the reward call this function and subtract already paid from it.\n    // @return taperedReward, updatedRewardRate\n    function calculateTaperedReward(\n        uint timePeriod, //block.timestamp - mintTime\n        uint256 taperThreshold, //120 for diamond\n        uint256 taperPercent, //80% usually, NOTE this is 80% but not 20%\n        uint ratePerPeriod, //5 for diamond, pass already boosted rate if boost is applicable\n        uint payOrDeductPeriod //in seconds, initially it's 1 week\n    ) internal pure returns (uint256 taperedReward) {\n        uint256 taperedPercent = taperPercent.oneHundredLessPercent();\n        // Basically it's a geometric progression of the timestamps b_n = b_1*q_(n-1),\n        // For simplicity startTime is zero, so timePeriod should be block.timestamp - startTime\n        // where q = 1/taperedPercent, b_1 =  taperThreshold/ratePerPeriod\n        // So that b_0 = taperThreshold/ratePerPeriod (which is 120/5= 24 weeks for the first taper from the startTime)\n        // b_1 = taperThreshold/(ratePerPeriod*taperedPercent^1)  (which is 120/(5*0.8)= 30 weeks from the previous point to get 120 $DEFO by the tapered rate of 4)\n        // b_2 = taperThreshold/(ratePerPeriod*taperedPercent^2)\n        // ....\n        // b_n = taperThreshold/(ratePerPeriod  *taperedPercent^n)\n        // b_(n+1) = taperThreshold/(ratePerPeriod*taperedPercent^(n+1))\n        // So that SUM_n_from_1_to_n(b_n)<=timePeriod, but SUM_n_from_1_to_(n+1)(b_n)>timePeriod\n        // Actual points on the timeline are S_i which are sums of the taper intervals b_i\n        //\n        // 1. At first, lets' find n and S_n\n        // Sum of geometric progression is Sn = b_1 * (q^n-1)/(q-1)\n        // So we just loop to find while Sn<=timePeriod, so that Sn = taperThreshold/ratePerPeriod * (1/taperedPercent^n-1)/(1/taperedPercent -1)\n        //\n        // for example, for diamond gem: it's 120/5*(1/0.8**(N-1)-1)/(1/0.8-1)\n        //\n        // 2. Once we found n and S_n, the amount to pay would be taperThreshold*n+(timePeriod - S_n)*ratePerPeriod*taperedPercent^n\n        // for example. if we got 100 weeks, n =3 and the formula is 120*3+(100-91.5)*5*0.8**3 = 381.76\n        // We calculate the finalAmount and deduct what was paid already to calculate the payment.\n        uint finalAmount;\n        uint sN = 0;\n        uint sNp1 = 0;\n        //S_(n+1)\n        uint n = 0;\n        do {\n            //this is the formula, but the percents are with precision multiplier\n            //sN = taperThreshold/ratePerPeriod * (1/taperedPercent**n-1)/(1/taperedPercent -1);\n            sN = sNp1;\n            sNp1 = taperThreshold / ratePerPeriod *\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT ** n / taperedPercent ** n - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER) /\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT / taperedPercent - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER);\n            n++;\n        }\n        while (payOrDeductPeriod * sNp1 <= timePeriod);\n        n = n - 2;\n        //convert sN to Seconds, that's just for the logs to show in weeks\n        sN *= payOrDeductPeriod;\n        //        uint bN = payOrDeductPeriod * taperThreshold / (ratePerPeriod * taperedPercent ** n);\n        // The whole process makes sense if the current time is later than the 1st taper event\n        uint finalRate;\n        if (sN != 0 && timePeriod > sN) {\n            finalRate = ratePerPeriod * taperedPercent ** (n) / PercentHelper.HUNDRED_PERCENT ** (n);\n            finalAmount = taperThreshold * n + ((timePeriod - sN) / payOrDeductPeriod) * finalRate;\n        }\n        else {\n            finalRate = ratePerPeriod;\n            finalAmount = timePeriod / payOrDeductPeriod * ratePerPeriod;\n        }\n        return finalAmount;\n    }\n}\n"
    },
    "contracts/libraries/TimeHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\n/// @notice Operations with time periods and durations\nlibrary TimeHelper {\n    function hasPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 lockPeriod) internal view returns (bool) {\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent > lockPeriod);\n    }\n\n    function notPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 freePeriod) internal view returns (bool) {\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent < freePeriod);\n    }\n}\n"
    },
    "contracts/libraries/TaxHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./PercentHelper.sol\";\nimport \"./LibAppStorage.sol\";\n\n/// @notice Library for withdrawal tax operations\nlibrary TaxHelper {\n    /// @dev gets an index to the taxTable\n    /// @param _timeFromLastRewardWithdrawal time in seconds passed from the last claim or stake\n    /// @return taxTier_ tax tier, can be a configurable mapping, now it's 0- 100% (rewards have not accrued yet), 1- 30%, 2-30%, 3- 15%, 4-0%.\n    function getTaxTier(uint256 _timeFromLastRewardWithdrawal) internal view returns (TaxTiers taxTier_) {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        uint32 scale = s.config.taxScaleSinceLastClaimPeriod;\n\n        taxTier_ = TaxTiers.Tier4NoTax;\n        if (_timeFromLastRewardWithdrawal < scale * 4) taxTier_ = TaxTiers.Tier3SmallTax;\n        if (_timeFromLastRewardWithdrawal < scale * 3) taxTier_ = TaxTiers.Tier2MediumTax;\n        if (_timeFromLastRewardWithdrawal < scale * 2) taxTier_ = TaxTiers.Tier1HugeTax;\n        if (_timeFromLastRewardWithdrawal < scale * 1) taxTier_ = TaxTiers.Tier0NoPayment;\n    }\n\n    /// @dev gets an index to taxRates from config\n    /// @param _lastRewardWithdrawalTimestamp time in seconds of the last claim or stake to vault\n    /// @return timestamp of the next tax tier change\n    function wenNextTaxTier(uint32 _lastRewardWithdrawalTimestamp) internal view returns (uint256) {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        uint32 scale = s.config.taxScaleSinceLastClaimPeriod;\n\n        if (_lastRewardWithdrawalTimestamp > uint32(block.timestamp)) {\n            return 0;\n        }\n        uint256 _timeFromLastRewardWithdrawal = uint32(block.timestamp) - _lastRewardWithdrawalTimestamp;\n        if (_timeFromLastRewardWithdrawal > scale * 4)\n            return 0;\n        else\n            return _lastRewardWithdrawalTimestamp + scale;\n    }\n\n    /// function retrieves tax rate for given tax tier\n    function getTaxRate(TaxTiers _taxTier) internal view returns (uint256) {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        return s.config.taxRates[uint256(_taxTier)];\n    }\n}\n"
    },
    "contracts/libraries/FiHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./LibAppStorage.sol\";\n\n/**\n * @notice Library for Fi financial operations structure\n * @author Decentralized Foundation Team\n */\n\nlibrary FiHelper {\n\n    function updateStorage(Fi memory _add, uint256 _tokenId, address _user) internal {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        Gem storage gem = s.gems[_tokenId];\n\n\n        ///todo refactor financial consisitency checks into a separate function\n        //        require(\n        //            (_add.claimedGross - _add.claimTaxPaid - _add.donated == _add.claimedNet) &&\n        //            (_add.unStakedGross - _add.vaultTaxPaid - _add.donated == _add.unStakedNet) &&\n        //            (_add.stakedGross - _add.donated == _add.stakedNetstakedNet)\n        //        , \"wrong financial operation structure\");\n\n        fiAdd(s.total, _add);\n        fiAdd(gem.fi, _add);\n        fiAdd(s.usersFi[_user], _add);\n    }\n\n    function updateStorage(Fi memory _add, address _user) internal {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        fiAdd(s.total, _add);\n        fiAdd(s.usersFi[_user], _add);\n    }\n\n    function fiAdd(Fi storage _initial, Fi memory _add) internal {\n        _initial.claimedGross += _add.claimedGross;\n        _initial.claimedNet += _add.claimedNet;\n        _initial.stakedGross += _add.stakedGross;\n        _initial.stakedNet += _add.stakedNet;\n        _initial.unStakedGross += _add.unStakedGross;\n        _initial.unStakedGrossUp += _add.unStakedGrossUp;\n        _initial.unStakedNet += _add.unStakedNet;\n        _initial.donated += _add.donated;\n        _initial.claimTaxPaid += _add.claimTaxPaid;\n        _initial.vaultTaxPaid += _add.vaultTaxPaid;\n    }\n\n    function fiSubtract(Fi storage _initial, Fi memory _add) internal {\n        _initial.claimedGross -= _add.claimedGross;\n        _initial.claimedNet -= _add.claimedNet;\n        _initial.stakedGross -= _add.stakedGross;\n        _initial.stakedNet -= _add.stakedNet;\n        _initial.unStakedGross -= _add.unStakedGross;\n        _initial.unStakedGrossUp -= _add.unStakedGrossUp;\n        _initial.unStakedNet -= _add.unStakedNet;\n        _initial.donated -= _add.donated;\n        _initial.claimTaxPaid -= _add.claimTaxPaid;\n        _initial.vaultTaxPaid -= _add.vaultTaxPaid;\n    }\n\n}\n"
    },
    "contracts/facets/YieldGemFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@traderjoe-xyz/core/contracts/traderjoe/interfaces/IJoeERC20.sol\";\nimport \"@traderjoe-xyz/core/contracts/traderjoe/interfaces/IJoePair.sol\";\nimport \"../interfaces/IYieldGem.sol\";\nimport \"../interfaces/IPresaleNode.sol\";\nimport \"../interfaces/ITransferLimiter.sol\";\nimport \"../erc721-facet/ERC721AutoIdMinterLimiterBurnableEnumerableFacet.sol\";\nimport \"../libraries/LibMintLimiter.sol\";\nimport \"../libraries/PercentHelper.sol\";\nimport \"../data-types/IDataTypes.sol\";\nimport \"../libraries/FiHelper.sol\";\n\n/** @title  YieldGemFacet EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice Basic DEFO-specific mint functionality on top of the ERC721 standard\n*/\ncontract YieldGemFacet is ERC721AutoIdMinterLimiterBurnableEnumerableFacet, IYieldGem {\n    using FiHelper for Fi;\n\n    /* ====================== Modifiers ====================== */\n\n    modifier onlyRedeemContract() {\n        require(\n            s.config.wallets[uint(Wallets.Stabilizer)] == _msgSender() ||\n            s.config.wallets[uint(Wallets.RedeemContract)] == _msgSender(), \"Unauthorized\");\n        _;\n    }\n\n    modifier onlyMintAvailable(uint8 _gemTypeId) {\n        require(LibMintLimiter.isMintAvailableForGem(_gemTypeId), \"Gem mint restriction\");\n        _;\n    }\n\n    /* ============ External and Public Functions ============ */\n\n    /// @dev takes payment for mint and passes to the internal _mint function\n    function mint(uint8 _gemTypeId) external onlyMintAvailable(_gemTypeId) {\n        address minter = _msgSender();\n        // check if there's enough DAI and DEFO\n        for (uint i = 0; i < PAYMENT_TOKENS; i++) {\n            require(\n                s.config.paymentTokens[i].balanceOf(minter) >= s.gemTypes2[_gemTypeId].price[i],\n                \"Insufficient balance\"\n            );\n        }\n        // distribute payment according to the distribution setup\n        for (uint receiver = 0; receiver < PAYMENT_RECEIVERS; receiver++) {\n            for (uint paymentToken = 0; paymentToken < PAYMENT_TOKENS; paymentToken++) {\n                uint256 amountToTransfer = PercentHelper.rate(s.gemTypes2[_gemTypeId].price[paymentToken], s.config.incomeDistributionOnMint[paymentToken][receiver]);\n                if (amountToTransfer != 0) {\n                    require(s.config.wallets[receiver] != address(0), \"YieldGem: configuration error, zero address\");\n                    s.config.paymentTokens[paymentToken].transferFrom(minter, s.config.wallets[receiver], amountToTransfer);\n                }\n            }\n        }\n        //mint to stabilizer to update pair reserves\n        uint STABILIZER_WALLET_INDEX = 3;\n        uint DEX_LP_WALLET_INDEX = 2;\n        IJoePair(s.config.wallets[DEX_LP_WALLET_INDEX]).mint(s.config.wallets[STABILIZER_WALLET_INDEX]);\n        //check if there's a booster left for the user and use it\n        Booster boost = Booster.None;\n        for (uint256 booster = 2; booster >= 1; booster--) {\n            if (s.usersNextGemBooster[minter][_gemTypeId][Booster(booster)] > 0) {\n                boost = Booster(booster);\n                s.usersNextGemBooster[minter][_gemTypeId][Booster(booster)]--;\n                break;\n            }\n        }\n        // finally mint a yield gem\n        _mint(_gemTypeId, minter, boost);\n    }\n\n    function mintTo(uint8 _gemType, address _to, Booster _booster) public onlyRedeemContract {\n        //just mint with no payment, already paid on presale\n        uint256 tokenId = _mint(_gemType, _to, _booster);\n        s.gems[tokenId].presold = true;\n        if (uint(_booster) > 0)\n            s.usersNextGemBooster[_to][_gemType][_booster]++;\n    }\n\n    function mintToFew(uint8 _gemType, address _to, Booster _booster, uint8 _number) public onlyRedeemContract {\n        //just mint with no payment, already paid on presale\n        for (uint8 i = 0; i < _number; i++) {\n            uint256 tokenId = _mint(_gemType, _to, _booster);\n            s.gems[tokenId].presold = true;\n            if (uint(_booster) > 0)\n                s.usersNextGemBooster[_to][_gemType][_booster]++;\n        }\n    }\n\n    function mintToBulk(uint8[] calldata _gemType, address[] calldata _to, Booster[] calldata _booster, uint8[] calldata _number) public onlyRedeemContract {\n        for (uint j = 0; j < _to.length; j++) {\n            for (uint8 i = 0; i < _number[j]; i++) {\n                uint256 tokenId = _mint(_gemType[j], _to[j], _booster[j]);\n                s.gems[tokenId].presold = true;\n                if (uint(_booster[j]) > 0)\n                    s.usersNextGemBooster[_to[j]][_gemType[j]][_booster[j]]++;\n            }\n        }\n    }\n\n    function createBooster(address _to, uint8 _gemType, Booster _booster) public onlyRedeemContract {\n        s.usersNextGemBooster[_to][_gemType][_booster]++;\n    }\n\n    function removeBooster(address _to, uint8 _gemType, Booster _booster) public onlyRedeemContract {\n        s.usersNextGemBooster[_to][_gemType][_booster]--;\n    }\n\n    function moveBoosters(address _from, address _to) public onlyRedeemContract {\n        for (uint8 gemType = 0; gemType < s.gemTypes2.length; gemType++) {\n            for (uint256 booster = 2; booster >= 1; booster--) {\n                s.usersNextGemBooster[_to][gemType][Booster(booster)] += s.usersNextGemBooster[_from][gemType][Booster(booster)];\n                s.usersNextGemBooster[_from][gemType][Booster(booster)] = 0;\n            }\n        }\n    }\n\n    function setLaunchTime() public onlyRedeemContract {\n        for (uint index = 0; index < s.nft.allTokens.length; index++) {\n            uint tokenId = s.nft.allTokens[index];\n            if (s.gems[tokenId].presold) {\n                s.gems[tokenId].lastMaintenanceTime = 1664643600;\n                s.gems[tokenId].lastRewardWithdrawalTime = 1664643600;\n                s.gems[tokenId].mintTime = 1664643600;\n            }\n        }\n    }\n\n    function transferToStabilizer(uint256 _tokenId) public onlyGemHolder(_tokenId) {\n        address user = _msgSender();\n        _transfer(user, s.config.wallets[uint(Wallets.Stabilizer)], _tokenId);\n    }\n\n    function batchtransferToStabilizer(uint256[] calldata _tokenids) external {\n        for (uint256 index = 0; index < _tokenids.length; index++) {\n            transferToStabilizer(_tokenids[index]);\n        }\n    }\n\n    function setBooster(uint256 _tokenId, Booster _booster) public onlyRedeemContract {\n        s.gems[_tokenId].booster = _booster;\n    }\n\n    function expire(uint256 _tokenId) public {\n        address _from = s.nft.owners[_tokenId];\n        address _to = s.config.wallets[uint(Wallets.Stabilizer)];\n        if ((uint32(block.timestamp) - s.gems[_tokenId].lastMaintenanceTime > s.config.maintenancePeriod * 2) &&\n            _from != _to) {\n            _beforeTokenTransfer(_from, _to, _tokenId);\n\n            // Clear approvals from the previous owner\n            _approve(address(0), _tokenId);\n\n            s.nft.balances[_from]--;\n            s.nft.balances[_to]++;\n            s.nft.owners[_tokenId] = _to;\n\n            emit ERC721Facet.Transfer(_from, _to, _tokenId);\n\n            _afterTokenTransfer(address(0), _to, _tokenId);\n        }\n    }\n\n    function batchExpire(uint256[] calldata _tokenIds) external {\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\n            expire(_tokenIds[index]);\n        }\n    }\n\n\n    function unExpire(uint256 _tokenId, address _to) public onlyRedeemContract {\n        address _from = s.config.wallets[uint(Wallets.Stabilizer)];\n        require(_from != _to, \"Can't unexpire to the same address\");\n        require(s.nft.owners[_tokenId] == _from, \"The token is not owned by stabilizer\");\n        _beforeTokenTransfer(_from, _to, _tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), _tokenId);\n\n        s.nft.balances[_from]--;\n        s.nft.balances[_to]++;\n        s.nft.owners[_tokenId] = _to;\n\n        emit ERC721Facet.Transfer(_from, _to, _tokenId);\n\n        _afterTokenTransfer(address(0), _to, _tokenId);\n    }\n\n    function adminFix(uint256 _tokenId, address _from, address _to) public onlyRedeemContract {\n        require(_from != _to, \"Can't unexpire to the same address\");\n        require(s.nft.owners[_tokenId] == _from, \"The token is not owned by the from address\");\n        _beforeTokenTransfer(_from, _to, _tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), _tokenId);\n\n        s.nft.balances[_from]--;\n        s.nft.balances[_to]++;\n        s.nft.owners[_tokenId] = _to;\n\n        emit ERC721Facet.Transfer(_from, _to, _tokenId);\n\n        _afterTokenTransfer(address(0), _to, _tokenId);\n    }\n\n\n    function getBooster(address _to, uint8 _gemType, Booster _booster) public view returns (uint256) {\n        return s.usersNextGemBooster[_to][_gemType][_booster];\n    }\n\n    function getGemInfo(uint256 _tokenId) external view returns (Gem memory) {\n        return s.gems[_tokenId];\n    }\n\n    function getGemIds() public view returns (uint256[] memory) {\n        address user = _msgSender();\n        return _getGemIds(user);\n    }\n\n    function getGemIdsOf(address _user) public view returns (uint256[] memory) {\n        return _getGemIds(_user);\n    }\n\n    function getGemsInfo() external view returns (uint256[] memory, Gem[] memory) {\n        uint256[] memory gemIds = getGemIds();\n        Gem[] memory gems = new Gem[](gemIds.length);\n        for (uint256 i = 0; i < gemIds.length; i++) {\n            gems[i] = s.gems[gemIds[i]];\n        }\n        return (gemIds, gems);\n    }\n\n    function isMintAvailable(uint8 _gemType) external view returns (bool) {\n        return LibMintLimiter.isMintAvailableForGem(_gemType);\n    }\n\n    function getMintWindow(uint8 _gemTypeId) external view returns (GemTypeMintWindow memory){\n        return LibMintLimiter.getCurrentMintWindow(_gemTypeId);\n    }\n\n\n    /* ============ Internal Functions ============ */\n\n    /// @dev mint only, no payment, covers yield gem related mint functions, minting itself and event firing is part of super contract from erc721-facet directory\n    function _mint(uint8 _gemType, address _to, Booster _booster) private returns (uint256) {\n        // mint and update the counter\n        uint256 tokenId = _safeMint(_to);\n        LibMintLimiter.updateMintCount(_gemType);\n        // save the gem\n        Gem memory gem;\n        gem.gemTypeId = _gemType;\n        gem.lastMaintenanceTime = uint32(block.timestamp);\n        gem.lastRewardWithdrawalTime = uint32(block.timestamp);\n        gem.mintTime = uint32(block.timestamp);\n        gem.booster = _booster;\n        s.gems[tokenId] = gem;\n        return tokenId;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721AutoIdMinterLimiterBurnableEnumerableFacet) {\n        require(!s.config.transferLock, \"Pausable: paused, transfer is locked\");\n        ITransferLimiter(address(this)).yieldGemTransferLimit(from, to, tokenId);\n        super._beforeTokenTransfer(from, to, tokenId);\n        if (from != address(0) && to != address(0)) {\n            Fi memory gemFi = s.gems[tokenId].fi;\n            s.usersFi[to].fiAdd(gemFi);\n            for (uint8 i = 0; i < s.gemTypes2.length; i++) {\n                s.usersNextGemBooster[to][i][Booster.Omega] = s.usersNextGemBooster[from][i][Booster.Omega];\n                s.usersNextGemBooster[to][i][Booster.Delta] = s.usersNextGemBooster[to][i][Booster.Delta];\n            }\n        }\n    }\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721AutoIdMinterLimiterBurnableEnumerableFacet) {\n        super._afterTokenTransfer(from, to, tokenId);\n        if (from != address(0)) {\n            Fi memory gemFi = s.gems[tokenId].fi;\n            s.usersFi[from].fiSubtract(gemFi);\n            for (uint8 i = 0; i < s.gemTypes2.length; i++) {\n                delete s.usersNextGemBooster[from][i][Booster.Omega];\n                delete s.usersNextGemBooster[from][i][Booster.Delta];\n            }\n        }\n    }\n}\n"
    },
    "@traderjoe-xyz/core/contracts/traderjoe/interfaces/IJoeERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IJoeERC20 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "@traderjoe-xyz/core/contracts/traderjoe/interfaces/IJoePair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IJoePair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/IYieldGem.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"../data-types/IDataTypes.sol\";\n\n/** @title  IYieldGem, EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice The Yield Gem Interface on top of the ERC721 standard,- minting, state and donation getters\n*/\ninterface IYieldGem {\n    /**\n    * @notice Mints a gem, requires appropriate balance of DEFO and DAI and also approvals granted to the diamond contract to spent them\n    * @param _gemTypeId gem type according to the enumeration, initially it's 0 for sapphire, 1 for ruby, 2 for diamond\n    */\n    function mint(uint8 _gemTypeId) external;\n\n    /**\n    * @notice For redeem usage\n    */\n\n    function mintTo(uint8 _gemType, address _to, Booster _booster) external;\n\n    function mintToFew(uint8 _gemType, address _to, Booster _booster, uint8 _number) external;\n\n    function mintToBulk(uint8[] calldata _gemType, address[] calldata _to, Booster[] calldata _booster, uint8[] calldata _number) external;\n\n    function createBooster(address _to, uint8 _gemType, Booster _booster) external;\n\n    function removeBooster(address _to, uint8 _gemType, Booster _booster) external;\n\n    function getBooster(address _to, uint8 _gemType, Booster _booster) external view returns (uint256);\n\n    function setBooster(uint256 _tokenId, Booster _booster) external;\n\n    function transferToStabilizer(uint256 _tokenId) external;\n\n    /**\n * @notice Get detailed status of the Gem, including financial details\n    * @param _tokenId gem Id\n    * @return Gem structure with all the details, excluding the gem type and protocol configuration, which is returned by IConfig facet\n    */\n    function getGemInfo(uint256 _tokenId) external view returns (Gem memory);\n\n    /**\n    * @notice Lists gem IDs the requester holds\n    * @return array with token Ids\n    */\n    function getGemIds() external view returns (uint256[] memory);\n\n    /**\n    * @notice Lists gem IDs of a user\n    * @param _user gemHolder to get gemsOf\n    * @return array with token Ids\n    */\n    function getGemIdsOf(address _user) external view returns (uint256[] memory);\n\n\n    /**\n    * @notice Get detailed status of all the yield gems the requester holds\n    * @return array of the Ids and array of the Gem structurs\n    */\n    function getGemsInfo() external view returns (uint256[] memory, Gem[] memory);\n\n    /**\n    * @notice Checks mint limitations which is both count limit and time limit and\n    * @return if the mint is available for the gem type\n    */\n    function isMintAvailable(uint8 _gemTypeId) external view returns (bool);\n\n    /**\n    * @notice mint count limitations details\n    * @return GemTypeMintWindow mint window structure\n    */\n    function getMintWindow(uint8 _gemTypeId) external view returns (GemTypeMintWindow memory);\n\n\n}\n"
    },
    "contracts/interfaces/IPresaleNode.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\ninterface IPresaleNode {\n    function mintNode() external;\n\n    function giveAwayMint() external;\n\n    function setMaxTotalDiamondNodes(uint64 _newNodeAmount) external;\n\n    function setSaleState() external;\n\n    ///@notice allows the owner to set the max amount of nodes one wallet can hold\n    function setMaxPerWallet(uint64 _newAmount) external;\n\n    function setBaseURI(string memory _tokenBaseURI) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function setTransferLock() external;\n\n    function addToWhitelist(address _whitelistedAddress) external;\n\n    function getPrice() external view returns (uint256);\n\n    function tokenByIndex(uint256 index) external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n}\n"
    },
    "contracts/interfaces/ITransferLimiter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\n/** @title  ILimiter, limiter for DEFO token transfer\n  * @author Decentralized Foundation Team\n*/\n\ninterface ITransferLimiter {\n    function yieldGemTransferLimit(\n        address to,\n        address from,\n        uint256 tokenId\n    ) external;\n\n    function DEFOTokenTransferLimit(\n        address to,\n        address from,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/erc721-facet/ERC721AutoIdMinterLimiterBurnableEnumerableFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"./ERC721EnumerableFacet.sol\";\nimport \"./ERC721BurnableFacet.sol\";\nimport \"./ERC721Facet.sol\";\n\n/** @title  ERC721MinterBurnableEnumerablePausableFacet EIP-2535 Diamond Facet, implements ERC721 with internal minting\n  * @author Decentralized Foundation Team\n  * @dev This is a reusable ERC721 preset to be used in the facet, prerequisites is s.nft structure in the AppStorage\n*/\ncontract ERC721AutoIdMinterLimiterBurnableEnumerableFacet is ERC721EnumerableFacet, ERC721BurnableFacet {\n    using Counters for Counters.Counter;\n\n    /* ============ Internal Functions ============ */\n\n    function _safeMint(address _to) internal returns (uint256 tokenId_) {\n        address sender = _msgSender();\n        tokenId_ = _mint(_to);\n        _checkOnERC721Received(sender, address(0), _to, tokenId_, \"\");\n    }\n\n    function _mint(address _to) internal returns (uint256 tokenId_)  {\n        tokenId_ = s.nft.tokenIdTracker.current();\n        _mint(_to, tokenId_);\n        s.nft.tokenIdTracker.increment();\n    }\n\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        s.nft.balances[to]++;\n        s.nft.owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721EnumerableFacet, ERC721Facet) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721EnumerableFacet, ERC721Facet) {\n        super._afterTokenTransfer(from, to, tokenId);\n    }\n\n\n}\n"
    },
    "contracts/libraries/LibMintLimiter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./LibAppStorage.sol\";\n\n// helper for limit daily mints\nlibrary LibMintLimiter {\n    event MintLocked();\n    event MintUnlocked();\n\n    /**\n    *   @notice checks if a gem is mintable\n    *   @param _gemTypeId type of a gem, initially it's 0,1,2 for sapphire, ruby, and diamond, respectively\n    *   @return true if mint is available, no revert\n    *   @dev checks mintLock config and daily mintcount limit\n    */\n    function isMintAvailableForGem(uint8 _gemTypeId) internal view returns (bool) {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        require(_gemTypeId < s.gemTypes2.length, \"Wrong gem type\");\n        GemTypeConfig memory gemType = s.gemTypes2[_gemTypeId];\n        GemTypeMintWindow memory gemTypeMintWindow = s.gemTypesMintWindows[_gemTypeId];\n\n        return !(s.config.mintLock) &&\n        //checking if the limit in the current mint window has not been reached yet\n        (((gemTypeMintWindow.mintCount < gemType.maxMintsPerLimitWindow) &&\n        (block.timestamp <= gemTypeMintWindow.endOfMintLimitWindow)) ||\n        //or we're already in another window ahead\n        (block.timestamp > gemTypeMintWindow.endOfMintLimitWindow));\n    }\n\n    function updateMintCount(uint8 _gemTypeId) internal {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        GemTypeMintWindow storage windowStorage = s.gemTypesMintWindows[_gemTypeId];\n        if (block.timestamp > windowStorage.endOfMintLimitWindow) {\n            //setting up new mint window\n            do {\n                windowStorage.endOfMintLimitWindow += s.config.mintLimitWindow;\n            }\n            while (block.timestamp > windowStorage.endOfMintLimitWindow);\n            windowStorage.mintCount = 0;\n        }\n        windowStorage.mintCount++;\n    }\n\n    function getCurrentMintWindow(uint8 _gemTypeId) internal view returns (GemTypeMintWindow memory) {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        require(_gemTypeId < s.gemTypes2.length, \"Wrong gem type\");\n        GemTypeMintWindow memory window = s.gemTypesMintWindows[_gemTypeId];\n        if (block.timestamp > window.endOfMintLimitWindow) {\n            //setting up new mint window\n            do {\n                window.endOfMintLimitWindow += s.config.mintLimitWindow;\n            }\n            while (block.timestamp > window.endOfMintLimitWindow);\n            window.mintCount = 0;\n        }\n        return window;\n    }\n\n\n    function lockMint() internal {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        s.config.mintLock = true;\n        emit MintLocked();\n    }\n\n    function unlockMint() internal {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        s.config.mintLock = false;\n        emit MintUnlocked();\n    }\n\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../extensions/ERC721Enumerable.sol\";\nimport \"../extensions/ERC721Burnable.sol\";\nimport \"../extensions/ERC721Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev {ERC721} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *  - token ID and URI autogeneration\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC721PresetMinterPauserAutoId is\n    Context,\n    AccessControlEnumerable,\n    ERC721Enumerable,\n    ERC721Burnable,\n    ERC721Pausable\n{\n    using Counters for Counters.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    Counters.Counter private _tokenIdTracker;\n\n    string private _baseTokenURI;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) ERC721(name, symbol) {\n        _baseTokenURI = baseTokenURI;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\n\n        // We cannot just use balanceOf to create the new tokenId because tokens\n        // can be burned (destroyed), so we need a separate counter.\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/erc721-facet/ERC721EnumerableFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"./ERC721Facet.sol\";\n\n/** @title  ERC721Facet EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice The Contract uses diamond storage providing functionality of ERC721Enumerable\n*/\ncontract ERC721EnumerableFacet is ERC721Facet {\n    //contract ERC721EnumerableFacet is ERC721Facet, IERC721Enumerable {\n\n    /* ============ External and Public Functions ============ */\n\n    function totalSupply() external view returns (uint256){\n        return s.nft.allTokens.length;\n    }\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256){\n        return _tokenOfOwnerByIndex(owner, index);\n    }\n\n    function tokenByIndex(uint256 index) external view returns (uint256){\n        require(index < s.nft.allTokens.length, \"ERC721Enumerable: global index out of bounds\");\n        return s.nft.allTokens[index];\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {}\n\n    function _tokenOfOwnerByIndex(address owner, uint256 index) internal view returns (uint256) {\n        require(index < _balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return s.nft.ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = _balanceOf(to);\n        s.nft.ownedTokens[to][length] = tokenId;\n        s.nft.ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        s.nft.allTokensIndex[tokenId] = s.nft.allTokens.length;\n        s.nft.allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _balanceOf(from) - 1;\n        uint256 tokenIndex = s.nft.ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = s.nft.ownedTokens[from][lastTokenIndex];\n\n            s.nft.ownedTokens[from][tokenIndex] = lastTokenId;\n            // Move the last token to the slot of the to-delete token\n            s.nft.ownedTokensIndex[lastTokenId] = tokenIndex;\n            // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete s.nft.ownedTokensIndex[tokenId];\n        delete s.nft.ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = s.nft.allTokens.length - 1;\n        uint256 tokenIndex = s.nft.allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = s.nft.allTokens[lastTokenIndex];\n\n        s.nft.allTokens[tokenIndex] = lastTokenId;\n        // Move the last token to the slot of the to-delete token\n        s.nft.allTokensIndex[lastTokenId] = tokenIndex;\n        // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete s.nft.allTokensIndex[tokenId];\n        s.nft.allTokens.pop();\n    }\n\n}\n"
    },
    "contracts/erc721-facet/ERC721BurnableFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./ERC721Facet.sol\";\n\n/** @title  ERC721Facet EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\n*/\ncontract ERC721BurnableFacet is ERC721Facet {\n\n    /* ============ External and Public Functions ============ */\n\n    function burn(uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _burn(tokenId);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _burn(uint256 tokenId) internal {\n        address owner = _ownerOf(tokenId);\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        s.nft.balances[owner]--;\n        delete s.nft.owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n}\n"
    },
    "contracts/erc721-facet/ERC721Facet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/interfaces/IERC721.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\nimport \"../base-facet/BaseFacet.sol\";\n\n/** @title  ERC721PausableFacet EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice The Contract uses diamond storage providing functionality of ERC721 token with metadata, uses AppStorage pattern inherited from FacetReady for ERC721 storage (s.nft)\n*/\ncontract ERC721Facet is BaseFacet {\n    //contract ERC721Facet is BaseFacet, ERC165, IERC721, IERC721Metadata {\n    /**\n    * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\n    using Strings for uint256;\n\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n    /* ============ Modifiers ============ */\n\n    modifier nftNotInitialized() {\n        require(!(s.nft.init), \"ERC721: already initialized\");\n        _;\n    }\n\n    modifier nftInitialized() {\n        require(s.nft.init, \"ERC721: not initialized\");\n        _;\n    }\n\n    /* ============ External and Public Functions ============ */\n\n    function initializeERC721Facet(string memory _name, string memory _symbol) onlyOwner nftNotInitialized public {\n        s.nft.name = _name;\n        s.nft.symbol = _symbol;\n        LibDiamond.DiamondStorage storage dsMain = LibDiamond.diamondStorage();\n        dsMain.supportedInterfaces[type(IERC721).interfaceId] = true;\n        dsMain.supportedInterfaces[type(IERC721Metadata).interfaceId] = true;\n        s.nft.init = true;\n    }\n\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes memory _data\n    ) public virtual {\n        address sender = _msgSender();\n        require(\n            _isApprovedOrOwner(sender, _tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _checkOnERC721Received(sender, _from, _to, _tokenId, _data);\n        _transfer(_from, _to, _tokenId);\n    }\n\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) public virtual {\n        safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external {\n        safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n\n    function approve(address _to, uint256 _tokenId) external {\n        address owner = _ownerOf(_tokenId);\n        require(_to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || _isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(_to, _tokenId);\n    }\n\n    function setApprovalForAll(address operator, bool _approved) external {\n        address owner = _msgSender();\n        require(owner != operator, \"ERC721: approve to caller\");\n        s.nft.operatorApprovals[owner][operator] = _approved;\n        emit ApprovalForAll(owner, operator, _approved);\n    }\n\n    function initialized() external view returns (bool) {\n        return s.nft.init;\n    }\n\n    function balanceOf(address _owner) external view nonZeroAddress(_owner) returns (uint256 balance) {\n        return s.nft.balances[_owner];\n    }\n\n    function ownerOf(uint256 _tokenId) external view returns (address) {\n        return _ownerOf(_tokenId);\n    }\n\n    function getApproved(uint256 _tokenId) external view returns (address operator){\n        return s.nft.tokenApprovals[_tokenId];\n    }\n\n    function isApprovedForAll(address owner, address operator) external view returns (bool){\n        return s.nft.operatorApprovals[owner][operator];\n    }\n\n    function name() public view virtual nftInitialized returns (string memory) {\n        return s.nft.name;\n    }\n\n    function symbol() public view virtual nftInitialized returns (string memory) {\n        return s.nft.symbol;\n    }\n\n    function tokenURI(uint256 _tokenId) public view virtual nftInitialized exists(_tokenId) returns (string memory) {\n        string memory baseURI = s.nft.baseURI;\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, _tokenId.toString())) : \"\";\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _transfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) internal {\n        require(_ownerOf(_tokenId) == _from, \"ERC721: transfer from incorrect owner\");\n        require(_to != address(0), \"ERC721: transfer to the zero address\");\n        _beforeTokenTransfer(_from, _to, _tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), _tokenId);\n\n        s.nft.balances[_from]--;\n        s.nft.balances[_to]++;\n        s.nft.owners[_tokenId] = _to;\n\n        emit Transfer(_from, _to, _tokenId);\n\n        _afterTokenTransfer(address(0), _to, _tokenId);\n    }\n\n    function _approve(address _to, uint256 _tokenId) internal {\n        s.nft.tokenApprovals[_tokenId] = _to;\n        emit Approval(_ownerOf(_tokenId), _to, _tokenId);\n    }\n\n    function _checkOnERC721Received(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes memory _data\n    ) internal {\n        uint256 size;\n        assembly {\n            size := extcodesize(_to)\n        }\n        if (size > 0) {\n            require(\n                ERC721_RECEIVED == IERC721Receiver(_to).onERC721Received(_operator, _from, _tokenId, _data),\n                \"DefoERC721Facet: Transfer rejected/failed by _to\"\n            );\n        }\n    }\n\n    function _isApprovedOrOwner(address _spender, uint256 _tokenId) internal view exists(_tokenId) returns (bool) {\n        address owner = _ownerOf(_tokenId);\n        return (_spender == owner || _isApprovedForAll(owner, _spender) || _getApproved(_tokenId) == _spender);\n    }\n\n    function _isApprovedForAll(address owner, address operator) internal view returns (bool) {\n        return s.nft.operatorApprovals[owner][operator];\n    }\n\n    function _ownerOf(uint256 _tokenId) internal view exists(_tokenId) returns (address) {\n        return s.nft.owners[_tokenId];\n    }\n\n    function _balanceOf(address owner) internal view nonZeroAddress(owner) returns (uint256) {\n        return s.nft.balances[owner];\n    }\n\n    function _getApproved(uint256 _tokenId) internal view exists(_tokenId) returns (address) {\n        return s.nft.tokenApprovals[_tokenId];\n    }\n\n    function _beforeTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) internal virtual {}\n\n    function _afterTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) internal virtual {}\n\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/IERC721Metadata.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\n"
    },
    "contracts/interfaces/IDEFODiamond.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./IConfig.sol\";\nimport \"./IYieldGem.sol\";\nimport \"./IDonations.sol\";\nimport \"./IMaintenance.sol\";\nimport \"./IRedeem.sol\";\nimport \"./IRewards.sol\";\nimport \"./ITransferLimiter.sol\";\nimport \"./IVault.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/** @title EIP-2535 Diamond Interface\n  * @author Decentralized Foundation Team\n  * @notice Combines all facets, used to generate single abi and a Typechain type for easy import\n*/\ninterface IDEFODiamond is IConfig, IYieldGem, IDonations, IMaintenance, IRedeem, IRewards, ITransferLimiter, IVault, IERC721 {\n}\n"
    },
    "contracts/interfaces/IConfig.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../data-types/IDataTypes.sol\";\n\n\n/** @title  IConfig EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice The Yield Gem Configuration, setters and getters\n*/\ninterface IConfig {\n    event ConfigurationChange(ProtocolConfig config);\n    event GemTypeConfigurationChange(GemTypeConfig _gemTypeConfig);\n\n    function setConfig(ProtocolConfig calldata _config) external;\n\n    function getConfig() external view returns (ProtocolConfig memory);\n\n    function setGemTypesConfig(GemTypeConfig[] calldata _gemTypesConfig) external;\n\n    function getGemTypesConfig() external view returns (GemTypeConfig[] memory);\n\n    function lockMint() external;\n\n    function unlockMint() external;\n\n    function pause() external;\n\n    function unpause() external;\n\n}\n"
    },
    "contracts/interfaces/IDonations.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/** @title  IYieldGem, EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice Donations Facet\n*/\ninterface IDonations {\n    event Donated(address indexed user, uint256 amount);\n\n    /**\n    *   @notice amount donated by the sender for all time\n    *   @return amount in DEFO (in wei precision)\n    */\n    function getTotalDonated() external view returns (uint256);\n    /**\n    *   @notice amount donated by a user for all time\n    *   @param _user user to query info for\n    *   @return amount in DEFO (in wei precision)\n    */\n    function getTotalDonatedOf(address _user) external view returns (uint256);\n\n    /**\n    *   @notice amount donated by all the users for all time\n    *   @return amount in DEFO (in wei precision)\n    */\n    function getTotalDonatedAllUsers() external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/IMaintenance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\n/** @title  IMaintenance EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice Maintenance interface: fee calculation, payment, events\n*/\ninterface IMaintenance {\n    event MaintenancePaid(address _user, uint256 _tokenId, uint256 _feeToPay);\n\n    /**\n    * @notice Pays for maintenance till block.timestamp, also allowing to pay for someone else since no check if a caller is the owner of the gem\n    * @param _tokenId gem Id\n    */\n    function maintain(uint256 _tokenId) external;\n\n    function batchMaintain(uint256[] calldata _tokenIds) external;\n\n    function getPendingMaintenanceFee(uint256 _tokenId) external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/IRedeem.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\n/** @title  IRedeem, a interface for stand-alone contract\n  * @author Decentralized Foundation Team\n  * @notice Redeem contract responsible for exchange of the pre-sold tokens to a real yield gems with benefits, not part of the Diamond Facet\n*/\n\ninterface IRedeem {\n    /**\n    *   @notice this function should be called by a pre-sold gem owner, as a result, yeild gems and boosters should be available in the dapp\n    */\n    function redeem() external;\n}\n"
    },
    "contracts/interfaces/IRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../data-types/IDataTypes.sol\";\n\n/** @title  IYieldGem EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice Rewards Interface, operation with rewards: taxation, charity, claiming and putting to the vault\n*/\ninterface IRewards {\n    event Claimed(address indexed user, uint256 amountGross, uint256 amountNet);\n    event Staked(address indexed user, uint256 amountGross, uint256 amountNet);\n\n    function claimReward(uint256 _tokenId) external;\n\n    function batchClaimReward(uint256[] calldata _tokenids) external;\n\n    ///todo decide whether move this to the vault facet or not - (to keep all staking/unstaking in one place), or to leave it here (this is a facet working with rewards  which can be either claimed or staked)\n    function stakeReward(uint256 _tokenId, uint256 _amount) external;\n\n    /**\n*   @notice This is used for the Vault Strategy, it puts the percent of all rewards to the vault and claims the rest\n    *   @param _tokenId unique NFT gem id\n    *   @param _percent percent of what to put into the vault, as usual uses PRECISION_MULTIPLIER (which is 100 by defualt, e.g. 500 for 5%)\n    */\n    function stakeAndClaim(uint256 _tokenId, uint256 _percent) external;\n\n    function batchStakeReward(uint256[] calldata _tokenIds, uint256[] calldata _amounts) external;\n\n    function batchStakeAndClaim(uint256[] calldata _tokenIds, uint256 _percent) external;\n\n    /**\n*   @notice reward earned by the sender to the moment ready to be claimed or put to vault\n    *   @param _tokenId unique NFT gem id\n    *   @return pre-tax unclaimed reward in DEFO,- before deducting tax or charity, ready to be claimed or put to vault\n    */\n    function getRewardAmount(uint256 _tokenId) external view returns (uint256);\n\n    /**\n*   @notice checks if rewards can be claimed or not\n    *   @param _tokenId unique NFT gem id\n    *   @return true or false, checks for the pending maintenance and time passed since last claim\n    */\n    function isClaimable(uint256 _tokenId) external view returns (bool);\n\n    /**\n    *   @notice amount of pre-taxed total reward earned by the sender for all time\n    *   @return amount in DEFO (in wei precision)\n    */\n    function getCumulatedReward() external view returns (uint256);\n\n    /**\n    *   @notice amount of pre-taxed total reward earned by all the users for all time\n    *   @return amount in DEFO (in wei precision)\n    */\n    function getCumulatedRewardAllUsers() external view returns (uint256);\n\n\n    /**\n    *   @notice amount of pre-taxed reward that are currently in the vault for the sender, so if put and then taken from the vault, it's not the return of the function\n    *   @return total amount in DEFO (in wei precision)\n    */\n    function getStakedGross() external view returns (uint256);\n\n    /**\n    *   @notice amount of pre-taxed reward that are currently in the vault for all users, it's not equal to the after-tax amount in the vault\n    *   @return total amount in DEFO (in wei precision)\n    */\n    function getStakedGrossAllUsers() external view returns (uint256);\n\n    /**\n    *   @notice gets tax tier for a gem\n    *   @param _tokenId unique NFT gem id\n    *   @return current tax tier of the gem might be configurable, now it's a number in the range starting from 0 when 0 means nothing is payed out since there's no rewards in the first week, 4 is no tax, 1,2,3 - % in between (currently 30,30,15)\n    */\n    function getTaxTier(uint256 _tokenId) external view returns (TaxTiers);\n\n\n}\n"
    },
    "contracts/token/DEFOToken.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"../interfaces/ITransferLimiter.sol\";\n\n/** @title  DEFO Token\n  * @author Decentralized Foundation Team\n  * @notice ERC20 with Dai-like gas-less approvals with EIP712 signatures, admin access, black lists, burnable, pausable, and recoverable if tokens are mistakely sent\n*/\n\ncontract DEFOToken is Pausable, IERC20, IERC20Metadata {\n    ITransferLimiter transferLimiter;\n\n    mapping(address => uint256) private _balances;\n\n    // @notice Admins list\n    mapping(address => uint256) public wards;\n\n    // @notice Blacklist\n    mapping(address => bool) public blacklist;\n\n    // --- ERC20 Data ---\n    string public constant name = \"DEFO Token\";\n    string public constant symbol = \"DEFO\";\n    string public constant version = \"1\";\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply;\n    bool public initialized;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    mapping(address => uint256) public nonces;\n\n\n    // --- EIP712 niceties ---\n    bytes32 public DOMAIN_SEPARATOR;\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n\n    /* ============ External and Public Functions ============ */\n\n    modifier auth() {\n        require(wards[_msgSender()] == 1, \"DEFOToken:not-authorized\");\n        _;\n    }\n\n    function initialize(uint256 _chainId) external {\n        if (!initialized) {\n            initialized = true;\n            wards[_msgSender()] = 1;\n            DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(bytes(version)),\n                    _chainId,\n                    address(this)\n                )\n            );\n        }\n    }\n\n    constructor(uint256 _chainId) {\n    }\n\n    // --- Token ---\n\n    function transfer(address dst, uint256 wad) external returns (bool) {\n        return transferFrom(_msgSender(), dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) public returns (bool) {\n        require(!paused(), \"DEFOToken:paused\");\n        require(balanceOf[src] >= wad, \"DEFOToken:insufficient-balance\");\n        require(!blacklist[src] && !blacklist[dst], \"DEFOToken:blacklisted\");\n        if (wards[_msgSender()] != 1 && wards[src] != 1 && address(transferLimiter) != address(0))\n            transferLimiter.DEFOTokenTransferLimit(src, dst, wad);\n        if (src != _msgSender() && allowance[src][_msgSender()] != type(uint256).max) {\n            require(allowance[src][_msgSender()] >= wad, \"DEFOToken:insufficient-allowance\");\n            allowance[src][_msgSender()] = sub(allowance[src][_msgSender()], wad);\n        }\n        balanceOf[src] = sub(balanceOf[src], wad);\n        balanceOf[dst] = add(balanceOf[dst], wad);\n        emit Transfer(src, dst, wad);\n        return true;\n    }\n\n\n    function burn(address usr, uint256 wad) external {\n        require(balanceOf[usr] >= wad, \"DEFOToken:insufficient-balance\");\n        if (usr != _msgSender() && allowance[usr][_msgSender()] != type(uint256).max) {\n            require(allowance[usr][_msgSender()] >= wad, \"DEFOToken:insufficient-allowance\");\n            allowance[usr][_msgSender()] = sub(allowance[usr][_msgSender()], wad);\n        }\n        balanceOf[usr] = sub(balanceOf[usr], wad);\n        totalSupply = sub(totalSupply, wad);\n        emit Transfer(usr, address(0), wad);\n    }\n\n    function approve(address usr, uint256 wad) external returns (bool) {\n        allowance[_msgSender()][usr] = wad;\n        emit Approval(_msgSender(), usr, wad);\n        return true;\n    }\n\n    // --- Approve by signature ---\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed))\n            )\n        );\n\n        require(holder != address(0), \"DEFOToken:invalid-address-0\");\n        require(holder == ecrecover(digest, v, r, s), \"DEFOToken:invalid-permit\");\n        require(expiry == 0 || block.timestamp <= expiry, \"DEFOToken:permit-expired\");\n        require(nonce == nonces[holder]++, \"DEFOToken:invalid-nonce\");\n        uint256 wad = allowed ? type(uint256).max : 0;\n        allowance[holder][spender] = wad;\n        emit Approval(holder, spender, wad);\n    }\n\n    /* ============ External and Public Admin Functions ============ */\n\n    function linkDiamond(ITransferLimiter _transferLimiter) external auth {\n        transferLimiter = _transferLimiter;\n    }\n\n    function mint(address usr, uint256 wad) external auth {\n        balanceOf[usr] = add(balanceOf[usr], wad);\n        totalSupply = add(totalSupply, wad);\n        emit Transfer(address(0), usr, wad);\n    }\n\n    // @notice Grant access\n    // @param guy admin to grant auth\n    function rely(address guy) external auth {\n        wards[guy] = 1;\n    }\n\n    // @notice Deny access\n    // @param guy deny auth for\n    function deny(address guy) external auth {\n        wards[guy] = 0;\n    }\n\n\n    // Recovering lost tokens and avax\n    function recoverLostDEFO(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) external auth {\n        IERC20(_token).transfer(_to, _amount);\n    }\n\n    function recoverLostAVAX(address _to) external auth {\n        payable(_to).transfer(address(this).balance);\n    }\n\n    function updateBlacklist(address _address, bool _allow) external auth {\n        blacklist[_address] = _allow;\n    }\n\n    function pause() external auth {\n        _pause();\n    }\n\n    function unpause() external auth {\n        _unpause();\n    }\n\n    function getLinkedDiamond() external view returns (ITransferLimiter) {\n        return transferLimiter;\n    }\n\n    function authorized(address guy) external view returns (bool) {\n        return wards[guy] == 1;\n    }\n    /* ============ Internal Functions ============ */\n\n    // --- Math ---\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/facets/TransferLimitFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../data-types/IDataTypes.sol\";\nimport \"../interfaces/ITransferLimiter.sol\";\nimport \"../interfaces/IRewards.sol\";\nimport \"../base-facet/BaseFacet.sol\";\n\n/** @title  ERC721Facet EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\n*/\ncontract TransferLimitFacet is BaseFacet, ITransferLimiter {\n    /* ============ External and Public Functions ============ */\n    ///todo refactor transfer limiting operations to this facet\n    function yieldGemTransferLimit(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public {\n        if (from != address(0) && to != address(0) && s.config.wallets[uint(Wallets.RedeemContract)] != _msgSender())\n            require(to == s.config.wallets[uint(Wallets.Stabilizer)] || from == s.config.wallets[uint(Wallets.Stabilizer)] ||\n            to == s.config.wallets[uint(Wallets.Treasury)] || from == s.config.wallets[uint(Wallets.Treasury)],\n                \"DEFO Node: it's not possible to transfer gems\");\n    }\n\n    function DEFOTokenTransferLimit(\n        address from,\n        address to,\n        uint256 amount\n    ) public {\n        require(to != s.config.wallets[uint(Wallets.Vault)], \"DEFO Token: not possible to send directly to vault\");\n        if (to == s.config.wallets[uint(Wallets.LiquidityPair)]) {\n            uint256 endOfLimitWindow = s.defoTokenLimitWindow.timeOfLastSale[from] + s.config.defoTokenLimitConfig.saleLimitPeriod;\n            require(\n                (s.defoTokenLimitWindow.tokensSold[from] + amount <= s.config.defoTokenLimitConfig.saleLimitAmount) || (block.timestamp > endOfLimitWindow),\n                \"DEFOToken:transfer-limit\"\n            );\n            if (block.timestamp > endOfLimitWindow)\n                s.defoTokenLimitWindow.tokensSold[from] = amount;\n            else\n                s.defoTokenLimitWindow.tokensSold[from] += amount;\n            s.defoTokenLimitWindow.timeOfLastSale[from] = block.timestamp;\n\n            if (s.config.defoTokenLimitConfig.limitByReward) {\n                uint256[] memory gemIds = _getGemIds(from);\n                require(gemIds.length > 0, \"DEFOTransferLimit:no-gems-owned\");\n                uint256 allowedSellAmount = 0;\n                for (uint256 i = 0; i < gemIds.length; i++) {\n                    allowedSellAmount += IRewards(address(this)).getRewardAmount(gemIds[i]);\n                    allowedSellAmount += s.gems[gemIds[i]].fi.claimedGross;\n                }\n                allowedSellAmount -= s.defoTokenLimitPerRewards.tokensSold[from];\n                s.defoTokenLimitPerRewards.tokensSold[from] += amount;\n                require(amount <= allowedSellAmount, \"DEFOTransferLimit: only total rewards earned are allowed for sale\");\n            }\n\n        }\n    }\n\n}\n"
    },
    "contracts/facets/RewardsFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../data-types/IDataTypes.sol\";\nimport \"../interfaces/IRewards.sol\";\nimport \"../interfaces/IDEXRouter02.sol\";\nimport \"../base-facet/BaseFacet.sol\";\nimport \"../libraries/LibDonations.sol\";\nimport \"../libraries/LibMaintainer.sol\";\nimport \"../libraries/PercentHelper.sol\";\nimport \"../libraries/BoosterHelper.sol\";\nimport \"../libraries/PeriodicHelper.sol\";\nimport \"../libraries/TimeHelper.sol\";\nimport \"../libraries/TaxHelper.sol\";\nimport \"../libraries/FiHelper.sol\";\n\n/** @title  ERC721Facet EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\n*/\ncontract RewardsFacet is BaseFacet, IRewards {\n    using FiHelper for Fi;\n    using BoosterHelper for Booster;\n\n    /* ====================== Modifiers ====================== */\n    modifier onlyClaimable(uint256 _tokenId) {\n        require(isClaimable(_tokenId), \"Not claimable\");\n        _;\n    }\n\n    /* ============ External and Public Functions ============ */\n    function claimReward(uint256 _tokenId) public onlyGemHolder(_tokenId) onlyClaimable(_tokenId) {\n        _claimRewardAmount(_tokenId, getRewardAmount(_tokenId));\n    }\n\n    function batchClaimReward(uint256[] calldata _tokenids) external {\n        for (uint256 index = 0; index < _tokenids.length; index++) {\n            claimReward(_tokenids[index]);\n        }\n    }\n\n    function stakeReward(uint256 _tokenId, uint256 _amount) onlyGemHolder(_tokenId) exists(_tokenId) public {\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\n        address[WALLETS] storage wallets = s.config.wallets;\n        address user = _msgSender();\n        Fi memory op;\n\n        require(_amount > 0, \"Zero rewards for a gem\");\n        uint256 rewardGross = getRewardAmount(_tokenId);\n        require(_amount <= rewardGross, \"Not enough rewards\");\n\n        op.donated = PercentHelper.rate(_amount, s.config.charityContributionRate);\n        op.stakedGross = _amount;\n        op.stakedNet = _amount - op.donated;\n\n        _sellDefoAndDonate(op.donated);\n        emit LibDonations.Donated(user, op.donated);\n\n\n        defo.transferFrom(\n            wallets[uint(Wallets.RewardPool)],\n            wallets[uint(Wallets.Vault)],\n            op.stakedNet);\n        emit Staked(user, op.stakedGross, op.stakedNet);\n\n        op.updateStorage(_tokenId, user);\n    }\n\n    function stakeAndClaim(uint256 _tokenId, uint256 _percent) public onlyGemHolder(_tokenId) onlyClaimable(_tokenId) {\n        uint256 reward = getRewardAmount(_tokenId);\n        uint256 rewardToStake = PercentHelper.rate(reward, _percent);\n        stakeReward(_tokenId, rewardToStake);\n        claimReward(_tokenId);\n    }\n\n\n    function batchStakeReward(uint256[] calldata _tokenIds, uint256[] calldata _amounts) external {\n        require(_tokenIds.length == _amounts.length, \"DEFORewards:_tokendIds-_amounts-inconsistent\");\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            stakeReward(_tokenIds[i], _amounts[i]);\n        }\n    }\n\n    function batchStakeAndClaim(uint256[] calldata _tokenIds, uint256 _percent) external {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            stakeAndClaim(_tokenIds[i], _percent);\n        }\n    }\n\n    function getRewardAmount(uint256 _tokenId) public exists(_tokenId) view returns (uint256) {\n        uint256 rewardToDate = _getCumulatedRewardAmountGross(_tokenId);\n        rewardToDate += s.gems[_tokenId].fi.unStakedNet;\n        rewardToDate -= s.gems[_tokenId].fi.claimedGross;\n        rewardToDate -= s.gems[_tokenId].fi.stakedGross;\n        return rewardToDate;\n    }\n\n    function isClaimable(uint256 _tokenId) public view returns (bool) {\n        return (\n        TimeHelper.hasPassedFromOrNotHappenedYet(s.gems[_tokenId].lastRewardWithdrawalTime, s.config.rewardPeriod) &&\n        LibMaintainer._getPendingMaintenanceFee(_tokenId) == 0 &&\n        getRewardAmount(_tokenId) != 0);\n    }\n\n    function getCumulatedReward() external view returns (uint256) {\n        address user = _msgSender();\n        uint256[] memory gemIds = _getGemIds(user);\n        uint256 reward = 0;\n        for (uint256 i = 0; i < gemIds.length; i++) {\n            reward += _getCumulatedRewardAmountGross(gemIds[i]);\n        }\n        return reward;\n    }\n\n    function getCumulatedRewardAllUsers() external view returns (uint256 allForAllTotalReward_) {\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\n            allForAllTotalReward_ += _getCumulatedRewardAmountGross(tokenId);\n        }\n    }\n\n\n    function getStakedGross() external view returns (uint256) {\n        return s.usersFi[_msgSender()].stakedGross - s.usersFi[_msgSender()].unStakedGrossUp;\n    }\n\n    function getStakedGrossAllUsers() external view returns (uint256) {\n        return s.total.stakedGross - s.total.unStakedGrossUp;\n    }\n\n    function getTaxTier(uint256 _tokenId) public view returns (TaxTiers) {\n        return TaxHelper.getTaxTier(uint32(block.timestamp) - s.gems[_tokenId].lastRewardWithdrawalTime);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _claimRewardAmount(uint256 _tokenId, uint256 _amount) private {\n        Gem storage gem = s.gems[_tokenId];\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\n        address[WALLETS] storage wallets = s.config.wallets;\n\n        require(_amount > 0, \"No amount to claim\");\n\n        Fi memory op;\n        op.claimedGross = _amount;\n\n        TaxTiers taxTier = getTaxTier(_tokenId);\n        op.claimTaxPaid = PercentHelper.rate(op.claimedGross, s.config.taxRates[uint256(taxTier)]);\n        op.donated = PercentHelper.rate(op.claimedGross, s.config.charityContributionRate);\n        op.claimedNet = op.claimedGross - op.claimTaxPaid - op.donated;\n\n        address user = _msgSender();\n        _sellDefoAndDonate(op.donated);\n        emit LibDonations.Donated(user, op.donated);\n\n        defo.transferFrom(\n            wallets[uint(Wallets.RewardPool)],\n            user,\n            op.claimedNet);\n        gem.lastRewardWithdrawalTime = uint32(block.timestamp);\n        emit Claimed(user, op.claimedGross, op.claimedNet);\n\n        op.updateStorage(_tokenId, user);\n    }\n\n\n    function _sellDefoAndDonate(uint256 _donationAmountDefo) private {\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\n        address[WALLETS] storage wallets = s.config.wallets;\n\n        defo.transferFrom(\n            wallets[uint(Wallets.RewardPool)],\n            address(this),\n            _donationAmountDefo);\n\n        address[] memory path1;\n        path1 = new address[](2);\n        path1[0] = address(s.config.paymentTokens[uint(PaymentTokens.Defo)]);\n        path1[1] = address(s.config.paymentTokens[uint(PaymentTokens.Dai)]);\n        IDEXRouter02(s.routerWallet).swapExactTokensForTokens(\n            _donationAmountDefo,\n            1,\n            path1,\n            wallets[uint(Wallets.Charity)],\n            block.timestamp);\n    }\n\n\n    function _getCumulatedRewardAmountGross(uint256 _tokenId) internal view returns (uint256) {\n        Gem memory gem = s.gems[_tokenId];\n        GemTypeConfig memory gemType = s.gemTypes2[gem.gemTypeId];\n        uint256 boostedRewardAmount = gem.booster.boostRewardsRate(gemType.rewardAmountDefo);\n        uint256 totalReward = PeriodicHelper.calculateTaperedReward(\n            block.timestamp - gem.mintTime, //period to calculate\n            gemType.taperRewardsThresholdDefo,\n            s.config.taperRate,\n            boostedRewardAmount,\n            s.config.rewardPeriod);\n        return totalReward;\n    }\n\n}\n"
    },
    "contracts/interfaces/IDEXRouter02.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\ninterface IDEXRouter02 {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/libraries/LibMaintainer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./LibAppStorage.sol\";\nimport \"./PercentHelper.sol\";\nimport \"./BoosterHelper.sol\";\nimport \"./PeriodicHelper.sol\";\n\n// helper for limit daily mints\nlibrary LibMaintainer {\n    function _getPendingMaintenanceFee(uint256 _tokenId) internal view returns (uint256) {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        Gem storage gem = s.gems[_tokenId];\n\n        // time period checks - if it's not necessary or too early\n        if (gem.lastMaintenanceTime >= block.timestamp)\n            return 0;\n        uint32 feePaymentPeriod = uint32(block.timestamp) - gem.mintTime;\n        //\"Too soon, maintenance fee has not been yet accrued\");\n        if (feePaymentPeriod <= s.config.maintenancePeriod)\n            return 0;\n        // amount calculation\n        uint256 discountedFeeDai = BoosterHelper.reduceMaintenanceFee(gem.booster, s.gemTypes2[gem.gemTypeId].maintenanceFeeDai);\n        uint256 feeAmount = PeriodicHelper.calculatePeriodicWithReductionTable(discountedFeeDai, s.maintenanceFeeReductionTable, gem.mintTime, s.config.maintenancePeriod);\n        //        uint256 feeAmount = PeriodicHelper.calculatePeriodic(discountedFeeDai, gem.mintTime, s.config.maintenancePeriod);\n        return feeAmount - gem.maintenanceFeePaid;\n    }\n\n}\n"
    },
    "contracts/facets/ConfigFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../interfaces/IConfig.sol\";\nimport \"../base-facet/BaseFacet.sol\";\nimport \"../libraries/LibAppStorage.sol\";\nimport \"../libraries/LibPauser.sol\";\nimport \"../libraries/LibMintLimiter.sol\";\nimport \"../libraries/PercentHelper.sol\";\n\n/** @title  ERC721Facet EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\n*/\ncontract ConfigFacet is BaseFacet, IConfig {\n\n    /* ============ External and Public Functions ============ */\n\n    function setConfig(ProtocolConfig calldata _config) external onlyOwner {\n        ProtocolConfig memory calldataToStorage = _config;\n        s.config = calldataToStorage;\n        emit ConfigurationChange(_config);\n    }\n\n    function setGemTypesConfig(GemTypeConfig[] calldata _gemTypeConfig) external onlyOwner {\n        // fill in the storage and reset mint limit window counter for every gem type\n        delete s.gemTypes2;\n        delete s.gemTypesMintWindows;\n        for (uint gemTypeId = 0; gemTypeId < _gemTypeConfig.length; gemTypeId++) {\n            GemTypeConfig memory cur = _gemTypeConfig[gemTypeId];\n            s.gemTypes2.push(cur);\n            GemTypeMintWindow memory initWindow = GemTypeMintWindow(0, uint32(block.timestamp));\n            s.gemTypesMintWindows.push(initWindow);\n        }\n    }\n\n    function setMaintenanceReductionTable(MaintenanceFeeReductionRecord[] calldata _maintenanceFeeReductionTable) external onlyOwner {\n        // fill in the storage and reset mint limit window counter for every gem type\n        delete s.maintenanceFeeReductionTable;\n        for (uint i = 0; i < _maintenanceFeeReductionTable.length; i++) {\n            MaintenanceFeeReductionRecord memory cur = _maintenanceFeeReductionTable[i];\n            s.maintenanceFeeReductionTable.push(cur);\n        }\n    }\n\n\n    function setConfigWallets(address[WALLETS] memory _wallets) external onlyOwner {\n        s.config.wallets = _wallets;\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\n        defo.approve(s.routerWallet, type(uint256).max);\n    }\n\n    function approveDefoForRouter(address _routerWallet) external onlyOwner {\n        s.routerWallet = _routerWallet;\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\n        defo.approve(s.routerWallet, type(uint256).max);\n    }\n\n    function setConfigIncomeDistributionOnMint(uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] memory _incomeDistributionOnMint) external onlyOwner {\n        s.config.incomeDistributionOnMint = _incomeDistributionOnMint;\n    }\n\n    function setConfigMaintenancePeriod(uint32 _maintenancePeriod) external onlyOwner {\n        s.config.maintenancePeriod = _maintenancePeriod;\n    }\n\n    function setConfigRewardPeriod(uint32 _rewardPeriod) external onlyOwner {\n        s.config.rewardPeriod = _rewardPeriod;\n    }\n\n    function setConfigTaxScaleSinceLastClaimPeriod(uint32 _taxScaleSinceLastClaimPeriod) external onlyOwner {\n        s.config.taxScaleSinceLastClaimPeriod = _taxScaleSinceLastClaimPeriod;\n    }\n\n    function setConfigTaxRates(uint256[TAX_TIERS] memory _taxRates) external onlyOwner {\n        s.config.taxRates = _taxRates;\n    }\n\n    function setCharityContributionRate(uint256 _charityContributionRate) external onlyOwner {\n        s.config.charityContributionRate = _charityContributionRate;\n    }\n\n    function setConfigVaultWithdrawalTaxRate(uint256 _vaultWithdrawalTaxRate) external onlyOwner {\n        s.config.vaultWithdrawalTaxRate = _vaultWithdrawalTaxRate;\n    }\n\n    function setConfigTaperRate(uint256 _taperRate) external onlyOwner {\n        s.config.taperRate = _taperRate;\n    }\n\n    function setConfigMintLimitWindow(uint32 _mintLimitWindow) external onlyOwner {\n        s.config.mintLimitWindow = _mintLimitWindow;\n    }\n\n    function setConfigDefoTokenLimitConfig(DefoTokenLimitConfig calldata _defoTokenLimitConfig) external onlyOwner {\n        DefoTokenLimitConfig memory temp = _defoTokenLimitConfig;\n        s.config.defoTokenLimitConfig = temp;\n    }\n\n    function lockMint() public onlyOwner {\n        LibMintLimiter.lockMint();\n    }\n\n    function unlockMint() public onlyOwner {\n        LibMintLimiter.unlockMint();\n    }\n\n    function pause() external onlyOwner {\n        LibPauser._pause();\n    }\n\n    function unpause() external onlyOwner {\n        LibPauser._unpause();\n    }\n\n\n    function getConfig() external view returns (ProtocolConfig memory) {\n        return s.config;\n    }\n\n    function getGemTypesConfig() external view returns (GemTypeConfig[] memory) {\n        return s.gemTypes2;\n    }\n\n    function getMaintenanceReductionTable() external view returns (MaintenanceFeeReductionRecord[] memory) {\n        return s.maintenanceFeeReductionTable;\n    }\n\n\n    function zeroMintCount(uint8 _gemTypeId) external onlyOwner {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        GemTypeMintWindow storage windowStorage = s.gemTypesMintWindows[_gemTypeId];\n        windowStorage.mintCount = 0;\n    }\n\n    function getTotals() external onlyOwner view returns (Fi memory)  {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        return s.total;\n    }\n\n    function getTotal(address _user) external onlyOwner view returns (Fi memory)  {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        return s.usersFi[_user];\n    }\n\n}\n"
    },
    "contracts/libraries/LibPauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./LibAppStorage.sol\";\n\n/**\n*   @notice Pausable contract\n*   @dev should start with  s.config.transferLock = false which is default\n*/\n\nlibrary LibPauser {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    function _paused() internal view returns (bool) {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        return s.config.transferLock;\n    }\n\n    function _requireNotPaused() internal view {\n        require(!_paused(), \"Pausable: paused, transfer is locked\");\n    }\n\n    function _requirePaused() internal view {\n        require(_paused(), \"Pausable: not paused\");\n    }\n\n    function _pause() internal whenNotPaused {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        s.config.transferLock = true;\n        emit Paused(msg.sender);\n    }\n\n    function _unpause() internal whenPaused {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        s.config.transferLock = false;\n        emit Unpaused(msg.sender);\n    }\n\n\n}\n"
    },
    "contracts/facets/MaintenanceFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../data-types/IDataTypes.sol\";\nimport \"../interfaces/IMaintenance.sol\";\nimport \"../libraries/LibMaintainer.sol\";\nimport \"../base-facet/BaseFacet.sol\";\n\n/** @title  ERC721Facet EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\n*/\ncontract MaintenanceFacet is BaseFacet, IMaintenance {\n\n    /* ============ External and Public Functions ============ */\n    function maintain(uint256 _tokenId) public {\n        address user = _msgSender();\n\n        uint256 feeAmount = getPendingMaintenanceFee(_tokenId);\n        require(feeAmount > 0, \"No maintenance fee accrued,- either already paid or to soon.\");\n\n        // payment\n        IERC20 dai = s.config.paymentTokens[uint(PaymentTokens.Dai)];\n        require(dai.balanceOf(user) > feeAmount, \"Not enough funds to pay\");\n        dai.transferFrom(user, s.config.wallets[uint(Wallets.Treasury)], feeAmount);\n\n        // data update\n        s.gems[_tokenId].lastMaintenanceTime = uint32(block.timestamp);\n        s.gems[_tokenId].maintenanceFeePaid += feeAmount;\n        emit MaintenancePaid(user, _tokenId, feeAmount);\n\n    }\n\n    function batchMaintain(uint256[] calldata _tokenIds) external {\n        for (uint256 index = 0; index < _tokenIds.length; index++) {\n            maintain(_tokenIds[index]);\n        }\n    }\n\n    function getPendingMaintenanceFee(uint256 _tokenId) public view returns (uint256) {\n        return LibMaintainer._getPendingMaintenanceFee(_tokenId);\n    }\n}\n"
    },
    "contracts/facets/DonationsFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../interfaces/IDonations.sol\";\nimport \"../base-facet/BaseFacet.sol\";\n\n/** @title  DonationsFacet EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice Donations Getter\n*/\ncontract DonationsFacet is BaseFacet, IDonations {\n\n    /* ============ External and Public Functions ============ */\n\n    function getTotalDonated() external view returns (uint256) {\n        return s.usersFi[_msgSender()].donated;\n    }\n\n    function getTotalDonatedOf(address _user) external view returns (uint256) {\n        return s.usersFi[_user].donated;\n    }\n\n    function getTotalDonatedAllUsers() external view returns (uint256) {\n        return s.total.donated;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 250
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "evmVersion": "berlin",
    "metadata": {
      "useLiteralContent": true
    }
  }
}