{
  "address": "0xE66df7CD2E76900902F2d40EA484139f9105C886",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DEFOTokenTransferLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "yieldGemTransferLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc08456a7d5b1e30101156680a9020a275458950f87fd61b87de6bd45db7a1f02",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe4704c3794F20d5479942b2733F769c54Ca37de7",
    "contractAddress": null,
    "transactionIndex": 5,
    "gasUsed": "450372",
    "logsBloom": "0x
    "blockHash": "0xfaa22c21080ee17f115a1aeebde06a108ea32503fccffa1173c39e38dba879d1",
    "transactionHash": "0xc08456a7d5b1e30101156680a9020a275458950f87fd61b87de6bd45db7a1f02",
    "logs": [],
    "blockNumber": 20769014,
    "cumulativeGasUsed": "1394785",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "3a4cd3c9fdd0f89f0007c4290696b172",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DEFOTokenTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"yieldGemTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Decentralized Foundation Team\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC721Facet EIP-2535 Diamond Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"yieldGemTransferLimit(address,address,uint256)\":{\"notice\":\"todo refactor transfer limiting operations to this facet\"}},\"notice\":\"The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/TransferLimitFacet.sol\":\"TransferLimitFacet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/base-facet/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n/**\\n * @title  BaseFacet\\n * @author Decentralized Foundation Team\\n * @notice BaseFacet is a base contract all facets to inherit, includes cross-facet utils and  common reusable functions for DEFO Diamond\\n */\\ncontract BaseFacet is Storage {\\n\\n    /* ====================== Modifiers ====================== */\\n\\n    modifier exists(uint256 _tokenId) {\\n        _requireExists(_tokenId);\\n        _;\\n    }\\n\\n    modifier onlyGemHolder(uint256 _tokenId) {\\n        require(s.nft.owners[_tokenId] == _msgSender(), \\\"You don't own this gem\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n    modifier nonZeroAddress(address _owner) {\\n        require(_owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        _;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _msgSender() internal override view returns (address sender_) {\\n        if (Context._msgSender() == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function _getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function _requireExists(uint256 _tokenId) internal view {\\n        require(_exists(_tokenId), \\\"ERC721: tokenId is not valid\\\");\\n    }\\n\\n    function _exists(uint256 _tokenId) internal view returns (bool) {\\n        return (s.nft.owners[_tokenId] != address(0));\\n    }\\n\\n    ///todo ensure passing memory array here to the public functions is pretty optimal\\n    function _getGemIds(address _user) internal view returns (uint256[] memory) {\\n        uint256 numberOfGems = s.nft.balances[_user];\\n        uint256[] memory gemIds = new uint256[](numberOfGems);\\n        for (uint256 i = 0; i < numberOfGems; i++) {\\n            uint256 gemId = s.nft.ownedTokens[_user][i];\\n            require(_exists(gemId), \\\"A gem doesn't exists\\\");\\n            gemIds[i] = gemId;\\n        }\\n        return gemIds;\\n    }\\n\\n    function _getAllUsers() internal view returns (address[] memory users_) {\\n        users_ = new address[](s.nft.allTokens.length);\\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\\n            users_[tokenId] = s.nft.owners[tokenId];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5ee18d83372dec082d66a9c61a88c6b5c034a741118da8be0524f9f1ed4f4b13\",\"license\":\"GPL-3.0\"},\"contracts/base-facet/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {AppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0x66f07eea1ae3a0fbf40fbf070d67bed29b4a0a2dfbb689f58292d28b5065418a\",\"license\":\"GPL-3.0\"},\"contracts/data-types/IDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n/**\\n*   @dev The only source for all the data structures used in the protocol storage\\n*   @dev This includes general config, gem type config, and mutable data\\n*/\\n\\n/// @dev number of payment tokens to enumerate the error, initially it's Defo and Dai,\\n/// @dev see PaymentTokens enum\\nuint256 constant PAYMENT_TOKENS = 2;\\n\\n/// @dev number of income recievers on yield gem mint\\nuint256 constant PAYMENT_RECEIVERS = 3;\\n\\n/// @dev total wallets on the protocol, see Wallets enum\\nuint256 constant WALLETS = 7;\\n\\n/// @dev total number of supported tax tiers\\nuint256 constant TAX_TIERS = 5;\\n\\n/**\\n*   @notice a struct for data compliance with erc721 standard\\n*   @param name Token name\\n*   @param symbol Token symbol\\n*   @param owners Mapping from token ID to owner address\\n*   @param balances Mapping owner address to token count\\n*   @param tokenApprovals Mapping from token ID to approved address\\n*   @param operatorApprovals Mapping from owner to operator approvals\\n*   @param ownedTokens Mapping from owner to list of owned token IDs\\n*   @param ownedTokensIndex Mapping from token ID to index of the owner tokens list\\n*   @param allTokens Array with all token ids, used for enumeration\\n*   @param allTokensIndex Mapping from token id to position in the allTokens array\\n*/\\n    struct ERC721Storage {\\n        string name;\\n        string symbol;\\n        Counters.Counter tokenIdTracker;\\n        mapping(uint256 => address) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n        string baseURI;\\n        mapping(address => mapping(uint256 => uint256)) ownedTokens;\\n        mapping(uint256 => uint256) ownedTokensIndex;\\n        uint256[] allTokens;\\n        mapping(uint256 => uint256) allTokensIndex;\\n        bool init;\\n    }\\n\\n\\n/// @notice token enum to index arrays of rates and addresses, the convention is that Dai is at place 0, Defo is at 1\\n/// @dev the order is extremely important once deployed\\n    enum PaymentTokens {\\n        Dai,\\n        Defo\\n    }\\n\\n/// @notice protocol wallets for easy enumeration,\\n/// @dev the order is extremely important once deployed, see configuration scripts\\n    enum Wallets {\\n        Treasury,\\n        RewardPool,\\n        LiquidityPair,\\n        Stabilizer,\\n        Charity,\\n        Vault,\\n        RedeemContract\\n    }\\n\\n\\n/// @notice these tiers correspond to the configurable percentage from the diamond storage\\n    enum TaxTiers {\\n        Tier0NoPayment,\\n        Tier1HugeTax,\\n        Tier2MediumTax,\\n        Tier3SmallTax,\\n        Tier4NoTax\\n    }\\n\\n/**\\n * @notice DefoTokenLimitConfig DEFO ERC20 Token transfer limiter, this is for the 1000 DEFO per 24h sale limitation, can be changes with setTransferLimit\\n * @param saleLimitPeriod initially 1 day\\n * @param saleLimitAmount initially 1000 tokens\\n*/\\n    struct DefoTokenLimitConfig {\\n        uint256 saleLimitPeriod;\\n        uint256 saleLimitAmount;\\n        bool limitByReward;\\n    }\\n\\n/**\\n * @notice Main Protocol Configuration structure\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set, including no minting\\n     * @param incomeDistributionOnMint distribution of the payment among tokens in percent rates, all values use percentage multiplier (see percent helper), here addresses are from the Addresses\\n     * @param maintenancePeriod a period in seconds for maintenance fee accrual, initially one month\\n     * @param rewardPeriod a period in seconds for generating yield gem rewards, initially one week\\n     * @param mintCountResetPeriod a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs.\\n     * @param taxScaleSinceLastClaimPeriod a period in seconds for a tax scale to work out, initially one week\\n     * @param taxRates tax rates in percent (with percent multiplier, see percent helper contract), initially 30%, 30%, 15%, 0\\n     * @param charityContributionRate charity rate (w multiplier as all percent values in the project), initially 5%\\n     * @param vaultWithdrawalRate fee paid to withdraw amount from the vault back to the earned rewards, initially 10%\\n     * @param taperRate taper rate, initially 20%\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set\\n     * @param mintLimitWindow a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs, see GemTypeConfig.maxMintsPerLimitWindow\\n     */\\n\\n    struct ProtocolConfig {\\n        IERC20[PAYMENT_TOKENS] paymentTokens;\\n        address[WALLETS] wallets;\\n        uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] incomeDistributionOnMint;\\n        // time periods\\n        uint32 maintenancePeriod;\\n        uint32 rewardPeriod;\\n        uint32 taxScaleSinceLastClaimPeriod;\\n        // taxes and contributions\\n        uint256[TAX_TIERS] taxRates;\\n        uint256 charityContributionRate;\\n        uint256 vaultWithdrawalTaxRate;\\n        uint256 taperRate;\\n        // locks\\n        bool mintLock;\\n        bool transferLock;\\n        // mint limit period for coutner reset\\n        uint32 mintLimitWindow;\\n        DefoTokenLimitConfig defoTokenLimitConfig;\\n    }\\n\\n/**\\n * @notice A struct containing configuration details for gemType\\n     * @param maintenanceFee Maintenance fee in Dai for the node type, amount in wei per month\\n     * @param rewardAmountDefo Reward in DEFO for the node type, amount in wei per week\\n     * @param price Price in DEFO and DAI (in wei), respectively, according to the PaymentTokens enum\\n     * @param taperRewardsThresholdDefo Taper threshold, in wei, decreasing rate every given amount of rewards in DEFO\\n     * @param maxMintsPerLimitWindow number of gems, mint limit for a node type, see ProtocolConfig.mintLimitWindow\\n     */\\n    struct GemTypeConfig {\\n        uint256 maintenanceFeeDai;\\n        uint256 rewardAmountDefo;\\n        uint256[PAYMENT_TOKENS] price;\\n        uint256 taperRewardsThresholdDefo;\\n        uint256 maxMintsPerLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct containing current mutable status for gemType\\n     * @param mintCount counter incrementing by one on every mint, during mintCountResetPeriod; after mintCountResetPeriod with no mints, reset to 0\\n     * @param endOfMintLimitWindow a moment to reset the mintCount counter to zero, set the new endOfMintLimitWindow and start over\\n     */\\n    struct GemTypeMintWindow {\\n        uint256 mintCount;\\n        uint32 endOfMintLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct describing current DEFO Token limiter input\\n * @param tokensSold DEFO tokens sold per limit window, \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfLastSale time of last sale\\n     */\\n    struct DEFOTokenLimitWindow {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfLastSale;\\n    }\\n\\n/**\\n * @notice A struct describing DEFO Token limit per weekly rewards\\n * @param tokensSold DEFO tokens sold per reward period window starting from the first sale \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfWindowStart time of first sale in the window\\n     */\\n    struct DEFOTokenLimitPerRewards {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfWindowStart;\\n    }\\n\\n    enum Booster {\\n        None,\\n        Delta,\\n        Omega\\n    }\\n\\n/**\\n * @notice A struct describing financial state, provides the complete state for user, gem, or protocol total.\\n * @notice It gives the current exact balance of the Vault, Rewards, and Charity.\\n * @param claimedGross rewards amount previously claimed for all time, gross amount - before tax and charity\\n * @param claimedNet rewards claimed and to user, net amount after tax and charity\\n * @param stakedGross amount removed from rewards to stake, charity not yet deducted\\n * @param stakedNet amount put to the vault - charity has been deducted\\n * @param unStakedGross  amount removed from the vault, pre withdraw tax and charity\\n * @param unStakedGrossUpped  amount removed from the vault gross-upped with charity to equal to the stakedGross amount\\n * @param unStakedNet  amount returned to the earned rewards, post withdraw tax and charity\\n * @param donated sent to charity\\n * @param claimTaxPaid claim tax deducted - 30%, 15%, 15%\\n * @param vaultTaxPaid vault withdrawal tax deducted\\n     */\\n    struct Fi {\\n        uint256 claimedGross;\\n        uint256 claimedNet;\\n        uint256 stakedGross;\\n        uint256 stakedNet;\\n        uint256 unStakedGross;\\n        uint256 unStakedGrossUp;\\n        uint256 unStakedNet;\\n        uint256 donated;\\n        uint256 claimTaxPaid;\\n        uint256 vaultTaxPaid;\\n    }\\n\\n/**\\n * @notice current state of a gem, a gem is an instance with consistent yield and fee rates specified by the pair (gemType, booster)\\n * @param gemType node type, initially it's  0 -> Ruby , 1 -> Sapphire, 2 -> Diamond, and boosters\\n * @param booster node Booster 0 -> None , 1 -> Delta , 2 -> Omega\\n * @param mintTime timestamp of the mint time\\n * @param lastRewardWithdrawalTime timestamp of last reward claim OR stake. Same as mintTime if not yet claimed.\\n * @param lastMaintenanceTime timestamp of the last maintenance (could be a date in the future in case of the upfront payment)\\n * @param presold flag that this gem was bought on presale, used to avoid double minting\\n*/\\n    struct Gem {\\n        uint8 gemTypeId;\\n        Booster booster;\\n        uint32 mintTime;\\n        uint32 lastRewardWithdrawalTime;\\n        uint32 lastMaintenanceTime;\\n        Fi fi;\\n        bool presold;\\n    }\\n\\n/**\\n*   @notice Main Contract Storage utilizing App Storage pattern for Diamond Proxy data organization\\n*   @param config main configuration, basically everything except gemType specific\\n*   @param gemTypes supported gem types with their details, gemTypeId is the index of the array\\n*   @param gems mapping indexed by tokenId, where tokenId is in the nft.allTokens\\n*   @param gemTypesMintWindows windows for limiting yield gem mints per gem type\\n*   @param defoTokenLimitWindow window for limiting DEFO Token sale\\n*   @param nft ERC721 standard related storage\\n*   @param total cumulated amounts for all operations\\n*   @param usersFi financial info per each user\\n*   @param usersNextGemBooster used for presale, number (uint256) of boosters (Booster) with a type (uint8) left for a user (address)\\n*/\\n    struct AppStorage {\\n        // configuration\\n        ProtocolConfig config;\\n        GemTypeConfig[] gemTypes;\\n        // current state\\n        GemTypeMintWindow[] gemTypesMintWindows;\\n        DEFOTokenLimitWindow defoTokenLimitWindow;\\n        mapping(uint256 => Gem) gems;\\n        ERC721Storage nft;\\n        // Cumulations\\n        Fi total;\\n        // User data, users list is s.nft.owners, size s.nft.allTokens.length (managed by ERC721Enumerable)\\n        mapping(address => Fi) usersFi;\\n        mapping(address => mapping(uint8 => mapping(Booster => uint256))) usersNextGemBooster;\\n        DEFOTokenLimitPerRewards defoTokenLimitPerRewards;\\n    }\\n\",\"keccak256\":\"0xf50074fb6193948cd88f1a0cb1a469359d3496b31f52edc0aac2ca53643bab99\",\"license\":\"GPL-3.0\"},\"contracts/facets/TransferLimitFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\nimport \\\"../interfaces/ITransferLimiter.sol\\\";\\nimport \\\"../base-facet/BaseFacet.sol\\\";\\n\\n/** @title  ERC721Facet EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\\n*/\\ncontract TransferLimitFacet is BaseFacet, ITransferLimiter {\\n    /* ============ External and Public Functions ============ */\\n    ///todo refactor transfer limiting operations to this facet\\n    function yieldGemTransferLimit(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public {\\n        if (from != address(0) && to != address(0))\\n            require(to == s.config.wallets[uint(Wallets.Stabilizer)] || from == s.config.wallets[uint(Wallets.Stabilizer)],\\n                \\\"DEFO Node: it's not possible to transfer gems\\\");\\n    }\\n\\n    function DEFOTokenTransferLimit(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        require(to != s.config.wallets[uint(Wallets.Vault)], \\\"DEFO Token: not possible to send directly to vault\\\");\\n        if (to == s.config.wallets[uint(Wallets.LiquidityPair)]) {\\n            uint256 endOfLimitWindow = s.defoTokenLimitWindow.timeOfLastSale[from] + s.config.defoTokenLimitConfig.saleLimitPeriod;\\n            require(\\n                (s.defoTokenLimitWindow.tokensSold[from] + amount <= s.config.defoTokenLimitConfig.saleLimitAmount) || (block.timestamp > endOfLimitWindow),\\n                \\\"DEFOToken:transfer-limit\\\"\\n            );\\n            if (block.timestamp > endOfLimitWindow)\\n                s.defoTokenLimitWindow.tokensSold[from] = amount;\\n            else\\n                s.defoTokenLimitWindow.tokensSold[from] += amount;\\n            s.defoTokenLimitWindow.timeOfLastSale[from] = block.timestamp;\\n\\n            if (s.config.defoTokenLimitConfig.limitByReward) {\\n                uint256[] memory gemIds = _getGemIds(from);\\n                require(gemIds.length > 0, \\\"DEFOTransferLimit:no-gems-owned\\\");\\n                uint256 allowedSellAmount = 0;\\n                for (uint256 i = 0; i < gemIds.length; i++) {\\n                    uint8 gemTypeId = s.gems[gemIds[i]].gemTypeId;\\n                    allowedSellAmount += s.gemTypes[gemTypeId].rewardAmountDefo;\\n                }\\n                if (s.defoTokenLimitPerRewards.timeOfWindowStart[from] == 0 || s.defoTokenLimitPerRewards.timeOfWindowStart[from] + s.config.rewardPeriod < block.timestamp) {\\n                    s.defoTokenLimitPerRewards.tokensSold[from] = amount;\\n                    s.defoTokenLimitPerRewards.timeOfWindowStart[from] = block.timestamp;\\n                }\\n                else {\\n                    s.defoTokenLimitPerRewards.tokensSold[from] += amount;\\n                }\\n                require(s.defoTokenLimitPerRewards.tokensSold[from] <= allowedSellAmount, \\\"DEFOTransferLimit:total-rewards-per-week\\\");\\n            }\\n\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x3674acac2b61743ff12b3e4c2801cfb23505573a80eebc0f98f31c3f01392fd4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITransferLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\n/** @title  ILimiter, limiter for DEFO token transfer\\n  * @author Decentralized Foundation Team\\n*/\\n\\ninterface ITransferLimiter {\\n    function yieldGemTransferLimit(\\n        address to,\\n        address from,\\n        uint256 tokenId\\n    ) external;\\n\\n    function DEFOTokenTransferLimit(\\n        address to,\\n        address from,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa7741cdf7be9bb3980ef635519bf7eca4b51c951116f52735621b75c9314d278\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/** @title  LibAppStorage EIP-2535 Diamond Facet Storage\\n  * @author Decentralized Foundation Team\\n  * @notice This diamond storage library is inherited by all facets and imported in libraries\\n*/\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf2e84cec0bd10a28b47d23a086c1d77096efac4f3b3d6f1c132ebbe814c8b1d5\",\"license\":\"GPL-3.0\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061072b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637e5c923d1461003b578063cfc0443814610050575b600080fd5b61004e610049366004610646565b610063565b005b61004e61005e366004610646565b61011d565b6001600160a01b0383161580159061008357506001600160a01b03821615155b15610118576005546001600160a01b03838116911614806100b157506005546001600160a01b038481169116145b6101185760405162461bcd60e51b815260206004820152602d60248201527f4445464f204e6f64653a2069742773206e6f7420706f737369626c6520746f2060448201526c7472616e736665722067656d7360981b60648201526084015b60405180910390fd5b505050565b6007546001600160a01b03908116908316036101965760405162461bcd60e51b815260206004820152603260248201527f4445464f20546f6b656e3a206e6f7420706f737369626c6520746f2073656e6460448201527108191a5c9958dd1b1e481d1bc81d985d5b1d60721b606482015260840161010f565b6004546001600160a01b0390811690831603610118576019546001600160a01b0384166000908152601f602052604081205490916101d3916106ae565b601a546001600160a01b0386166000908152601e6020526040902054919250906101fe9084906106ae565b11158061020a57508042115b6102565760405162461bcd60e51b815260206004820152601860248201527f4445464f546f6b656e3a7472616e736665722d6c696d69740000000000000000604482015260640161010f565b8042111561027e576001600160a01b0384166000908152601e602052604090208290556102ac565b6001600160a01b0384166000908152601e6020526040812080548492906102a69084906106ae565b90915550505b6001600160a01b0384166000908152601f60205260409020429055601b5460ff16156104f75760006102dd856104fd565b905060008151116103305760405162461bcd60e51b815260206004820152601f60248201527f4445464f5472616e736665724c696d69743a6e6f2d67656d732d6f776e656400604482015260640161010f565b6000805b82518110156103c157600080602001600085848151811061035757610357610682565b602090810291909101810151825281019190915260400160002054601c805460ff9092169250908290811061038e5761038e610682565b906000526020600020906006020160010154836103ab91906106ae565b92505080806103b9906106c6565b915050610334565b506001600160a01b0386166000908152603b6020526040902054158061041b5750600f546001600160a01b0387166000908152603b602052604090205442916104199164010000000090910463ffffffff16906106ae565b105b1561044d576001600160a01b0386166000908152603a60209081526040808320879055603b909152902042905561047b565b6001600160a01b0386166000908152603a6020526040812080548692906104759084906106ae565b90915550505b6001600160a01b0386166000908152603a60205260409020548110156104f45760405162461bcd60e51b815260206004820152602860248201527f4445464f5472616e736665724c696d69743a746f74616c2d726577617264732d6044820152677065722d7765656b60c01b606482015260840161010f565b50505b50505050565b6001600160a01b0381166000908152602560205260408120546060918167ffffffffffffffff811115610532576105326106df565b60405190808252806020026020018201604052801561055b578160200160208202803683370190505b50905060005b82811015610622576001600160a01b03851660009081526029602090815260408083208484529091529020546105ae816000908152602460205260409020546001600160a01b0316151590565b6105f15760405162461bcd60e51b8152602060048201526014602482015273412067656d20646f65736e27742065786973747360601b604482015260640161010f565b8083838151811061060457610604610682565b6020908102919091010152508061061a816106c6565b915050610561565b509392505050565b80356001600160a01b038116811461064157600080fd5b919050565b60008060006060848603121561065b57600080fd5b6106648461062a565b92506106726020850161062a565b9150604084013590509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156106c1576106c1610698565b500190565b6000600182016106d8576106d8610698565b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212206af105dee86bc4f2fb14164bdc18a106146f9ea94ce05f82eb984020b40ab08d64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80637e5c923d1461003b578063cfc0443814610050575b600080fd5b61004e610049366004610646565b610063565b005b61004e61005e366004610646565b61011d565b6001600160a01b0383161580159061008357506001600160a01b03821615155b15610118576005546001600160a01b03838116911614806100b157506005546001600160a01b038481169116145b6101185760405162461bcd60e51b815260206004820152602d60248201527f4445464f204e6f64653a2069742773206e6f7420706f737369626c6520746f2060448201526c7472616e736665722067656d7360981b60648201526084015b60405180910390fd5b505050565b6007546001600160a01b03908116908316036101965760405162461bcd60e51b815260206004820152603260248201527f4445464f20546f6b656e3a206e6f7420706f737369626c6520746f2073656e6460448201527108191a5c9958dd1b1e481d1bc81d985d5b1d60721b606482015260840161010f565b6004546001600160a01b0390811690831603610118576019546001600160a01b0384166000908152601f602052604081205490916101d3916106ae565b601a546001600160a01b0386166000908152601e6020526040902054919250906101fe9084906106ae565b11158061020a57508042115b6102565760405162461bcd60e51b815260206004820152601860248201527f4445464f546f6b656e3a7472616e736665722d6c696d69740000000000000000604482015260640161010f565b8042111561027e576001600160a01b0384166000908152601e602052604090208290556102ac565b6001600160a01b0384166000908152601e6020526040812080548492906102a69084906106ae565b90915550505b6001600160a01b0384166000908152601f60205260409020429055601b5460ff16156104f75760006102dd856104fd565b905060008151116103305760405162461bcd60e51b815260206004820152601f60248201527f4445464f5472616e736665724c696d69743a6e6f2d67656d732d6f776e656400604482015260640161010f565b6000805b82518110156103c157600080602001600085848151811061035757610357610682565b602090810291909101810151825281019190915260400160002054601c805460ff9092169250908290811061038e5761038e610682565b906000526020600020906006020160010154836103ab91906106ae565b92505080806103b9906106c6565b915050610334565b506001600160a01b0386166000908152603b6020526040902054158061041b5750600f546001600160a01b0387166000908152603b602052604090205442916104199164010000000090910463ffffffff16906106ae565b105b1561044d576001600160a01b0386166000908152603a60209081526040808320879055603b909152902042905561047b565b6001600160a01b0386166000908152603a6020526040812080548692906104759084906106ae565b90915550505b6001600160a01b0386166000908152603a60205260409020548110156104f45760405162461bcd60e51b815260206004820152602860248201527f4445464f5472616e736665724c696d69743a746f74616c2d726577617264732d6044820152677065722d7765656b60c01b606482015260840161010f565b50505b50505050565b6001600160a01b0381166000908152602560205260408120546060918167ffffffffffffffff811115610532576105326106df565b60405190808252806020026020018201604052801561055b578160200160208202803683370190505b50905060005b82811015610622576001600160a01b03851660009081526029602090815260408083208484529091529020546105ae816000908152602460205260409020546001600160a01b0316151590565b6105f15760405162461bcd60e51b8152602060048201526014602482015273412067656d20646f65736e27742065786973747360601b604482015260640161010f565b8083838151811061060457610604610682565b6020908102919091010152508061061a816106c6565b915050610561565b509392505050565b80356001600160a01b038116811461064157600080fd5b919050565b60008060006060848603121561065b57600080fd5b6106648461062a565b92506106726020850161062a565b9150604084013590509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156106c1576106c1610698565b500190565b6000600182016106d8576106d8610698565b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212206af105dee86bc4f2fb14164bdc18a106146f9ea94ce05f82eb984020b40ab08d64736f6c634300080f0033",
  "devdoc": {
    "author": "Decentralized Foundation Team",
    "kind": "dev",
    "methods": {},
    "title": "ERC721Facet EIP-2535 Diamond Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "yieldGemTransferLimit(address,address,uint256)": {
        "notice": "todo refactor transfer limiting operations to this facet"
      }
    },
    "notice": "The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4283,
        "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4537_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)7_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[7]",
        "numberOfBytes": "224"
      },
      "t_array(t_array(t_uint256)3_storage)2_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][2]",
        "numberOfBytes": "192"
      },
      "t_array(t_contract(IERC20)737)2_storage": {
        "base": "t_contract(IERC20)737",
        "encoding": "inplace",
        "label": "contract IERC20[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(GemTypeConfig)4429_storage)dyn_storage": {
        "base": "t_struct(GemTypeConfig)4429_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GemTypeMintWindow)4434_storage)dyn_storage": {
        "base": "t_struct(GemTypeMintWindow)4434_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeMintWindow[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)737": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Booster)4456": {
        "encoding": "inplace",
        "label": "enum Booster",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => mapping(enum Booster => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256))"
      },
      "t_mapping(t_address,t_struct(Fi)4477_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Fi)",
        "numberOfBytes": "32",
        "value": "t_struct(Fi)4477_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Booster)4456,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Booster)4456",
        "label": "mapping(enum Booster => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Gem)4494_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gem)",
        "numberOfBytes": "32",
        "value": "t_struct(Gem)4494_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(enum Booster => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Booster)4456,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4537_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4497,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "config",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ProtocolConfig)4416_storage"
          },
          {
            "astId": 4501,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "gemTypes",
            "offset": 0,
            "slot": "28",
            "type": "t_array(t_struct(GemTypeConfig)4429_storage)dyn_storage"
          },
          {
            "astId": 4505,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "gemTypesMintWindows",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_struct(GemTypeMintWindow)4434_storage)dyn_storage"
          },
          {
            "astId": 4508,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "defoTokenLimitWindow",
            "offset": 0,
            "slot": "30",
            "type": "t_struct(DEFOTokenLimitWindow)4443_storage"
          },
          {
            "astId": 4513,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "gems",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_uint256,t_struct(Gem)4494_storage)"
          },
          {
            "astId": 4516,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "nft",
            "offset": 0,
            "slot": "33",
            "type": "t_struct(ERC721Storage)4351_storage"
          },
          {
            "astId": 4519,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "total",
            "offset": 0,
            "slot": "46",
            "type": "t_struct(Fi)4477_storage"
          },
          {
            "astId": 4524,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "usersFi",
            "offset": 0,
            "slot": "56",
            "type": "t_mapping(t_address,t_struct(Fi)4477_storage)"
          },
          {
            "astId": 4533,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "usersNextGemBooster",
            "offset": 0,
            "slot": "57",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256)))"
          },
          {
            "astId": 4536,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "defoTokenLimitPerRewards",
            "offset": 0,
            "slot": "58",
            "type": "t_struct(DEFOTokenLimitPerRewards)4452_storage"
          }
        ],
        "numberOfBytes": "1920"
      },
      "t_struct(Counter)2737_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2736,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DEFOTokenLimitPerRewards)4452_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitPerRewards",
        "members": [
          {
            "astId": 4447,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4451,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "timeOfWindowStart",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DEFOTokenLimitWindow)4443_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitWindow",
        "members": [
          {
            "astId": 4438,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4442,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "timeOfLastSale",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefoTokenLimitConfig)4375_storage": {
        "encoding": "inplace",
        "label": "struct DefoTokenLimitConfig",
        "members": [
          {
            "astId": 4370,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "saleLimitPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4372,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "saleLimitAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4374,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "limitByReward",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ERC721Storage)4351_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage",
        "members": [
          {
            "astId": 4306,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4308,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4311,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "tokenIdTracker",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Counter)2737_storage"
          },
          {
            "astId": 4315,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "owners",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4319,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "balances",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4323,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "tokenApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4329,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "operatorApprovals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 4331,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4337,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "ownedTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 4341,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "ownedTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4344,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "allTokens",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4348,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "allTokensIndex",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4350,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "init",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Fi)4477_storage": {
        "encoding": "inplace",
        "label": "struct Fi",
        "members": [
          {
            "astId": 4458,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "claimedGross",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4460,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "claimedNet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4462,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "stakedGross",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4464,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "stakedNet",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4466,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "unStakedGross",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4468,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "unStakedGrossUp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4470,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "unStakedNet",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4472,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "donated",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4474,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "claimTaxPaid",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4476,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "vaultTaxPaid",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Gem)4494_storage": {
        "encoding": "inplace",
        "label": "struct Gem",
        "members": [
          {
            "astId": 4479,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "gemTypeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4482,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "booster",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Booster)4456"
          },
          {
            "astId": 4484,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "mintTime",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4486,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "lastRewardWithdrawalTime",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4488,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "lastMaintenanceTime",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4491,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "fi",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Fi)4477_storage"
          },
          {
            "astId": 4493,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "presold",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(GemTypeConfig)4429_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeConfig",
        "members": [
          {
            "astId": 4418,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "maintenanceFeeDai",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4420,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "rewardAmountDefo",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4424,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 4426,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "taperRewardsThresholdDefo",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4428,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "maxMintsPerLimitWindow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(GemTypeMintWindow)4434_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeMintWindow",
        "members": [
          {
            "astId": 4431,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "mintCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4433,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "endOfMintLimitWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProtocolConfig)4416_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolConfig",
        "members": [
          {
            "astId": 4380,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "paymentTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20)737)2_storage"
          },
          {
            "astId": 4384,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "wallets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)7_storage"
          },
          {
            "astId": 4390,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "incomeDistributionOnMint",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_array(t_uint256)3_storage)2_storage"
          },
          {
            "astId": 4392,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "maintenancePeriod",
            "offset": 0,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4394,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "rewardPeriod",
            "offset": 4,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4396,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "taxScaleSinceLastClaimPeriod",
            "offset": 8,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4400,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "taxRates",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_uint256)5_storage"
          },
          {
            "astId": 4402,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "charityContributionRate",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 4404,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "vaultWithdrawalTaxRate",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 4406,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "taperRate",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 4408,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "mintLock",
            "offset": 0,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4410,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "transferLock",
            "offset": 1,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4412,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "mintLimitWindow",
            "offset": 2,
            "slot": "24",
            "type": "t_uint32"
          },
          {
            "astId": 4415,
            "contract": "contracts/facets/TransferLimitFacet.sol:TransferLimitFacet",
            "label": "defoTokenLimitConfig",
            "offset": 0,
            "slot": "25",
            "type": "t_struct(DefoTokenLimitConfig)4375_storage"
          }
        ],
        "numberOfBytes": "896"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}