{
  "address": "0xdACf23425E4F4813314431e8A2d547aDF8205Fe1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20[2]",
              "name": "paymentTokens",
              "type": "address[2]"
            },
            {
              "internalType": "address[7]",
              "name": "wallets",
              "type": "address[7]"
            },
            {
              "internalType": "uint256[3][2]",
              "name": "incomeDistributionOnMint",
              "type": "uint256[3][2]"
            },
            {
              "internalType": "uint32",
              "name": "maintenancePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "rewardPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "taxScaleSinceLastClaimPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint256[5]",
              "name": "taxRates",
              "type": "uint256[5]"
            },
            {
              "internalType": "uint256",
              "name": "charityContributionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultWithdrawalTaxRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taperRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mintLock",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferLock",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "mintLimitWindow",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "saleLimitPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "saleLimitAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "limitByReward",
                  "type": "bool"
                }
              ],
              "internalType": "struct DefoTokenLimitConfig",
              "name": "defoTokenLimitConfig",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct ProtocolConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "ConfigurationChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maintenanceFeeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmountDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "price",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "taperRewardsThresholdDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "maxMintsPerLimitWindow",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct GemTypeConfig",
          "name": "_gemTypeConfig",
          "type": "tuple"
        }
      ],
      "name": "GemTypeConfigurationChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20[2]",
              "name": "paymentTokens",
              "type": "address[2]"
            },
            {
              "internalType": "address[7]",
              "name": "wallets",
              "type": "address[7]"
            },
            {
              "internalType": "uint256[3][2]",
              "name": "incomeDistributionOnMint",
              "type": "uint256[3][2]"
            },
            {
              "internalType": "uint32",
              "name": "maintenancePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "rewardPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "taxScaleSinceLastClaimPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint256[5]",
              "name": "taxRates",
              "type": "uint256[5]"
            },
            {
              "internalType": "uint256",
              "name": "charityContributionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultWithdrawalTaxRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taperRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mintLock",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferLock",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "mintLimitWindow",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "saleLimitPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "saleLimitAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "limitByReward",
                  "type": "bool"
                }
              ],
              "internalType": "struct DefoTokenLimitConfig",
              "name": "defoTokenLimitConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct ProtocolConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGemTypesConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maintenanceFeeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmountDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "price",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "taperRewardsThresholdDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "maxMintsPerLimitWindow",
              "type": "uint8"
            }
          ],
          "internalType": "struct GemTypeConfig[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_charityContributionRate",
          "type": "uint256"
        }
      ],
      "name": "setCharityContributionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20[2]",
              "name": "paymentTokens",
              "type": "address[2]"
            },
            {
              "internalType": "address[7]",
              "name": "wallets",
              "type": "address[7]"
            },
            {
              "internalType": "uint256[3][2]",
              "name": "incomeDistributionOnMint",
              "type": "uint256[3][2]"
            },
            {
              "internalType": "uint32",
              "name": "maintenancePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "rewardPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "taxScaleSinceLastClaimPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint256[5]",
              "name": "taxRates",
              "type": "uint256[5]"
            },
            {
              "internalType": "uint256",
              "name": "charityContributionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultWithdrawalTaxRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taperRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "mintLock",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "transferLock",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "mintLimitWindow",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "saleLimitPeriod",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "saleLimitAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "limitByReward",
                  "type": "bool"
                }
              ],
              "internalType": "struct DefoTokenLimitConfig",
              "name": "defoTokenLimitConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct ProtocolConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "saleLimitPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "saleLimitAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "limitByReward",
              "type": "bool"
            }
          ],
          "internalType": "struct DefoTokenLimitConfig",
          "name": "_defoTokenLimitConfig",
          "type": "tuple"
        }
      ],
      "name": "setConfigDefoTokenLimitConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3][2]",
          "name": "_incomeDistributionOnMint",
          "type": "uint256[3][2]"
        }
      ],
      "name": "setConfigIncomeDistributionOnMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maintenancePeriod",
          "type": "uint32"
        }
      ],
      "name": "setConfigMaintenancePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_mintLimitWindow",
          "type": "uint32"
        }
      ],
      "name": "setConfigMintLimitWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_rewardPeriod",
          "type": "uint32"
        }
      ],
      "name": "setConfigRewardPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taperRate",
          "type": "uint256"
        }
      ],
      "name": "setConfigTaperRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "_taxRates",
          "type": "uint256[5]"
        }
      ],
      "name": "setConfigTaxRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_taxScaleSinceLastClaimPeriod",
          "type": "uint32"
        }
      ],
      "name": "setConfigTaxScaleSinceLastClaimPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultWithdrawalTaxRate",
          "type": "uint256"
        }
      ],
      "name": "setConfigVaultWithdrawalTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[7]",
          "name": "_wallets",
          "type": "address[7]"
        }
      ],
      "name": "setConfigWallets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maintenanceFeeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmountDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "price",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "taperRewardsThresholdDefo",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "maxMintsPerLimitWindow",
              "type": "uint8"
            }
          ],
          "internalType": "struct GemTypeConfig[]",
          "name": "_gemTypeConfig",
          "type": "tuple[]"
        }
      ],
      "name": "setGemTypesConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc99ea181d83f26e366a47152117bf0da82e73bc158c7ff39c5cf33e86ef64d87",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x05309918A451156C2cE41f3C8dF89672ce83e944",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2580656",
    "logsBloom": "0x
    "blockHash": "0x4ab58a8996259de8968fbfeadb50835e05213d45091d57b5a8296515fcdbcc2b",
    "transactionHash": "0xc99ea181d83f26e366a47152117bf0da82e73bc158c7ff39c5cf33e86ef64d87",
    "logs": [],
    "blockNumber": 13330780,
    "cumulativeGasUsed": "2580656",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "c5ed52282ce934572189fe20bcaa6e04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20[2]\",\"name\":\"paymentTokens\",\"type\":\"address[2]\"},{\"internalType\":\"address[7]\",\"name\":\"wallets\",\"type\":\"address[7]\"},{\"internalType\":\"uint256[3][2]\",\"name\":\"incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"},{\"internalType\":\"uint32\",\"name\":\"maintenancePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256[5]\",\"name\":\"taxRates\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"charityContributionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultWithdrawalTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taperRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"mintLimitWindow\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"defoTokenLimitConfig\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct ProtocolConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"ConfigurationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maintenanceFeeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"price\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"taperRewardsThresholdDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxMintsPerLimitWindow\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct GemTypeConfig\",\"name\":\"_gemTypeConfig\",\"type\":\"tuple\"}],\"name\":\"GemTypeConfigurationChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20[2]\",\"name\":\"paymentTokens\",\"type\":\"address[2]\"},{\"internalType\":\"address[7]\",\"name\":\"wallets\",\"type\":\"address[7]\"},{\"internalType\":\"uint256[3][2]\",\"name\":\"incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"},{\"internalType\":\"uint32\",\"name\":\"maintenancePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256[5]\",\"name\":\"taxRates\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"charityContributionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultWithdrawalTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taperRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"mintLimitWindow\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"defoTokenLimitConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct ProtocolConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGemTypesConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maintenanceFeeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"price\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"taperRewardsThresholdDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxMintsPerLimitWindow\",\"type\":\"uint8\"}],\"internalType\":\"struct GemTypeConfig[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_charityContributionRate\",\"type\":\"uint256\"}],\"name\":\"setCharityContributionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20[2]\",\"name\":\"paymentTokens\",\"type\":\"address[2]\"},{\"internalType\":\"address[7]\",\"name\":\"wallets\",\"type\":\"address[7]\"},{\"internalType\":\"uint256[3][2]\",\"name\":\"incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"},{\"internalType\":\"uint32\",\"name\":\"maintenancePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256[5]\",\"name\":\"taxRates\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"charityContributionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultWithdrawalTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taperRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"mintLimitWindow\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"defoTokenLimitConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct ProtocolConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleLimitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"limitByReward\",\"type\":\"bool\"}],\"internalType\":\"struct DefoTokenLimitConfig\",\"name\":\"_defoTokenLimitConfig\",\"type\":\"tuple\"}],\"name\":\"setConfigDefoTokenLimitConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3][2]\",\"name\":\"_incomeDistributionOnMint\",\"type\":\"uint256[3][2]\"}],\"name\":\"setConfigIncomeDistributionOnMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maintenancePeriod\",\"type\":\"uint32\"}],\"name\":\"setConfigMaintenancePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_mintLimitWindow\",\"type\":\"uint32\"}],\"name\":\"setConfigMintLimitWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rewardPeriod\",\"type\":\"uint32\"}],\"name\":\"setConfigRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taperRate\",\"type\":\"uint256\"}],\"name\":\"setConfigTaperRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_taxRates\",\"type\":\"uint256[5]\"}],\"name\":\"setConfigTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_taxScaleSinceLastClaimPeriod\",\"type\":\"uint32\"}],\"name\":\"setConfigTaxScaleSinceLastClaimPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultWithdrawalTaxRate\",\"type\":\"uint256\"}],\"name\":\"setConfigVaultWithdrawalTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[7]\",\"name\":\"_wallets\",\"type\":\"address[7]\"}],\"name\":\"setConfigWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maintenanceFeeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"price\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"taperRewardsThresholdDefo\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxMintsPerLimitWindow\",\"type\":\"uint8\"}],\"internalType\":\"struct GemTypeConfig[]\",\"name\":\"_gemTypeConfig\",\"type\":\"tuple[]\"}],\"name\":\"setGemTypesConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Decentralized Foundation Team\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC721Facet EIP-2535 Diamond Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/ConfigFacet.sol\":\"ConfigFacet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/base-facet/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n/**\\n * @title  BaseFacet\\n * @author Decentralized Foundation Team\\n * @notice BaseFacet is a base contract all facets to inherit, includes cross-facet utils and  common reusable functions for DEFO Diamond\\n */\\ncontract BaseFacet is Storage {\\n\\n    /* ====================== Modifiers ====================== */\\n\\n    modifier exists(uint256 _tokenId) {\\n        _requireExists(_tokenId);\\n        _;\\n    }\\n\\n    modifier onlyGemHolder(uint256 _tokenId) {\\n        require(s.nft.owners[_tokenId] == _msgSender(), \\\"You don't own this gem\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n    modifier nonZeroAddress(address _owner) {\\n        require(_owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        _;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _msgSender() internal override view returns (address sender_) {\\n        if (Context._msgSender() == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function _getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function _requireExists(uint256 _tokenId) internal view {\\n        require(_exists(_tokenId), \\\"ERC721: tokenId is not valid\\\");\\n    }\\n\\n    function _exists(uint256 _tokenId) internal view returns (bool) {\\n        return (s.nft.owners[_tokenId] != address(0));\\n    }\\n\\n    ///todo ensure passing memory array here to the public functions is pretty optimal\\n    function _getGemIds(address _user) internal view returns (uint256[] memory) {\\n        uint256 numberOfGems = s.nft.balances[_user];\\n        uint256[] memory gemIds = new uint256[](numberOfGems);\\n        for (uint256 i = 0; i < numberOfGems; i++) {\\n            uint256 gemId = s.nft.ownedTokens[_user][i];\\n            require(_exists(gemId), \\\"A gem doesn't exists\\\");\\n            gemIds[i] = gemId;\\n        }\\n        return gemIds;\\n    }\\n\\n    function _getAllUsers() internal view returns (address[] memory users_) {\\n        users_ = new address[](s.nft.allTokens.length);\\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\\n            users_[tokenId] = s.nft.owners[tokenId];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5ee18d83372dec082d66a9c61a88c6b5c034a741118da8be0524f9f1ed4f4b13\",\"license\":\"GPL-3.0\"},\"contracts/base-facet/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {AppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0x66f07eea1ae3a0fbf40fbf070d67bed29b4a0a2dfbb689f58292d28b5065418a\",\"license\":\"GPL-3.0\"},\"contracts/data-types/IDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n/**\\n*   @dev The only source for all the data structures used in the protocol storage\\n*   @dev This includes general config, gem type config, and mutable data\\n*/\\n\\n/// @dev number of payment tokens to enumerate the error, initially it's Defo and Dai,\\n/// @dev see PaymentTokens enum\\nuint256 constant PAYMENT_TOKENS = 2;\\n\\n/// @dev number of income recievers on yield gem mint\\nuint256 constant PAYMENT_RECEIVERS = 3;\\n\\n/// @dev total wallets on the protocol, see Wallets enum\\nuint256 constant WALLETS = 7;\\n\\n/// @dev total number of supported tax tiers\\nuint256 constant TAX_TIERS = 5;\\n\\n/**\\n*   @notice a struct for data compliance with erc721 standard\\n*   @param name Token name\\n*   @param symbol Token symbol\\n*   @param owners Mapping from token ID to owner address\\n*   @param balances Mapping owner address to token count\\n*   @param tokenApprovals Mapping from token ID to approved address\\n*   @param operatorApprovals Mapping from owner to operator approvals\\n*   @param ownedTokens Mapping from owner to list of owned token IDs\\n*   @param ownedTokensIndex Mapping from token ID to index of the owner tokens list\\n*   @param allTokens Array with all token ids, used for enumeration\\n*   @param allTokensIndex Mapping from token id to position in the allTokens array\\n*/\\n    struct ERC721Storage {\\n        string name;\\n        string symbol;\\n        Counters.Counter tokenIdTracker;\\n        mapping(uint256 => address) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n        string baseURI;\\n        mapping(address => mapping(uint256 => uint256)) ownedTokens;\\n        mapping(uint256 => uint256) ownedTokensIndex;\\n        uint256[] allTokens;\\n        mapping(uint256 => uint256) allTokensIndex;\\n        bool init;\\n    }\\n\\n\\n/// @notice token enum to index arrays of rates and addresses, the convention is that Dai is at place 0, Defo is at 1\\n/// @dev the order is extremely important once deployed\\n    enum PaymentTokens {\\n        Dai,\\n        Defo\\n    }\\n\\n/// @notice protocol wallets for easy enumeration,\\n/// @dev the order is extremely important once deployed, see configuration scripts\\n    enum Wallets {\\n        Treasury,\\n        RewardPool,\\n        LiquidityPair,\\n        Team,\\n        Charity,\\n        Vault,\\n        RedeemContract\\n    }\\n\\n\\n/// @notice these tiers correspond to the configurable percentage from the diamond storage\\n    enum TaxTiers {\\n        Tier0NoPayment,\\n        Tier1HugeTax,\\n        Tier2MediumTax,\\n        Tier3SmallTax,\\n        Tier4NoTax\\n    }\\n\\n/**\\n * @notice DefoTokenLimitConfig DEFO ERC20 Token transfer limiter, this is for the 1000 DEFO per 24h sale limitation, can be changes with setTransferLimit\\n * @param saleLimitPeriod initially 1 day\\n * @param saleLimitAmount initially 1000 tokens\\n*/\\n    struct DefoTokenLimitConfig {\\n        uint256 saleLimitPeriod;\\n        uint256 saleLimitAmount;\\n        bool limitByReward;\\n    }\\n\\n/**\\n * @notice Main Protocol Configuration structure\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set, including no minting\\n     * @param incomeDistributionOnMint distribution of the payment among tokens in percent rates, all values use percentage multiplier (see percent helper), here addresses are from the Addresses\\n     * @param maintenancePeriod a period in seconds for maintenance fee accrual, initially one month\\n     * @param rewardPeriod a period in seconds for generating yield gem rewards, initially one week\\n     * @param mintCountResetPeriod a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs.\\n     * @param taxScaleSinceLastClaimPeriod a period in seconds for a tax scale to work out, initially one week\\n     * @param taxRates tax rates in percent (with percent multiplier, see percent helper contract), initially 30%, 30%, 15%, 0\\n     * @param charityContributionRate charity rate (w multiplier as all percent values in the project), initially 5%\\n     * @param vaultWithdrawalRate fee paid to withdraw amount from the vault back to the earned rewards, initially 10%\\n     * @param taperRate taper rate, initially 20%\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set\\n     * @param mintLimitWindow a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs, see GemTypeConfig.maxMintsPerLimitWindow\\n     */\\n\\n    struct ProtocolConfig {\\n        IERC20[PAYMENT_TOKENS] paymentTokens;\\n        address[WALLETS] wallets;\\n        uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] incomeDistributionOnMint;\\n        // time periods\\n        uint32 maintenancePeriod;\\n        uint32 rewardPeriod;\\n        uint32 taxScaleSinceLastClaimPeriod;\\n        // taxes and contributions\\n        uint256[TAX_TIERS] taxRates;\\n        uint256 charityContributionRate;\\n        uint256 vaultWithdrawalTaxRate;\\n        uint256 taperRate;\\n        // locks\\n        bool mintLock;\\n        bool transferLock;\\n        // mint limit period for coutner reset\\n        uint32 mintLimitWindow;\\n        DefoTokenLimitConfig defoTokenLimitConfig;\\n    }\\n\\n/**\\n * @notice A struct containing configuration details for gemType\\n     * @param maintenanceFee Maintenance fee in Dai for the node type, amount in wei per month\\n     * @param rewardAmountDefo Reward in DEFO for the node type, amount in wei per week\\n     * @param price Price in DEFO and DAI (in wei), respectively, according to the PaymentTokens enum\\n     * @param taperRewardsThresholdDefo Taper threshold, in wei, decreasing rate every given amount of rewards in DEFO\\n     * @param maxMintsPerLimitWindow number of gems, mint limit for a node type, see ProtocolConfig.mintLimitWindow\\n     */\\n    struct GemTypeConfig {\\n        uint256 maintenanceFeeDai;\\n        uint256 rewardAmountDefo;\\n        uint256[PAYMENT_TOKENS] price;\\n        uint256 taperRewardsThresholdDefo;\\n        uint8 maxMintsPerLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct containing current mutable status for gemType\\n     * @param mintCount counter incrementing by one on every mint, during mintCountResetPeriod; after mintCountResetPeriod with no mints, reset to 0\\n     * @param endOfMintLimitWindow a moment to reset the mintCount counter to zero, set the new endOfMintLimitWindow and start over\\n     */\\n    struct GemTypeMintWindow {\\n        uint256 mintCount;\\n        uint32 endOfMintLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct describing current DEFO Token limiter input\\n * @param tokensSold DEFO tokens sold per limit window, \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfLastSale time of last sale\\n     */\\n    struct DEFOTokenLimitWindow {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfLastSale;\\n    }\\n\\n/**\\n * @notice A struct describing DEFO Token limit per weekly rewards\\n * @param tokensSold DEFO tokens sold per reward period window starting from the first sale \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfWindowStart time of first sale in the window\\n     */\\n    struct DEFOTokenLimitPerRewards {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfWindowStart;\\n    }\\n\\n    enum Booster {\\n        None,\\n        Delta,\\n        Omega\\n    }\\n\\n/**\\n * @notice A struct describing financial state, provides the complete state for user, gem, or protocol total.\\n * @notice It gives the current exact balance of the Vault, Rewards, and Charity.\\n * @param claimedGross rewards amount previously claimed for all time, gross amount - before tax and charity\\n * @param claimedNet rewards claimed and to user, net amount after tax and charity\\n * @param stakedGross amount removed from rewards to stake, charity not yet deducted\\n * @param stakedNet amount put to the vault - charity has been deducted\\n * @param unStakedGross  amount removed from the vault, pre withdraw tax and charity\\n * @param unStakedGrossUpped  amount removed from the vault gross-upped with charity to equal to the stakedGross amount\\n * @param unStakedNet  amount returned to the earned rewards, post withdraw tax and charity\\n * @param donated sent to charity\\n * @param claimTaxPaid claim tax deducted - 30%, 15%, 15%\\n * @param vaultTaxPaid vault withdrawal tax deducted\\n     */\\n    struct Fi {\\n        uint256 claimedGross;\\n        uint256 claimedNet;\\n        uint256 stakedGross;\\n        uint256 stakedNet;\\n        uint256 unStakedGross;\\n        uint256 unStakedGrossUp;\\n        uint256 unStakedNet;\\n        uint256 donated;\\n        uint256 claimTaxPaid;\\n        uint256 vaultTaxPaid;\\n    }\\n\\n/**\\n * @notice current state of a gem, a gem is an instance with consistent yield and fee rates specified by the pair (gemType, booster)\\n * @param gemType node type, initially it's  0 -> Ruby , 1 -> Sapphire, 2 -> Diamond, and boosters\\n * @param booster node Booster 0 -> None , 1 -> Delta , 2 -> Omega\\n * @param mintTime timestamp of the mint time\\n * @param lastRewardWithdrawalTime timestamp of last reward claim OR stake. Same as mintTime if not yet claimed.\\n * @param lastMaintenanceTime timestamp of the last maintenance (could be a date in the future in case of the upfront payment)\\n*/\\n    struct Gem {\\n        uint8 gemTypeId;\\n        Booster booster;\\n        uint32 mintTime;\\n        uint32 lastRewardWithdrawalTime;\\n        uint32 lastMaintenanceTime;\\n        Fi fi;\\n    }\\n\\n/**\\n*   @notice Main Contract Storage utilizing App Storage pattern for Diamond Proxy data organization\\n*   @param config main configuration, basically everything except gemType specific\\n*   @param gemTypes supported gem types with their details, gemTypeId is the index of the array\\n*   @param gems mapping indexed by tokenId, where tokenId is in the nft.allTokens\\n*   @param gemTypesMintWindows windows for limiting yield gem mints per gem type\\n*   @param defoTokenLimitWindow window for limiting DEFO Token sale\\n*   @param nft ERC721 standard related storage\\n*   @param total cumulated amounts for all operations\\n*   @param usersFi financial info per each user\\n*/\\n    struct AppStorage {\\n        // configuration\\n        ProtocolConfig config;\\n        GemTypeConfig[] gemTypes;\\n        // current state\\n        GemTypeMintWindow[] gemTypesMintWindows;\\n        DEFOTokenLimitWindow defoTokenLimitWindow;\\n        mapping(uint256 => Gem) gems;\\n        ERC721Storage nft;\\n        // Cumulations\\n        Fi total;\\n        // User data, users list is s.nft.owners, size s.nft.allTokens.length (managed by ERC721Enumerable)\\n        mapping(address => Fi) usersFi;\\n        mapping(address => uint8) usersNextGemTypeToBoost;\\n        mapping(address => Booster) usersNextGemBooster;\\n        // upgrading, that's why here in the bottom not to mess up current users' data\\n        DEFOTokenLimitPerRewards defoTokenLimitPerRewards;\\n    }\\n\",\"keccak256\":\"0x309b4fc4ab7219cebd7d7c38adbcf4bd41b87b94bdaa87733f3ee7e113841ba3\",\"license\":\"GPL-3.0\"},\"contracts/facets/ConfigFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IConfig.sol\\\";\\nimport \\\"../base-facet/BaseFacet.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibPauser.sol\\\";\\nimport \\\"../libraries/LibMintLimiter.sol\\\";\\nimport \\\"../libraries/PercentHelper.sol\\\";\\n\\n/** @title  ERC721Facet EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\\n*/\\ncontract ConfigFacet is BaseFacet, IConfig {\\n\\n    /* ============ External and Public Functions ============ */\\n\\n    function setConfig(ProtocolConfig calldata _config) external onlyOwner {\\n        ProtocolConfig memory calldataToStorage = _config;\\n        s.config = calldataToStorage;\\n        emit ConfigurationChange(_config);\\n    }\\n\\n    function setGemTypesConfig(GemTypeConfig[] calldata _gemTypeConfig) external onlyOwner {\\n        // fill in the storage and reset mint limit window counter for every gem type\\n        delete s.gemTypes;\\n        delete s.gemTypesMintWindows;\\n        for (uint gemTypeId = 0; gemTypeId < _gemTypeConfig.length; gemTypeId++) {\\n            GemTypeConfig memory cur = _gemTypeConfig[gemTypeId];\\n            s.gemTypes.push(cur);\\n            GemTypeMintWindow memory initWindow = GemTypeMintWindow(0, uint32(block.timestamp));\\n            s.gemTypesMintWindows.push(initWindow);\\n        }\\n    }\\n\\n    function setConfigWallets(address[WALLETS] memory _wallets) external onlyOwner {\\n        s.config.wallets = _wallets;\\n    }\\n\\n    function setConfigIncomeDistributionOnMint(uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] memory _incomeDistributionOnMint) external onlyOwner {\\n        s.config.incomeDistributionOnMint = _incomeDistributionOnMint;\\n    }\\n\\n    function setConfigMaintenancePeriod(uint32 _maintenancePeriod) external onlyOwner {\\n        s.config.maintenancePeriod = _maintenancePeriod;\\n    }\\n\\n    function setConfigRewardPeriod(uint32 _rewardPeriod) external onlyOwner {\\n        s.config.rewardPeriod = _rewardPeriod;\\n    }\\n\\n    function setConfigTaxScaleSinceLastClaimPeriod(uint32 _taxScaleSinceLastClaimPeriod) external onlyOwner {\\n        s.config.taxScaleSinceLastClaimPeriod = _taxScaleSinceLastClaimPeriod;\\n    }\\n\\n    function setConfigTaxRates(uint256[TAX_TIERS] memory _taxRates) external onlyOwner {\\n        s.config.taxRates = _taxRates;\\n    }\\n\\n    function setCharityContributionRate(uint256 _charityContributionRate) external onlyOwner {\\n        s.config.charityContributionRate = _charityContributionRate;\\n    }\\n\\n    function setConfigVaultWithdrawalTaxRate(uint256 _vaultWithdrawalTaxRate) external onlyOwner {\\n        s.config.vaultWithdrawalTaxRate = _vaultWithdrawalTaxRate;\\n    }\\n\\n    function setConfigTaperRate(uint256 _taperRate) external onlyOwner {\\n        s.config.taperRate = _taperRate;\\n    }\\n\\n    function setConfigMintLimitWindow(uint32 _mintLimitWindow) external onlyOwner {\\n        s.config.mintLimitWindow = _mintLimitWindow;\\n    }\\n\\n    function setConfigDefoTokenLimitConfig(DefoTokenLimitConfig calldata _defoTokenLimitConfig) external onlyOwner {\\n        DefoTokenLimitConfig memory temp = _defoTokenLimitConfig;\\n        s.config.defoTokenLimitConfig = temp;\\n    }\\n\\n    function lockMint() public onlyOwner {\\n        LibMintLimiter.lockMint();\\n    }\\n\\n    function unlockMint() public onlyOwner {\\n        LibMintLimiter.unlockMint();\\n    }\\n\\n    function pause() external onlyOwner {\\n        LibPauser._pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        LibPauser._unpause();\\n    }\\n\\n\\n    function getConfig() external view returns (ProtocolConfig memory) {\\n        return s.config;\\n    }\\n\\n    function getGemTypesConfig() external view returns (GemTypeConfig[] memory) {\\n        return s.gemTypes;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2d7cea8ee239e7c0de16cb44423ab5a9a57155ef1cd1481583bf0c1bef51a31c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n\\n/** @title  IConfig EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice The Yield Gem Configuration, setters and getters\\n*/\\ninterface IConfig {\\n    event ConfigurationChange(ProtocolConfig config);\\n    event GemTypeConfigurationChange(GemTypeConfig _gemTypeConfig);\\n\\n    function setConfig(ProtocolConfig calldata _config) external;\\n\\n    function getConfig() external view returns (ProtocolConfig memory);\\n\\n    function setGemTypesConfig(GemTypeConfig[] calldata _gemTypesConfig) external;\\n\\n    function getGemTypesConfig() external view returns (GemTypeConfig[] memory);\\n\\n    function lockMint() external;\\n\\n    function unlockMint() external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n}\\n\",\"keccak256\":\"0x4cb080dc01265144a608303fbd9a1e54f3f56a4849b08b5ebac9df46e563ba79\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/** @title  LibAppStorage EIP-2535 Diamond Facet Storage\\n  * @author Decentralized Foundation Team\\n  * @notice This diamond storage library is inherited by all facets and imported in libraries\\n*/\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf2e84cec0bd10a28b47d23a086c1d77096efac4f3b3d6f1c132ebbe814c8b1d5\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibMintLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n// helper for limit daily mints\\nlibrary LibMintLimiter {\\n    event MintLocked();\\n    event MintUnlocked();\\n\\n    /**\\n    *   @notice checks if a gem is mintable\\n    *   @param _gemTypeId type of a gem, initially it's 0,1,2 for sapphire, ruby, and diamond, respectively\\n    *   @return true if mint is available, no revert\\n    *   @dev checks mintLock config and daily mintcount limit\\n    */\\n    function isMintAvailableForGem(uint8 _gemTypeId) internal view returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(_gemTypeId < s.gemTypes.length, \\\"Wrong gem type\\\");\\n        GemTypeConfig memory gemType = s.gemTypes[_gemTypeId];\\n        GemTypeMintWindow memory gemTypeMintWindow = s.gemTypesMintWindows[_gemTypeId];\\n\\n        return !(s.config.mintLock) &&\\n        //checking if the limit in the current mint window has not been reached yet\\n        (((gemTypeMintWindow.mintCount < gemType.maxMintsPerLimitWindow) &&\\n        (block.timestamp <= gemTypeMintWindow.endOfMintLimitWindow)) ||\\n        //or we're already in another window ahead\\n        (block.timestamp > gemTypeMintWindow.endOfMintLimitWindow));\\n    }\\n\\n    function updateMintCount(uint8 _gemTypeId) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        GemTypeMintWindow storage windowStorage = s.gemTypesMintWindows[_gemTypeId];\\n        if (block.timestamp > windowStorage.endOfMintLimitWindow) {\\n            //setting up new mint window\\n            do {\\n                windowStorage.endOfMintLimitWindow += s.config.mintLimitWindow;\\n            }\\n            while (block.timestamp > windowStorage.endOfMintLimitWindow);\\n            windowStorage.mintCount = 0;\\n        }\\n        windowStorage.mintCount++;\\n    }\\n\\n    function getCurrentMintWindow(uint8 _gemTypeId) internal view returns (GemTypeMintWindow memory) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(_gemTypeId < s.gemTypes.length, \\\"Wrong gem type\\\");\\n        GemTypeMintWindow memory window = s.gemTypesMintWindows[_gemTypeId];\\n        if (block.timestamp > window.endOfMintLimitWindow) {\\n            //setting up new mint window\\n            do {\\n                window.endOfMintLimitWindow += s.config.mintLimitWindow;\\n            }\\n            while (block.timestamp > window.endOfMintLimitWindow);\\n            window.mintCount = 0;\\n        }\\n        return window;\\n    }\\n\\n\\n    function lockMint() internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.mintLock = true;\\n        emit MintLocked();\\n    }\\n\\n    function unlockMint() internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.mintLock = false;\\n        emit MintUnlocked();\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xb456ab1987377d3a09ccceedb38069555ee5f9e00e12f37434550da0f3d622f3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibPauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/**\\n*   @notice Pausable contract\\n*   @dev should start with  s.config.transferLock = false which is default\\n*/\\n\\nlibrary LibPauser {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function _paused() internal view returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.config.transferLock;\\n    }\\n\\n    function _requireNotPaused() internal view {\\n        require(!_paused(), \\\"Pausable: paused, transfer is locked\\\");\\n    }\\n\\n    function _requirePaused() internal view {\\n        require(_paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    function _pause() internal whenNotPaused {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.transferLock = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function _unpause() internal whenPaused {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.config.transferLock = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x3c65fc92fa0331bcde5c781013a71c91e75444c00c16669794b478bd6bbc7c7a\",\"license\":\"GPL-3.0\"},\"contracts/libraries/PercentHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n\\n/**\\n * @notice Library for percentage integer math, note PERCENTAGE_PRECISION_MULTIPLIER when configuring the protocol\\n * @author Decentralized Foundation Team\\n * @dev PERCENTAGE_PRECISION_MULTIPLIER*100 = 10000 greater than real percent, so 20% is represented as 2000, meaning 0.2\\n */\\n\\nlibrary PercentHelper {\\n    uint256 constant PERCENTAGE_PRECISION_MULTIPLIER = 100;\\n    uint256 constant HUNDRED_PERCENT = 100 * PERCENTAGE_PRECISION_MULTIPLIER;\\n\\n    /**\\n     * @dev simply a ratio of the given value, e.g. if tax is 30% and value if 100 the function gives 30\\n     * @param value Value to get ratio from\\n     * @param tax Percent to apply\\n     */\\n    ///todo make pure once got rid of the console.log\\n    function rate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (value * tax) / HUNDRED_PERCENT : 0;\\n    }\\n\\n    /**\\n    * @dev simple gross-up, gives back gross for net value, if charity is 5%, then gross up of 95 gives 100\\n     * @param netValue Net value to gross up\\n     * @param tax Percent that was applied\\n     */\\n    function grossUp(uint256 netValue, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (netValue * HUNDRED_PERCENT) / (HUNDRED_PERCENT - tax) : 0;\\n    }\\n\\n\\n    /// @dev received inverted percent for taper calc, if ratio is 20%, then 1/(1-20%) = 25%\\n    function invertedRate(uint256 value, uint256 ratio) internal pure returns (uint256) {\\n        return value * HUNDRED_PERCENT / (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function oneHundredLessPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function minusHundredPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (ratio - HUNDRED_PERCENT);\\n    }\\n\\n\\n    function reversePercent(uint256 ratio) internal pure returns (uint256) {\\n        return PERCENTAGE_PRECISION_MULTIPLIER / ratio;\\n    }\\n\\n    function percentPower(uint256 value, uint256 ratio, uint pow) internal pure returns (uint256) {\\n        return value * PERCENTAGE_PRECISION_MULTIPLIER ** pow / ratio ** pow;\\n    }\\n\\n\\n    /// @dev simply value less given percentage, e.g. if tax is 30% the functio gives 70 for 100\\n    function lessRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value - rate(value, tax);\\n    }\\n\\n    function plusRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value + rate(value, tax);\\n    }\\n}\\n\",\"keccak256\":\"0x70d9a8e3cf2aad9102eda57cb8d7efacca2f96f89d50aef7c6088f522c4763ae\",\"license\":\"GPL-3.0\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612db5806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806375830a31116100ad5780638ad15c21116100715780638ad15c211461027a5780639956d1db14610296578063c3f909d4146102b2578063d864d02a146102d0578063e0b6bb67146102ec57610121565b806375830a31146101fe57806383c7d1521461021a5780638456cb59146102365780638838640e146102405780638a1ad3251461025e57610121565b8063683da553116100f4578063683da55314610172578063685e2a9a1461018e57806369d40589146101aa5780636bcb63d6146101c65780636bfe99ec146101e257610121565b80633f4ba83a1461012657806341ef35c6146101305780635a9a664f1461014c57806364fa266714610156575b600080fd5b61012e6102f6565b005b61014a600480360381019061014591906115e7565b610308565b005b61015461032a565b005b610170600480360381019061016b9190611639565b61033c565b005b61018c600480360381019061018791906116a3565b61053b565b005b6101a860048036038101906101a391906116d0565b61056c565b005b6101c460048036038101906101bf91906116a3565b610583565b005b6101e060048036038101906101db91906116a3565b6105b4565b005b6101fc60048036038101906101f7919061185f565b6105e5565b005b610218600480360381019061021391906118e7565b610607565b005b610234600480360381019061022f9190611a43565b610790565b005b61023e6107b2565b005b6102486107c4565b6040516102559190611c4e565b60405180910390f35b610278600480360381019061027391906116a3565b6108a6565b005b610294600480360381019061028f91906116d0565b6108d7565b005b6102b060048036038101906102ab9190611c8f565b6108ee565b005b6102ba61094e565b6040516102c79190612198565b60405180910390f35b6102ea60048036038101906102e591906116d0565b610c52565b005b6102f4610c69565b005b6102fe610c7b565b610306610d16565b565b610310610c7b565b8060008001601001906005610326929190610f95565b5050565b610332610c7b565b61033a610d84565b565b610344610c7b565b600081803603810190610357919061248c565b90508060008001600082015181600001906002610375929190610fd5565b5060208201518160020190600761038d929190611052565b506040820151816009019060026103a59291906110cf565b50606082015181600f0160006101000a81548163ffffffff021916908363ffffffff160217905550608082015181600f0160046101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600f0160086101000a81548163ffffffff021916908363ffffffff16021790555060c082015181601001906005610432929190610f95565b5060e08201518160150155610100820151816016015561012082015181601701556101408201518160180160006101000a81548160ff0219169083151502179055506101608201518160180160016101000a81548160ff0219169083151502179055506101808201518160180160026101000a81548163ffffffff021916908363ffffffff1602179055506101a082015181601901600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555050509050507fe187417c9675ae5cc80acb8ab43a9ae12145aa303ca0ea50e84d060e5ef46aa78260405161052f919061292f565b60405180910390a15050565b610543610c7b565b806000800160180160026101000a81548163ffffffff021916908363ffffffff16021790555050565b610574610c7b565b80600080016015018190555050565b61058b610c7b565b8060008001600f0160086101000a81548163ffffffff021916908363ffffffff16021790555050565b6105bc610c7b565b8060008001600f0160046101000a81548163ffffffff021916908363ffffffff16021790555050565b6105ed610c7b565b80600080016009019060026106039291906110cf565b5050565b61060f610c7b565b6000601c0160006106209190611120565b6000601d0160006106319190611144565b60005b8282905081101561078b5760008383838181106106545761065361294b565b5b905060c0020180360381019061066a9190612ae3565b90506000601c0181908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000155602082015181600101556040820151816002019060026106c6929190611168565b506060820151816004015560808201518160050160006101000a81548160ff021916908360ff160217905550505060006040518060400160405280600081526020014263ffffffff1681525090506000601d018190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555050505050808061078390612b3f565b915050610634565b505050565b610798610c7b565b80600080016002019060076107ae929190611052565b5050565b6107ba610c7b565b6107c2610ddf565b565b60606000601c01805480602002602001604051908101604052809291908181526020016000905b8282101561089d57838290600052602060002090600602016040518060a001604052908160008201548152602001600182015481526020016002820160028060200260405190810160405280929190826002801561085e576020028201915b81548152602001906001019080831161084a575b50505050508152602001600482015481526020016005820160009054906101000a900460ff1660ff1660ff1681525050815260200190600101906107eb565b50505050905090565b6108ae610c7b565b8060008001600f0160006101000a81548163ffffffff021916908363ffffffff16021790555050565b6108df610c7b565b80600080016016018190555050565b6108f6610c7b565b6000818036038101906109099190612b87565b90508060008001601901600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050505050565b6109566111a8565b60008001604051806101c0016040529081600082016002806020026040519081016040528092919082600280156109d8576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161098e575b5050505050815260200160028201600780602002604051908101604052809291908260078015610a53576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a09575b5050505050815260200160098201600280602002604051908101604052809291906000905b82821015610ad157838260030201600380602002604051908101604052809291908260038015610abd576020028201915b815481526020019060010190808311610aa9575b505050505081526020019060010190610a78565b505050508152602001600f820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600f820160049054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600f820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160108201600580602002604051908101604052809291908260058015610b87576020028201915b815481526020019060010190808311610b73575b505050505081526020016015820154815260200160168201548152602001601782015481526020016018820160009054906101000a900460ff161515151581526020016018820160019054906101000a900460ff161515151581526020016018820160029054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016019820160405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff16151515158152505081525050905090565b610c5a610c7b565b80600080016017018190555050565b610c71610c7b565b610c79610e4d565b565b610c83610ea8565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0b90612c37565b60405180910390fd5b565b610d1e610ed5565b6000610d28610f1e565b905060008160000160180160016101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051610d799190612c66565b60405180910390a150565b6000610d8e610f1e565b905060008160000160180160006101000a81548160ff0219169083151502179055507f16fe33fab5fd851b7e9a856a666ea43cc5515bbb51689c3d370085d00441812360405160405180910390a150565b610de7610f23565b6000610df1610f1e565b905060018160000160180160016101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051610e429190612c66565b60405180910390a150565b6000610e57610f1e565b905060018160000160180160006101000a81548160ff0219169083151502179055507faa71a6e005bc4e0ea53d6184338a28d3f4737f18bed30c92d93a239ad5a7174760405160405180910390a150565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b610edd610f6d565b610f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1390612ccd565b60405180910390fd5b565b600090565b610f2b610f6d565b15610f6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6290612d5f565b60405180910390fd5b565b600080610f78610f1e565b90508060000160180160019054906101000a900460ff1691505090565b8260058101928215610fc4579160200282015b82811115610fc3578251825591602001919060010190610fa8565b5b509050610fd19190611251565b5090565b8260028101928215611041579160200282015b828111156110405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610fe8565b5b50905061104e9190611251565b5090565b82600781019282156110be579160200282015b828111156110bd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611065565b5b5090506110cb9190611251565b5090565b826002600302810192821561110f579160200282015b8281111561110e578251829060036110fe92919061126e565b50916020019190600301906110e5565b5b50905061111c91906112ae565b5090565b508054600082556006029060005260206000209081019061114191906112d2565b50565b50805460008255600202906000526020600020908101906111659190611325565b50565b8260028101928215611197579160200282015b8281111561119657825182559160200191906001019061117b565b5b5090506111a49190611251565b5090565b604051806101c001604052806111bc61135b565b81526020016111c961137d565b81526020016111d661139f565b8152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff16815260200161120a6113cc565b8152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600063ffffffff16815260200161124b6113ee565b81525090565b5b8082111561126a576000816000905550600101611252565b5090565b826003810192821561129d579160200282015b8281111561129c578251825591602001919060010190611281565b5b5090506112aa9190611251565b5090565b5b808211156112ce57600081816112c59190611411565b506003016112af565b5090565b5b808211156113215760008082016000905560018201600090556002820160006112fc9190611426565b60048201600090556005820160006101000a81549060ff0219169055506006016112d3565b5090565b5b80821115611357576000808201600090556001820160006101000a81549063ffffffff021916905550600201611326565b5090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060e00160405280600790602082028036833780820191505090505090565b60405180604001604052806002905b6113b6611434565b8152602001906001900390816113ae5790505090565b6040518060a00160405280600590602082028036833780820191505090505090565b604051806060016040528060008152602001600081526020016000151581525090565b50600081556001016000815560010160009055565b506000815560010160009055565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114b88261146f565b810181811067ffffffffffffffff821117156114d7576114d6611480565b5b80604052505050565b60006114ea611456565b90506114f682826114af565b919050565b600067ffffffffffffffff82111561151657611515611480565b5b602082029050919050565b600080fd5b6000819050919050565b61153981611526565b811461154457600080fd5b50565b60008135905061155681611530565b92915050565b600061156f61156a846114fb565b6114e0565b9050806020840283018581111561158957611588611521565b5b835b818110156115b2578061159e8882611547565b84526020840193505060208101905061158b565b5050509392505050565b600082601f8301126115d1576115d061146a565b5b60056115de84828561155c565b91505092915050565b600060a082840312156115fd576115fc611460565b5b600061160b848285016115bc565b91505092915050565b600080fd5b600061040082840312156116305761162f611614565b5b81905092915050565b600061040082840312156116505761164f611460565b5b600061165e84828501611619565b91505092915050565b600063ffffffff82169050919050565b61168081611667565b811461168b57600080fd5b50565b60008135905061169d81611677565b92915050565b6000602082840312156116b9576116b8611460565b5b60006116c78482850161168e565b91505092915050565b6000602082840312156116e6576116e5611460565b5b60006116f484828501611547565b91505092915050565b600067ffffffffffffffff82111561171857611717611480565b5b602082029050919050565b600067ffffffffffffffff82111561173e5761173d611480565b5b602082029050919050565b600061175c61175784611723565b6114e0565b9050806020840283018581111561177657611775611521565b5b835b8181101561179f578061178b8882611547565b845260208401935050602081019050611778565b5050509392505050565b600082601f8301126117be576117bd61146a565b5b60036117cb848285611749565b91505092915050565b60006117e76117e2846116fd565b6114e0565b9050806060840283018581111561180157611800611521565b5b835b8181101561182a578061181688826117a9565b845260208401935050606081019050611803565b5050509392505050565b600082601f8301126118495761184861146a565b5b60026118568482856117d4565b91505092915050565b600060c0828403121561187557611874611460565b5b600061188384828501611834565b91505092915050565b600080fd5b60008083601f8401126118a7576118a661146a565b5b8235905067ffffffffffffffff8111156118c4576118c361188c565b5b6020830191508360c08202830111156118e0576118df611521565b5b9250929050565b600080602083850312156118fe576118fd611460565b5b600083013567ffffffffffffffff81111561191c5761191b611465565b5b61192885828601611891565b92509250509250929050565b600067ffffffffffffffff82111561194f5761194e611480565b5b602082029050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119858261195a565b9050919050565b6119958161197a565b81146119a057600080fd5b50565b6000813590506119b28161198c565b92915050565b60006119cb6119c684611934565b6114e0565b905080602084028301858111156119e5576119e4611521565b5b835b81811015611a0e57806119fa88826119a3565b8452602084019350506020810190506119e7565b5050509392505050565b600082601f830112611a2d57611a2c61146a565b5b6007611a3a8482856119b8565b91505092915050565b600060e08284031215611a5957611a58611460565b5b6000611a6784828501611a18565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611aa581611526565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b6000611ad78383611a9c565b60208301905092915050565b6000602082019050919050565b611af981611aab565b611b038184611ab6565b9250611b0e82611ac1565b8060005b83811015611b3f578151611b268782611acb565b9650611b3183611ae3565b925050600181019050611b12565b505050505050565b600060ff82169050919050565b611b5d81611b47565b82525050565b60c082016000820151611b796000850182611a9c565b506020820151611b8c6020850182611a9c565b506040820151611b9f6040850182611af0565b506060820151611bb26080850182611a9c565b506080820151611bc560a0850182611b54565b50505050565b6000611bd78383611b63565b60c08301905092915050565b6000602082019050919050565b6000611bfb82611a70565b611c058185611a7b565b9350611c1083611a8c565b8060005b83811015611c41578151611c288882611bcb565b9750611c3383611be3565b925050600181019050611c14565b5085935050505092915050565b60006020820190508181036000830152611c688184611bf0565b905092915050565b600060608284031215611c8657611c85611614565b5b81905092915050565b600060608284031215611ca557611ca4611460565b5b6000611cb384828501611c70565b91505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000819050919050565b6000611d01611cfc611cf78461195a565b611cdc565b61195a565b9050919050565b6000611d1382611ce6565b9050919050565b6000611d2582611d08565b9050919050565b611d3581611d1a565b82525050565b6000611d478383611d2c565b60208301905092915050565b6000602082019050919050565b611d6981611cbc565b611d738184611cc7565b9250611d7e82611cd2565b8060005b83811015611daf578151611d968782611d3b565b9650611da183611d53565b925050600181019050611d82565b505050505050565b600060079050919050565b600081905092915050565b6000819050919050565b611de08161197a565b82525050565b6000611df28383611dd7565b60208301905092915050565b6000602082019050919050565b611e1481611db7565b611e1e8184611dc2565b9250611e2982611dcd565b8060005b83811015611e5a578151611e418782611de6565b9650611e4c83611dfe565b925050600181019050611e2d565b505050505050565b600060029050919050565b600081905092915050565b6000819050919050565b600060039050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611eb881611e82565b611ec28184611e8d565b9250611ecd82611e98565b8060005b83811015611efe578151611ee58782611acb565b9650611ef083611ea2565b925050600181019050611ed1565b505050505050565b6000611f128383611eaf565b60608301905092915050565b6000602082019050919050565b611f3481611e62565b611f3e8184611e6d565b9250611f4982611e78565b8060005b83811015611f7a578151611f618782611f06565b9650611f6c83611f1e565b925050600181019050611f4d565b505050505050565b611f8b81611667565b82525050565b600060059050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611fc781611f91565b611fd18184611f9c565b9250611fdc82611fa7565b8060005b8381101561200d578151611ff48782611acb565b9650611fff83611fb1565b925050600181019050611fe0565b505050505050565b60008115159050919050565b61202a81612015565b82525050565b6060820160008201516120466000850182611a9c565b5060208201516120596020850182611a9c565b50604082015161206c6040850182612021565b50505050565b610400820160008201516120896000850182611d60565b50602082015161209c6040850182611e0b565b5060408201516120b0610120850182611f2b565b5060608201516120c46101e0850182611f82565b5060808201516120d8610200850182611f82565b5060a08201516120ec610220850182611f82565b5060c0820151612100610240850182611fbe565b5060e08201516121146102e0850182611a9c565b50610100820151612129610300850182611a9c565b5061012082015161213e610320850182611a9c565b50610140820151612153610340850182612021565b50610160820151612168610360850182612021565b5061018082015161217d610380850182611f82565b506101a08201516121926103a0850182612030565b50505050565b6000610400820190506121ae6000830184612072565b92915050565b600080fd5b600067ffffffffffffffff8211156121d4576121d3611480565b5b602082029050919050565b60006121ea8261197a565b9050919050565b6121fa816121df565b811461220557600080fd5b50565b600081359050612217816121f1565b92915050565b600061223061222b846121b9565b6114e0565b9050806020840283018581111561224a57612249611521565b5b835b81811015612273578061225f8882612208565b84526020840193505060208101905061224c565b5050509392505050565b600082601f8301126122925761229161146a565b5b600261229f84828561221d565b91505092915050565b6122b181612015565b81146122bc57600080fd5b50565b6000813590506122ce816122a8565b92915050565b6000606082840312156122ea576122e96121b4565b5b6122f460606114e0565b9050600061230484828501611547565b600083015250602061231884828501611547565b602083015250604061232c848285016122bf565b60408301525092915050565b6000610400828403121561234f5761234e6121b4565b5b61235a6101c06114e0565b9050600061236a8482850161227d565b600083015250604061237e84828501611a18565b60208301525061012061239384828501611834565b6040830152506101e06123a88482850161168e565b6060830152506102006123bd8482850161168e565b6080830152506102206123d28482850161168e565b60a0830152506102406123e7848285016115bc565b60c0830152506102e06123fc84828501611547565b60e08301525061030061241184828501611547565b6101008301525061032061242784828501611547565b6101208301525061034061243d848285016122bf565b61014083015250610360612453848285016122bf565b610160830152506103806124698482850161168e565b610180830152506103a061247f848285016122d4565b6101a08301525092915050565b600061040082840312156124a3576124a2611460565b5b60006124b184828501612338565b91505092915050565b600082905092915050565b600060029050919050565b6000819050919050565b60006124e96020840184612208565b905092915050565b6000602082019050919050565b612507816124c5565b6125118184611cc7565b925061251c826124d0565b8060005b838110156125555761253282846124da565b61253c8782611d3b565b9650612547836124f1565b925050600181019050612520565b505050505050565b600082905092915050565b600060079050919050565b6000819050919050565b600061258c60208401846119a3565b905092915050565b6000602082019050919050565b6125aa81612568565b6125b48184611dc2565b92506125bf82612573565b8060005b838110156125f8576125d5828461257d565b6125df8782611de6565b96506125ea83612594565b9250506001810190506125c3565b505050505050565b600082905092915050565b600060029050919050565b6000819050919050565b82818337600083830152505050565b61263b60608383612620565b5050565b600061264b838361262f565b60608301905092915050565b600082905092915050565b6000606082019050919050565b6126788161260b565b6126828184611e6d565b925061268d82612616565b8060005b838110156126c6576126a38284612657565b6126ad878261263f565b96506126b883612662565b925050600181019050612691565b505050505050565b60006126dd602084018461168e565b905092915050565b600082905092915050565b6126fc60a08383612620565b5050565b600061270f6020840184611547565b905092915050565b600061272660208401846122bf565b905092915050565b600082905092915050565b6060820161274a6000830183612700565b6127576000850182611a9c565b506127656020830183612700565b6127726020850182611a9c565b506127806040830183612717565b61278d6040850182612021565b50505050565b61040082016127a560008301836124ba565b6127b260008501826124fe565b506127c0604083018361255d565b6127cd60408501826125a1565b506127dc610120830183612600565b6127ea61012085018261266f565b506127f96101e08301836126ce565b6128076101e0850182611f82565b506128166102008301836126ce565b612824610200850182611f82565b506128336102208301836126ce565b612841610220850182611f82565b506128506102408301836126e5565b61285e6102408501826126f0565b5061286d6102e0830183612700565b61287b6102e0850182611a9c565b5061288a610300830183612700565b612898610300850182611a9c565b506128a7610320830183612700565b6128b5610320850182611a9c565b506128c4610340830183612717565b6128d2610340850182612021565b506128e1610360830183612717565b6128ef610360850182612021565b506128fe6103808301836126ce565b61290c610380850182611f82565b5061291b6103a083018361272e565b6129296103a0850182612739565b50505050565b6000610400820190506129456000830184612793565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600067ffffffffffffffff82111561299557612994611480565b5b602082029050919050565b60006129b36129ae8461297a565b6114e0565b905080602084028301858111156129cd576129cc611521565b5b835b818110156129f657806129e28882611547565b8452602084019350506020810190506129cf565b5050509392505050565b600082601f830112612a1557612a1461146a565b5b6002612a228482856129a0565b91505092915050565b612a3481611b47565b8114612a3f57600080fd5b50565b600081359050612a5181612a2b565b92915050565b600060c08284031215612a6d57612a6c6121b4565b5b612a7760a06114e0565b90506000612a8784828501611547565b6000830152506020612a9b84828501611547565b6020830152506040612aaf84828501612a00565b6040830152506080612ac384828501611547565b60608301525060a0612ad784828501612a42565b60808301525092915050565b600060c08284031215612af957612af8611460565b5b6000612b0784828501612a57565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b4a82611526565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b7c57612b7b612b10565b5b600182019050919050565b600060608284031215612b9d57612b9c611460565b5b6000612bab848285016122d4565b91505092915050565b600082825260208201905092915050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c21602283612bb4565b9150612c2c82612bc5565b604082019050919050565b60006020820190508181036000830152612c5081612c14565b9050919050565b612c608161197a565b82525050565b6000602082019050612c7b6000830184612c57565b92915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612cb7601483612bb4565b9150612cc282612c81565b602082019050919050565b60006020820190508181036000830152612ce681612caa565b9050919050565b7f5061757361626c653a207061757365642c207472616e73666572206973206c6f60008201527f636b656400000000000000000000000000000000000000000000000000000000602082015250565b6000612d49602483612bb4565b9150612d5482612ced565b604082019050919050565b60006020820190508181036000830152612d7881612d3c565b905091905056fea2646970667358221220dce1d915c6fb4677a37e7ca296d656693d2d527ffc49aa556dba75fb360705a064736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806375830a31116100ad5780638ad15c21116100715780638ad15c211461027a5780639956d1db14610296578063c3f909d4146102b2578063d864d02a146102d0578063e0b6bb67146102ec57610121565b806375830a31146101fe57806383c7d1521461021a5780638456cb59146102365780638838640e146102405780638a1ad3251461025e57610121565b8063683da553116100f4578063683da55314610172578063685e2a9a1461018e57806369d40589146101aa5780636bcb63d6146101c65780636bfe99ec146101e257610121565b80633f4ba83a1461012657806341ef35c6146101305780635a9a664f1461014c57806364fa266714610156575b600080fd5b61012e6102f6565b005b61014a600480360381019061014591906115e7565b610308565b005b61015461032a565b005b610170600480360381019061016b9190611639565b61033c565b005b61018c600480360381019061018791906116a3565b61053b565b005b6101a860048036038101906101a391906116d0565b61056c565b005b6101c460048036038101906101bf91906116a3565b610583565b005b6101e060048036038101906101db91906116a3565b6105b4565b005b6101fc60048036038101906101f7919061185f565b6105e5565b005b610218600480360381019061021391906118e7565b610607565b005b610234600480360381019061022f9190611a43565b610790565b005b61023e6107b2565b005b6102486107c4565b6040516102559190611c4e565b60405180910390f35b610278600480360381019061027391906116a3565b6108a6565b005b610294600480360381019061028f91906116d0565b6108d7565b005b6102b060048036038101906102ab9190611c8f565b6108ee565b005b6102ba61094e565b6040516102c79190612198565b60405180910390f35b6102ea60048036038101906102e591906116d0565b610c52565b005b6102f4610c69565b005b6102fe610c7b565b610306610d16565b565b610310610c7b565b8060008001601001906005610326929190610f95565b5050565b610332610c7b565b61033a610d84565b565b610344610c7b565b600081803603810190610357919061248c565b90508060008001600082015181600001906002610375929190610fd5565b5060208201518160020190600761038d929190611052565b506040820151816009019060026103a59291906110cf565b50606082015181600f0160006101000a81548163ffffffff021916908363ffffffff160217905550608082015181600f0160046101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600f0160086101000a81548163ffffffff021916908363ffffffff16021790555060c082015181601001906005610432929190610f95565b5060e08201518160150155610100820151816016015561012082015181601701556101408201518160180160006101000a81548160ff0219169083151502179055506101608201518160180160016101000a81548160ff0219169083151502179055506101808201518160180160026101000a81548163ffffffff021916908363ffffffff1602179055506101a082015181601901600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555050509050507fe187417c9675ae5cc80acb8ab43a9ae12145aa303ca0ea50e84d060e5ef46aa78260405161052f919061292f565b60405180910390a15050565b610543610c7b565b806000800160180160026101000a81548163ffffffff021916908363ffffffff16021790555050565b610574610c7b565b80600080016015018190555050565b61058b610c7b565b8060008001600f0160086101000a81548163ffffffff021916908363ffffffff16021790555050565b6105bc610c7b565b8060008001600f0160046101000a81548163ffffffff021916908363ffffffff16021790555050565b6105ed610c7b565b80600080016009019060026106039291906110cf565b5050565b61060f610c7b565b6000601c0160006106209190611120565b6000601d0160006106319190611144565b60005b8282905081101561078b5760008383838181106106545761065361294b565b5b905060c0020180360381019061066a9190612ae3565b90506000601c0181908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000155602082015181600101556040820151816002019060026106c6929190611168565b506060820151816004015560808201518160050160006101000a81548160ff021916908360ff160217905550505060006040518060400160405280600081526020014263ffffffff1681525090506000601d018190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555050505050808061078390612b3f565b915050610634565b505050565b610798610c7b565b80600080016002019060076107ae929190611052565b5050565b6107ba610c7b565b6107c2610ddf565b565b60606000601c01805480602002602001604051908101604052809291908181526020016000905b8282101561089d57838290600052602060002090600602016040518060a001604052908160008201548152602001600182015481526020016002820160028060200260405190810160405280929190826002801561085e576020028201915b81548152602001906001019080831161084a575b50505050508152602001600482015481526020016005820160009054906101000a900460ff1660ff1660ff1681525050815260200190600101906107eb565b50505050905090565b6108ae610c7b565b8060008001600f0160006101000a81548163ffffffff021916908363ffffffff16021790555050565b6108df610c7b565b80600080016016018190555050565b6108f6610c7b565b6000818036038101906109099190612b87565b90508060008001601901600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050505050565b6109566111a8565b60008001604051806101c0016040529081600082016002806020026040519081016040528092919082600280156109d8576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161098e575b5050505050815260200160028201600780602002604051908101604052809291908260078015610a53576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a09575b5050505050815260200160098201600280602002604051908101604052809291906000905b82821015610ad157838260030201600380602002604051908101604052809291908260038015610abd576020028201915b815481526020019060010190808311610aa9575b505050505081526020019060010190610a78565b505050508152602001600f820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600f820160049054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600f820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160108201600580602002604051908101604052809291908260058015610b87576020028201915b815481526020019060010190808311610b73575b505050505081526020016015820154815260200160168201548152602001601782015481526020016018820160009054906101000a900460ff161515151581526020016018820160019054906101000a900460ff161515151581526020016018820160029054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016019820160405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff16151515158152505081525050905090565b610c5a610c7b565b80600080016017018190555050565b610c71610c7b565b610c79610e4d565b565b610c83610ea8565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0b90612c37565b60405180910390fd5b565b610d1e610ed5565b6000610d28610f1e565b905060008160000160180160016101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051610d799190612c66565b60405180910390a150565b6000610d8e610f1e565b905060008160000160180160006101000a81548160ff0219169083151502179055507f16fe33fab5fd851b7e9a856a666ea43cc5515bbb51689c3d370085d00441812360405160405180910390a150565b610de7610f23565b6000610df1610f1e565b905060018160000160180160016101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051610e429190612c66565b60405180910390a150565b6000610e57610f1e565b905060018160000160180160006101000a81548160ff0219169083151502179055507faa71a6e005bc4e0ea53d6184338a28d3f4737f18bed30c92d93a239ad5a7174760405160405180910390a150565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b610edd610f6d565b610f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1390612ccd565b60405180910390fd5b565b600090565b610f2b610f6d565b15610f6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6290612d5f565b60405180910390fd5b565b600080610f78610f1e565b90508060000160180160019054906101000a900460ff1691505090565b8260058101928215610fc4579160200282015b82811115610fc3578251825591602001919060010190610fa8565b5b509050610fd19190611251565b5090565b8260028101928215611041579160200282015b828111156110405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610fe8565b5b50905061104e9190611251565b5090565b82600781019282156110be579160200282015b828111156110bd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611065565b5b5090506110cb9190611251565b5090565b826002600302810192821561110f579160200282015b8281111561110e578251829060036110fe92919061126e565b50916020019190600301906110e5565b5b50905061111c91906112ae565b5090565b508054600082556006029060005260206000209081019061114191906112d2565b50565b50805460008255600202906000526020600020908101906111659190611325565b50565b8260028101928215611197579160200282015b8281111561119657825182559160200191906001019061117b565b5b5090506111a49190611251565b5090565b604051806101c001604052806111bc61135b565b81526020016111c961137d565b81526020016111d661139f565b8152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff16815260200161120a6113cc565b8152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600063ffffffff16815260200161124b6113ee565b81525090565b5b8082111561126a576000816000905550600101611252565b5090565b826003810192821561129d579160200282015b8281111561129c578251825591602001919060010190611281565b5b5090506112aa9190611251565b5090565b5b808211156112ce57600081816112c59190611411565b506003016112af565b5090565b5b808211156113215760008082016000905560018201600090556002820160006112fc9190611426565b60048201600090556005820160006101000a81549060ff0219169055506006016112d3565b5090565b5b80821115611357576000808201600090556001820160006101000a81549063ffffffff021916905550600201611326565b5090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060e00160405280600790602082028036833780820191505090505090565b60405180604001604052806002905b6113b6611434565b8152602001906001900390816113ae5790505090565b6040518060a00160405280600590602082028036833780820191505090505090565b604051806060016040528060008152602001600081526020016000151581525090565b50600081556001016000815560010160009055565b506000815560010160009055565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114b88261146f565b810181811067ffffffffffffffff821117156114d7576114d6611480565b5b80604052505050565b60006114ea611456565b90506114f682826114af565b919050565b600067ffffffffffffffff82111561151657611515611480565b5b602082029050919050565b600080fd5b6000819050919050565b61153981611526565b811461154457600080fd5b50565b60008135905061155681611530565b92915050565b600061156f61156a846114fb565b6114e0565b9050806020840283018581111561158957611588611521565b5b835b818110156115b2578061159e8882611547565b84526020840193505060208101905061158b565b5050509392505050565b600082601f8301126115d1576115d061146a565b5b60056115de84828561155c565b91505092915050565b600060a082840312156115fd576115fc611460565b5b600061160b848285016115bc565b91505092915050565b600080fd5b600061040082840312156116305761162f611614565b5b81905092915050565b600061040082840312156116505761164f611460565b5b600061165e84828501611619565b91505092915050565b600063ffffffff82169050919050565b61168081611667565b811461168b57600080fd5b50565b60008135905061169d81611677565b92915050565b6000602082840312156116b9576116b8611460565b5b60006116c78482850161168e565b91505092915050565b6000602082840312156116e6576116e5611460565b5b60006116f484828501611547565b91505092915050565b600067ffffffffffffffff82111561171857611717611480565b5b602082029050919050565b600067ffffffffffffffff82111561173e5761173d611480565b5b602082029050919050565b600061175c61175784611723565b6114e0565b9050806020840283018581111561177657611775611521565b5b835b8181101561179f578061178b8882611547565b845260208401935050602081019050611778565b5050509392505050565b600082601f8301126117be576117bd61146a565b5b60036117cb848285611749565b91505092915050565b60006117e76117e2846116fd565b6114e0565b9050806060840283018581111561180157611800611521565b5b835b8181101561182a578061181688826117a9565b845260208401935050606081019050611803565b5050509392505050565b600082601f8301126118495761184861146a565b5b60026118568482856117d4565b91505092915050565b600060c0828403121561187557611874611460565b5b600061188384828501611834565b91505092915050565b600080fd5b60008083601f8401126118a7576118a661146a565b5b8235905067ffffffffffffffff8111156118c4576118c361188c565b5b6020830191508360c08202830111156118e0576118df611521565b5b9250929050565b600080602083850312156118fe576118fd611460565b5b600083013567ffffffffffffffff81111561191c5761191b611465565b5b61192885828601611891565b92509250509250929050565b600067ffffffffffffffff82111561194f5761194e611480565b5b602082029050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119858261195a565b9050919050565b6119958161197a565b81146119a057600080fd5b50565b6000813590506119b28161198c565b92915050565b60006119cb6119c684611934565b6114e0565b905080602084028301858111156119e5576119e4611521565b5b835b81811015611a0e57806119fa88826119a3565b8452602084019350506020810190506119e7565b5050509392505050565b600082601f830112611a2d57611a2c61146a565b5b6007611a3a8482856119b8565b91505092915050565b600060e08284031215611a5957611a58611460565b5b6000611a6784828501611a18565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611aa581611526565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b6000611ad78383611a9c565b60208301905092915050565b6000602082019050919050565b611af981611aab565b611b038184611ab6565b9250611b0e82611ac1565b8060005b83811015611b3f578151611b268782611acb565b9650611b3183611ae3565b925050600181019050611b12565b505050505050565b600060ff82169050919050565b611b5d81611b47565b82525050565b60c082016000820151611b796000850182611a9c565b506020820151611b8c6020850182611a9c565b506040820151611b9f6040850182611af0565b506060820151611bb26080850182611a9c565b506080820151611bc560a0850182611b54565b50505050565b6000611bd78383611b63565b60c08301905092915050565b6000602082019050919050565b6000611bfb82611a70565b611c058185611a7b565b9350611c1083611a8c565b8060005b83811015611c41578151611c288882611bcb565b9750611c3383611be3565b925050600181019050611c14565b5085935050505092915050565b60006020820190508181036000830152611c688184611bf0565b905092915050565b600060608284031215611c8657611c85611614565b5b81905092915050565b600060608284031215611ca557611ca4611460565b5b6000611cb384828501611c70565b91505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000819050919050565b6000611d01611cfc611cf78461195a565b611cdc565b61195a565b9050919050565b6000611d1382611ce6565b9050919050565b6000611d2582611d08565b9050919050565b611d3581611d1a565b82525050565b6000611d478383611d2c565b60208301905092915050565b6000602082019050919050565b611d6981611cbc565b611d738184611cc7565b9250611d7e82611cd2565b8060005b83811015611daf578151611d968782611d3b565b9650611da183611d53565b925050600181019050611d82565b505050505050565b600060079050919050565b600081905092915050565b6000819050919050565b611de08161197a565b82525050565b6000611df28383611dd7565b60208301905092915050565b6000602082019050919050565b611e1481611db7565b611e1e8184611dc2565b9250611e2982611dcd565b8060005b83811015611e5a578151611e418782611de6565b9650611e4c83611dfe565b925050600181019050611e2d565b505050505050565b600060029050919050565b600081905092915050565b6000819050919050565b600060039050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611eb881611e82565b611ec28184611e8d565b9250611ecd82611e98565b8060005b83811015611efe578151611ee58782611acb565b9650611ef083611ea2565b925050600181019050611ed1565b505050505050565b6000611f128383611eaf565b60608301905092915050565b6000602082019050919050565b611f3481611e62565b611f3e8184611e6d565b9250611f4982611e78565b8060005b83811015611f7a578151611f618782611f06565b9650611f6c83611f1e565b925050600181019050611f4d565b505050505050565b611f8b81611667565b82525050565b600060059050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611fc781611f91565b611fd18184611f9c565b9250611fdc82611fa7565b8060005b8381101561200d578151611ff48782611acb565b9650611fff83611fb1565b925050600181019050611fe0565b505050505050565b60008115159050919050565b61202a81612015565b82525050565b6060820160008201516120466000850182611a9c565b5060208201516120596020850182611a9c565b50604082015161206c6040850182612021565b50505050565b610400820160008201516120896000850182611d60565b50602082015161209c6040850182611e0b565b5060408201516120b0610120850182611f2b565b5060608201516120c46101e0850182611f82565b5060808201516120d8610200850182611f82565b5060a08201516120ec610220850182611f82565b5060c0820151612100610240850182611fbe565b5060e08201516121146102e0850182611a9c565b50610100820151612129610300850182611a9c565b5061012082015161213e610320850182611a9c565b50610140820151612153610340850182612021565b50610160820151612168610360850182612021565b5061018082015161217d610380850182611f82565b506101a08201516121926103a0850182612030565b50505050565b6000610400820190506121ae6000830184612072565b92915050565b600080fd5b600067ffffffffffffffff8211156121d4576121d3611480565b5b602082029050919050565b60006121ea8261197a565b9050919050565b6121fa816121df565b811461220557600080fd5b50565b600081359050612217816121f1565b92915050565b600061223061222b846121b9565b6114e0565b9050806020840283018581111561224a57612249611521565b5b835b81811015612273578061225f8882612208565b84526020840193505060208101905061224c565b5050509392505050565b600082601f8301126122925761229161146a565b5b600261229f84828561221d565b91505092915050565b6122b181612015565b81146122bc57600080fd5b50565b6000813590506122ce816122a8565b92915050565b6000606082840312156122ea576122e96121b4565b5b6122f460606114e0565b9050600061230484828501611547565b600083015250602061231884828501611547565b602083015250604061232c848285016122bf565b60408301525092915050565b6000610400828403121561234f5761234e6121b4565b5b61235a6101c06114e0565b9050600061236a8482850161227d565b600083015250604061237e84828501611a18565b60208301525061012061239384828501611834565b6040830152506101e06123a88482850161168e565b6060830152506102006123bd8482850161168e565b6080830152506102206123d28482850161168e565b60a0830152506102406123e7848285016115bc565b60c0830152506102e06123fc84828501611547565b60e08301525061030061241184828501611547565b6101008301525061032061242784828501611547565b6101208301525061034061243d848285016122bf565b61014083015250610360612453848285016122bf565b610160830152506103806124698482850161168e565b610180830152506103a061247f848285016122d4565b6101a08301525092915050565b600061040082840312156124a3576124a2611460565b5b60006124b184828501612338565b91505092915050565b600082905092915050565b600060029050919050565b6000819050919050565b60006124e96020840184612208565b905092915050565b6000602082019050919050565b612507816124c5565b6125118184611cc7565b925061251c826124d0565b8060005b838110156125555761253282846124da565b61253c8782611d3b565b9650612547836124f1565b925050600181019050612520565b505050505050565b600082905092915050565b600060079050919050565b6000819050919050565b600061258c60208401846119a3565b905092915050565b6000602082019050919050565b6125aa81612568565b6125b48184611dc2565b92506125bf82612573565b8060005b838110156125f8576125d5828461257d565b6125df8782611de6565b96506125ea83612594565b9250506001810190506125c3565b505050505050565b600082905092915050565b600060029050919050565b6000819050919050565b82818337600083830152505050565b61263b60608383612620565b5050565b600061264b838361262f565b60608301905092915050565b600082905092915050565b6000606082019050919050565b6126788161260b565b6126828184611e6d565b925061268d82612616565b8060005b838110156126c6576126a38284612657565b6126ad878261263f565b96506126b883612662565b925050600181019050612691565b505050505050565b60006126dd602084018461168e565b905092915050565b600082905092915050565b6126fc60a08383612620565b5050565b600061270f6020840184611547565b905092915050565b600061272660208401846122bf565b905092915050565b600082905092915050565b6060820161274a6000830183612700565b6127576000850182611a9c565b506127656020830183612700565b6127726020850182611a9c565b506127806040830183612717565b61278d6040850182612021565b50505050565b61040082016127a560008301836124ba565b6127b260008501826124fe565b506127c0604083018361255d565b6127cd60408501826125a1565b506127dc610120830183612600565b6127ea61012085018261266f565b506127f96101e08301836126ce565b6128076101e0850182611f82565b506128166102008301836126ce565b612824610200850182611f82565b506128336102208301836126ce565b612841610220850182611f82565b506128506102408301836126e5565b61285e6102408501826126f0565b5061286d6102e0830183612700565b61287b6102e0850182611a9c565b5061288a610300830183612700565b612898610300850182611a9c565b506128a7610320830183612700565b6128b5610320850182611a9c565b506128c4610340830183612717565b6128d2610340850182612021565b506128e1610360830183612717565b6128ef610360850182612021565b506128fe6103808301836126ce565b61290c610380850182611f82565b5061291b6103a083018361272e565b6129296103a0850182612739565b50505050565b6000610400820190506129456000830184612793565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600067ffffffffffffffff82111561299557612994611480565b5b602082029050919050565b60006129b36129ae8461297a565b6114e0565b905080602084028301858111156129cd576129cc611521565b5b835b818110156129f657806129e28882611547565b8452602084019350506020810190506129cf565b5050509392505050565b600082601f830112612a1557612a1461146a565b5b6002612a228482856129a0565b91505092915050565b612a3481611b47565b8114612a3f57600080fd5b50565b600081359050612a5181612a2b565b92915050565b600060c08284031215612a6d57612a6c6121b4565b5b612a7760a06114e0565b90506000612a8784828501611547565b6000830152506020612a9b84828501611547565b6020830152506040612aaf84828501612a00565b6040830152506080612ac384828501611547565b60608301525060a0612ad784828501612a42565b60808301525092915050565b600060c08284031215612af957612af8611460565b5b6000612b0784828501612a57565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b4a82611526565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b7c57612b7b612b10565b5b600182019050919050565b600060608284031215612b9d57612b9c611460565b5b6000612bab848285016122d4565b91505092915050565b600082825260208201905092915050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c21602283612bb4565b9150612c2c82612bc5565b604082019050919050565b60006020820190508181036000830152612c5081612c14565b9050919050565b612c608161197a565b82525050565b6000602082019050612c7b6000830184612c57565b92915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612cb7601483612bb4565b9150612cc282612c81565b602082019050919050565b60006020820190508181036000830152612ce681612caa565b9050919050565b7f5061757361626c653a207061757365642c207472616e73666572206973206c6f60008201527f636b656400000000000000000000000000000000000000000000000000000000602082015250565b6000612d49602483612bb4565b9150612d5482612ced565b604082019050919050565b60006020820190508181036000830152612d7881612d3c565b905091905056fea2646970667358221220dce1d915c6fb4677a37e7ca296d656693d2d527ffc49aa556dba75fb360705a064736f6c634300080f0033",
  "devdoc": {
    "author": "Decentralized Foundation Team",
    "kind": "dev",
    "methods": {},
    "title": "ERC721Facet EIP-2535 Diamond Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4258,
        "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4510_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)7_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[7]",
        "numberOfBytes": "224"
      },
      "t_array(t_array(t_uint256)3_storage)2_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][2]",
        "numberOfBytes": "192"
      },
      "t_array(t_contract(IERC20)737)2_storage": {
        "base": "t_contract(IERC20)737",
        "encoding": "inplace",
        "label": "contract IERC20[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(GemTypeConfig)4404_storage)dyn_storage": {
        "base": "t_struct(GemTypeConfig)4404_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GemTypeMintWindow)4409_storage)dyn_storage": {
        "base": "t_struct(GemTypeMintWindow)4409_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeMintWindow[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)737": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Booster)4431": {
        "encoding": "inplace",
        "label": "enum Booster",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(Booster)4431)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum Booster)",
        "numberOfBytes": "32",
        "value": "t_enum(Booster)4431"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Fi)4452_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Fi)",
        "numberOfBytes": "32",
        "value": "t_struct(Fi)4452_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Gem)4467_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gem)",
        "numberOfBytes": "32",
        "value": "t_struct(Gem)4467_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4510_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4470,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "config",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ProtocolConfig)4391_storage"
          },
          {
            "astId": 4474,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gemTypes",
            "offset": 0,
            "slot": "28",
            "type": "t_array(t_struct(GemTypeConfig)4404_storage)dyn_storage"
          },
          {
            "astId": 4478,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gemTypesMintWindows",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_struct(GemTypeMintWindow)4409_storage)dyn_storage"
          },
          {
            "astId": 4481,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "defoTokenLimitWindow",
            "offset": 0,
            "slot": "30",
            "type": "t_struct(DEFOTokenLimitWindow)4418_storage"
          },
          {
            "astId": 4486,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gems",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_uint256,t_struct(Gem)4467_storage)"
          },
          {
            "astId": 4489,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "nft",
            "offset": 0,
            "slot": "33",
            "type": "t_struct(ERC721Storage)4326_storage"
          },
          {
            "astId": 4492,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "total",
            "offset": 0,
            "slot": "46",
            "type": "t_struct(Fi)4452_storage"
          },
          {
            "astId": 4497,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "usersFi",
            "offset": 0,
            "slot": "56",
            "type": "t_mapping(t_address,t_struct(Fi)4452_storage)"
          },
          {
            "astId": 4501,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "usersNextGemTypeToBoost",
            "offset": 0,
            "slot": "57",
            "type": "t_mapping(t_address,t_uint8)"
          },
          {
            "astId": 4506,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "usersNextGemBooster",
            "offset": 0,
            "slot": "58",
            "type": "t_mapping(t_address,t_enum(Booster)4431)"
          },
          {
            "astId": 4509,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "defoTokenLimitPerRewards",
            "offset": 0,
            "slot": "59",
            "type": "t_struct(DEFOTokenLimitPerRewards)4427_storage"
          }
        ],
        "numberOfBytes": "1952"
      },
      "t_struct(Counter)2712_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2711,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DEFOTokenLimitPerRewards)4427_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitPerRewards",
        "members": [
          {
            "astId": 4422,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4426,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "timeOfWindowStart",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DEFOTokenLimitWindow)4418_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitWindow",
        "members": [
          {
            "astId": 4413,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4417,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "timeOfLastSale",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefoTokenLimitConfig)4350_storage": {
        "encoding": "inplace",
        "label": "struct DefoTokenLimitConfig",
        "members": [
          {
            "astId": 4345,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "saleLimitPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4347,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "saleLimitAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4349,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "limitByReward",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ERC721Storage)4326_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage",
        "members": [
          {
            "astId": 4281,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4283,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4286,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokenIdTracker",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Counter)2712_storage"
          },
          {
            "astId": 4290,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "owners",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4294,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "balances",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4298,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "tokenApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4304,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "operatorApprovals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 4306,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4312,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "ownedTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 4316,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "ownedTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4319,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "allTokens",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4323,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "allTokensIndex",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4325,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "init",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Fi)4452_storage": {
        "encoding": "inplace",
        "label": "struct Fi",
        "members": [
          {
            "astId": 4433,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "claimedGross",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4435,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "claimedNet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4437,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "stakedGross",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4439,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "stakedNet",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4441,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "unStakedGross",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4443,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "unStakedGrossUp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4445,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "unStakedNet",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4447,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "donated",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4449,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "claimTaxPaid",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4451,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "vaultTaxPaid",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Gem)4467_storage": {
        "encoding": "inplace",
        "label": "struct Gem",
        "members": [
          {
            "astId": 4454,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "gemTypeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4457,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "booster",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Booster)4431"
          },
          {
            "astId": 4459,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintTime",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4461,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "lastRewardWithdrawalTime",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4463,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "lastMaintenanceTime",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4466,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "fi",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Fi)4452_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(GemTypeConfig)4404_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeConfig",
        "members": [
          {
            "astId": 4393,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "maintenanceFeeDai",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4395,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "rewardAmountDefo",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4399,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 4401,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taperRewardsThresholdDefo",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4403,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "maxMintsPerLimitWindow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(GemTypeMintWindow)4409_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeMintWindow",
        "members": [
          {
            "astId": 4406,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4408,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "endOfMintLimitWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProtocolConfig)4391_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolConfig",
        "members": [
          {
            "astId": 4355,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "paymentTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20)737)2_storage"
          },
          {
            "astId": 4359,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "wallets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)7_storage"
          },
          {
            "astId": 4365,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "incomeDistributionOnMint",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_array(t_uint256)3_storage)2_storage"
          },
          {
            "astId": 4367,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "maintenancePeriod",
            "offset": 0,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4369,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "rewardPeriod",
            "offset": 4,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4371,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taxScaleSinceLastClaimPeriod",
            "offset": 8,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4375,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taxRates",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_uint256)5_storage"
          },
          {
            "astId": 4377,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "charityContributionRate",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 4379,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "vaultWithdrawalTaxRate",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 4381,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "taperRate",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 4383,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintLock",
            "offset": 0,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4385,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "transferLock",
            "offset": 1,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4387,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "mintLimitWindow",
            "offset": 2,
            "slot": "24",
            "type": "t_uint32"
          },
          {
            "astId": 4390,
            "contract": "contracts/facets/ConfigFacet.sol:ConfigFacet",
            "label": "defoTokenLimitConfig",
            "offset": 0,
            "slot": "25",
            "type": "t_struct(DefoTokenLimitConfig)4350_storage"
          }
        ],
        "numberOfBytes": "896"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}