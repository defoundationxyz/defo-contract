{
  "address": "0xd65b7A5FC3C5081b5dC331d1aff6493CCC161740",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberOfWinners",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "lotteryStart",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "periodicity",
          "type": "uint32"
        }
      ],
      "name": "LotteryConfigured",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "winners",
          "type": "uint256[]"
        }
      ],
      "name": "LotteryWinnersDetermined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGross",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountNet",
          "type": "uint256"
        }
      ],
      "name": "UnStaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfWinners",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_lotteryStart",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_periodicity",
          "type": "uint32"
        }
      ],
      "name": "configureLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedAllGems",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalStakedAllUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_timestamp",
          "type": "uint32"
        }
      ],
      "name": "lotteryWinners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unStakeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbec8b5f350b68df2e4f7f052496c6559c3ea3310e3a4d736542457322dba06f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x05309918A451156C2cE41f3C8dF89672ce83e944",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1307997",
    "logsBloom": "0x
    "blockHash": "0xda6f73a298154cdd84d0cba99fb7f3b9314847f3ddde9ff08b13a7c54cb81027",
    "transactionHash": "0xdbec8b5f350b68df2e4f7f052496c6559c3ea3310e3a4d736542457322dba06f",
    "logs": [],
    "blockNumber": 13552307,
    "cumulativeGasUsed": "1307997",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "313fcc61f600e4a46006002a7f30bc9d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"lotteryStart\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"periodicity\",\"type\":\"uint32\"}],\"name\":\"LotteryConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"winners\",\"type\":\"uint256[]\"}],\"name\":\"LotteryWinnersDetermined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGross\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNet\",\"type\":\"uint256\"}],\"name\":\"UnStaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_lotteryStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_periodicity\",\"type\":\"uint32\"}],\"name\":\"configureLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedAllGems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedAllUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_timestamp\",\"type\":\"uint32\"}],\"name\":\"lotteryWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Decentralized Foundation Team\",\"kind\":\"dev\",\"methods\":{\"configureLottery(uint256,uint32,uint32)\":{\"params\":{\"_lotteryStart\":\"lottery start moment to remember, blocktime format, zero for blocktime\",\"_numberOfWinners\":\"number of winners of the vault lottery\",\"_periodicity\":\"periodicity in seconds, initially weekly\"}},\"getStaked(uint256)\":{\"params\":{\"_tokenId\":\"yield gem id\"},\"returns\":{\"_0\":\"amount in DEFO (wei precision)\"}},\"getStakedAllGems()\":{\"returns\":{\"amounts_\":\"array of amounts (gross, currently in the vault)\",\"tokenIds_\":\"array of staked tokenIds\"}},\"getTotalStaked()\":{\"returns\":{\"_0\":\"amount in DEFO (wei precision)\"}},\"getTotalStakedAllUsers()\":{\"returns\":{\"_0\":\"amount in DEFO (wei precision)\"}},\"lotteryWinners(uint32)\":{\"details\":\"the ones related to the requested period are put to the storage to return the same number in the future\",\"params\":{\"_timestamp\":\"moment of the query, zero if now\"},\"returns\":{\"_0\":\"addresses of the lottery winners\"}},\"unStakeReward(uint256,uint256)\":{\"params\":{\"_amount\":\"amount to remove from the vault in DEFO (wei precision)\",\"_tokenId\":\"yield gem id\"}}},\"title\":\"VaultFacet EIP-2535 Diamond Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configureLottery(uint256,uint32,uint32)\":{\"notice\":\"vault lottery configuration\"},\"getStaked(uint256)\":{\"notice\":\"get DEFO amount currently in the vault for a specific yield gem\"},\"getStakedAllGems()\":{\"notice\":\"get DEFO amount currently in the vault for all user's yield gems\"},\"getTotalStaked()\":{\"notice\":\"get amount currently in the vault for sender\"},\"getTotalStakedAllUsers()\":{\"notice\":\"get amount currently in the vault for all protocol users\"},\"lotteryWinners(uint32)\":{\"notice\":\"gets lottery winners in the lottery interval containing _timestamp\"},\"unStakeReward(uint256,uint256)\":{\"notice\":\"remove DEFO amount from the vault back to the unclaimed rewards\"}},\"notice\":\"Vault functionality - unStake, lottery, and getters\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/VaultFacet.sol\":\"VaultFacet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/base-facet/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n/**\\n * @title  BaseFacet\\n * @author Decentralized Foundation Team\\n * @notice BaseFacet is a base contract all facets to inherit, includes cross-facet utils and  common reusable functions for DEFO Diamond\\n */\\ncontract BaseFacet is Storage {\\n\\n    /* ====================== Modifiers ====================== */\\n\\n    modifier exists(uint256 _tokenId) {\\n        _requireExists(_tokenId);\\n        _;\\n    }\\n\\n    modifier onlyGemHolder(uint256 _tokenId) {\\n        require(s.nft.owners[_tokenId] == _msgSender(), \\\"You don't own this gem\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n    modifier nonZeroAddress(address _owner) {\\n        require(_owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        _;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _msgSender() internal override view returns (address sender_) {\\n        if (Context._msgSender() == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function _getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function _requireExists(uint256 _tokenId) internal view {\\n        require(_exists(_tokenId), \\\"ERC721: tokenId is not valid\\\");\\n    }\\n\\n    function _exists(uint256 _tokenId) internal view returns (bool) {\\n        return (s.nft.owners[_tokenId] != address(0));\\n    }\\n\\n    ///todo ensure passing memory array here to the public functions is pretty optimal\\n    function _getGemIds(address _user) internal view returns (uint256[] memory) {\\n        uint256 numberOfGems = s.nft.balances[_user];\\n        uint256[] memory gemIds = new uint256[](numberOfGems);\\n        for (uint256 i = 0; i < numberOfGems; i++) {\\n            uint256 gemId = s.nft.ownedTokens[_user][i];\\n            require(_exists(gemId), \\\"A gem doesn't exists\\\");\\n            gemIds[i] = gemId;\\n        }\\n        return gemIds;\\n    }\\n\\n    function _getAllUsers() internal view returns (address[] memory users_) {\\n        users_ = new address[](s.nft.allTokens.length);\\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\\n            users_[tokenId] = s.nft.owners[tokenId];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5ee18d83372dec082d66a9c61a88c6b5c034a741118da8be0524f9f1ed4f4b13\",\"license\":\"GPL-3.0\"},\"contracts/base-facet/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {AppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0x66f07eea1ae3a0fbf40fbf070d67bed29b4a0a2dfbb689f58292d28b5065418a\",\"license\":\"GPL-3.0\"},\"contracts/data-types/IDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n/**\\n*   @dev The only source for all the data structures used in the protocol storage\\n*   @dev This includes general config, gem type config, and mutable data\\n*/\\n\\n/// @dev number of payment tokens to enumerate the error, initially it's Defo and Dai,\\n/// @dev see PaymentTokens enum\\nuint256 constant PAYMENT_TOKENS = 2;\\n\\n/// @dev number of income recievers on yield gem mint\\nuint256 constant PAYMENT_RECEIVERS = 3;\\n\\n/// @dev total wallets on the protocol, see Wallets enum\\nuint256 constant WALLETS = 7;\\n\\n/// @dev total number of supported tax tiers\\nuint256 constant TAX_TIERS = 5;\\n\\n/**\\n*   @notice a struct for data compliance with erc721 standard\\n*   @param name Token name\\n*   @param symbol Token symbol\\n*   @param owners Mapping from token ID to owner address\\n*   @param balances Mapping owner address to token count\\n*   @param tokenApprovals Mapping from token ID to approved address\\n*   @param operatorApprovals Mapping from owner to operator approvals\\n*   @param ownedTokens Mapping from owner to list of owned token IDs\\n*   @param ownedTokensIndex Mapping from token ID to index of the owner tokens list\\n*   @param allTokens Array with all token ids, used for enumeration\\n*   @param allTokensIndex Mapping from token id to position in the allTokens array\\n*/\\n    struct ERC721Storage {\\n        string name;\\n        string symbol;\\n        Counters.Counter tokenIdTracker;\\n        mapping(uint256 => address) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n        string baseURI;\\n        mapping(address => mapping(uint256 => uint256)) ownedTokens;\\n        mapping(uint256 => uint256) ownedTokensIndex;\\n        uint256[] allTokens;\\n        mapping(uint256 => uint256) allTokensIndex;\\n        bool init;\\n    }\\n\\n\\n/// @notice token enum to index arrays of rates and addresses, the convention is that Dai is at place 0, Defo is at 1\\n/// @dev the order is extremely important once deployed\\n    enum PaymentTokens {\\n        Dai,\\n        Defo\\n    }\\n\\n/// @notice protocol wallets for easy enumeration,\\n/// @dev the order is extremely important once deployed, see configuration scripts\\n    enum Wallets {\\n        Treasury,\\n        RewardPool,\\n        LiquidityPair,\\n        Team,\\n        Charity,\\n        Vault,\\n        RedeemContract\\n    }\\n\\n\\n/// @notice these tiers correspond to the configurable percentage from the diamond storage\\n    enum TaxTiers {\\n        Tier0NoPayment,\\n        Tier1HugeTax,\\n        Tier2MediumTax,\\n        Tier3SmallTax,\\n        Tier4NoTax\\n    }\\n\\n/**\\n * @notice DefoTokenLimitConfig DEFO ERC20 Token transfer limiter, this is for the 1000 DEFO per 24h sale limitation, can be changes with setTransferLimit\\n * @param saleLimitPeriod initially 1 day\\n * @param saleLimitAmount initially 1000 tokens\\n*/\\n    struct DefoTokenLimitConfig {\\n        uint256 saleLimitPeriod;\\n        uint256 saleLimitAmount;\\n        bool limitByReward;\\n    }\\n\\n/**\\n * @notice Main Protocol Configuration structure\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set, including no minting\\n     * @param incomeDistributionOnMint distribution of the payment among tokens in percent rates, all values use percentage multiplier (see percent helper), here addresses are from the Addresses\\n     * @param maintenancePeriod a period in seconds for maintenance fee accrual, initially one month\\n     * @param rewardPeriod a period in seconds for generating yield gem rewards, initially one week\\n     * @param mintCountResetPeriod a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs.\\n     * @param taxScaleSinceLastClaimPeriod a period in seconds for a tax scale to work out, initially one week\\n     * @param taxRates tax rates in percent (with percent multiplier, see percent helper contract), initially 30%, 30%, 15%, 0\\n     * @param charityContributionRate charity rate (w multiplier as all percent values in the project), initially 5%\\n     * @param vaultWithdrawalRate fee paid to withdraw amount from the vault back to the earned rewards, initially 10%\\n     * @param taperRate taper rate, initially 20%\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set\\n     * @param mintLimitWindow a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs, see GemTypeConfig.maxMintsPerLimitWindow\\n     */\\n\\n    struct ProtocolConfig {\\n        IERC20[PAYMENT_TOKENS] paymentTokens;\\n        address[WALLETS] wallets;\\n        uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] incomeDistributionOnMint;\\n        // time periods\\n        uint32 maintenancePeriod;\\n        uint32 rewardPeriod;\\n        uint32 taxScaleSinceLastClaimPeriod;\\n        // taxes and contributions\\n        uint256[TAX_TIERS] taxRates;\\n        uint256 charityContributionRate;\\n        uint256 vaultWithdrawalTaxRate;\\n        uint256 taperRate;\\n        // locks\\n        bool mintLock;\\n        bool transferLock;\\n        // mint limit period for coutner reset\\n        uint32 mintLimitWindow;\\n        DefoTokenLimitConfig defoTokenLimitConfig;\\n    }\\n\\n/**\\n * @notice A struct containing configuration details for gemType\\n     * @param maintenanceFee Maintenance fee in Dai for the node type, amount in wei per month\\n     * @param rewardAmountDefo Reward in DEFO for the node type, amount in wei per week\\n     * @param price Price in DEFO and DAI (in wei), respectively, according to the PaymentTokens enum\\n     * @param taperRewardsThresholdDefo Taper threshold, in wei, decreasing rate every given amount of rewards in DEFO\\n     * @param maxMintsPerLimitWindow number of gems, mint limit for a node type, see ProtocolConfig.mintLimitWindow\\n     */\\n    struct GemTypeConfig {\\n        uint256 maintenanceFeeDai;\\n        uint256 rewardAmountDefo;\\n        uint256[PAYMENT_TOKENS] price;\\n        uint256 taperRewardsThresholdDefo;\\n        uint8 maxMintsPerLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct containing current mutable status for gemType\\n     * @param mintCount counter incrementing by one on every mint, during mintCountResetPeriod; after mintCountResetPeriod with no mints, reset to 0\\n     * @param endOfMintLimitWindow a moment to reset the mintCount counter to zero, set the new endOfMintLimitWindow and start over\\n     */\\n    struct GemTypeMintWindow {\\n        uint256 mintCount;\\n        uint32 endOfMintLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct describing current DEFO Token limiter input\\n * @param tokensSold DEFO tokens sold per limit window, \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfLastSale time of last sale\\n     */\\n    struct DEFOTokenLimitWindow {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfLastSale;\\n    }\\n\\n/**\\n * @notice A struct describing DEFO Token limit per weekly rewards\\n * @param tokensSold DEFO tokens sold per reward period window starting from the first sale \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfWindowStart time of first sale in the window\\n     */\\n    struct DEFOTokenLimitPerRewards {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfWindowStart;\\n    }\\n\\n    enum Booster {\\n        None,\\n        Delta,\\n        Omega\\n    }\\n\\n/**\\n * @notice A struct describing financial state, provides the complete state for user, gem, or protocol total.\\n * @notice It gives the current exact balance of the Vault, Rewards, and Charity.\\n * @param claimedGross rewards amount previously claimed for all time, gross amount - before tax and charity\\n * @param claimedNet rewards claimed and to user, net amount after tax and charity\\n * @param stakedGross amount removed from rewards to stake, charity not yet deducted\\n * @param stakedNet amount put to the vault - charity has been deducted\\n * @param unStakedGross  amount removed from the vault, pre withdraw tax and charity\\n * @param unStakedGrossUpped  amount removed from the vault gross-upped with charity to equal to the stakedGross amount\\n * @param unStakedNet  amount returned to the earned rewards, post withdraw tax and charity\\n * @param donated sent to charity\\n * @param claimTaxPaid claim tax deducted - 30%, 15%, 15%\\n * @param vaultTaxPaid vault withdrawal tax deducted\\n     */\\n    struct Fi {\\n        uint256 claimedGross;\\n        uint256 claimedNet;\\n        uint256 stakedGross;\\n        uint256 stakedNet;\\n        uint256 unStakedGross;\\n        uint256 unStakedGrossUp;\\n        uint256 unStakedNet;\\n        uint256 donated;\\n        uint256 claimTaxPaid;\\n        uint256 vaultTaxPaid;\\n    }\\n\\n/**\\n * @notice current state of a gem, a gem is an instance with consistent yield and fee rates specified by the pair (gemType, booster)\\n * @param gemType node type, initially it's  0 -> Ruby , 1 -> Sapphire, 2 -> Diamond, and boosters\\n * @param booster node Booster 0 -> None , 1 -> Delta , 2 -> Omega\\n * @param mintTime timestamp of the mint time\\n * @param lastRewardWithdrawalTime timestamp of last reward claim OR stake. Same as mintTime if not yet claimed.\\n * @param lastMaintenanceTime timestamp of the last maintenance (could be a date in the future in case of the upfront payment)\\n * @param presold flag that this gem was bought on presale, used to avoid double minting\\n*/\\n    struct Gem {\\n        uint8 gemTypeId;\\n        Booster booster;\\n        uint32 mintTime;\\n        uint32 lastRewardWithdrawalTime;\\n        uint32 lastMaintenanceTime;\\n        Fi fi;\\n        bool presold;\\n    }\\n\\n/**\\n*   @notice Main Contract Storage utilizing App Storage pattern for Diamond Proxy data organization\\n*   @param config main configuration, basically everything except gemType specific\\n*   @param gemTypes supported gem types with their details, gemTypeId is the index of the array\\n*   @param gems mapping indexed by tokenId, where tokenId is in the nft.allTokens\\n*   @param gemTypesMintWindows windows for limiting yield gem mints per gem type\\n*   @param defoTokenLimitWindow window for limiting DEFO Token sale\\n*   @param nft ERC721 standard related storage\\n*   @param total cumulated amounts for all operations\\n*   @param usersFi financial info per each user\\n*   @param usersNextGemBooster used for presale, number (uint256) of boosters (Booster) with a type (uint8) left for a user (address)\\n*/\\n    struct AppStorage {\\n        // configuration\\n        ProtocolConfig config;\\n        GemTypeConfig[] gemTypes;\\n        // current state\\n        GemTypeMintWindow[] gemTypesMintWindows;\\n        DEFOTokenLimitWindow defoTokenLimitWindow;\\n        mapping(uint256 => Gem) gems;\\n        ERC721Storage nft;\\n        // Cumulations\\n        Fi total;\\n        // User data, users list is s.nft.owners, size s.nft.allTokens.length (managed by ERC721Enumerable)\\n        mapping(address => Fi) usersFi;\\n        mapping(address => mapping(uint8 => mapping(Booster => uint256))) usersNextGemBooster;\\n        DEFOTokenLimitPerRewards defoTokenLimitPerRewards;\\n    }\\n\",\"keccak256\":\"0xb9142aff76cbd71e85e3873441cdcfda2ff4482ac25000d410d2ef2ecc7af023\",\"license\":\"GPL-3.0\"},\"contracts/facets/VaultFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../base-facet/BaseFacet.sol\\\";\\nimport \\\"../libraries/LibDonations.sol\\\";\\nimport \\\"../libraries/PercentHelper.sol\\\";\\nimport \\\"../libraries/BoosterHelper.sol\\\";\\nimport \\\"../libraries/PeriodicHelper.sol\\\";\\nimport \\\"../libraries/TimeHelper.sol\\\";\\nimport \\\"../libraries/TaxHelper.sol\\\";\\nimport \\\"../libraries/FiHelper.sol\\\";\\n\\n/** @title  VaultFacet EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice Vault functionality - unStake, lottery, and getters\\n*/\\ncontract VaultFacet is BaseFacet, IVault {\\n    using FiHelper for Fi;\\n\\n    /* ============ External and Public Functions ============ */\\n    function unStakeReward(uint256 _tokenId, uint256 _amount) external onlyGemHolder(_tokenId) {\\n        address user = _msgSender();\\n        Gem storage gem = s.gems[_tokenId];\\n        uint256 vaultAmount = gem.fi.stakedNet - gem.fi.unStakedGross;\\n        require(vaultAmount >= _amount, \\\"Not enough amount in the vault for the gem\\\");\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        address[WALLETS] storage wallets = s.config.wallets;\\n        Fi memory op;\\n\\n        op.unStakedGross = _amount;\\n        op.unStakedGrossUp = PercentHelper.grossUp(_amount, s.config.charityContributionRate);\\n        // sending withdrawal tax to the reward wallet\\n        uint256 discountedFee = BoosterHelper.reduceVaultWithdrawalFee(gem.booster, s.config.vaultWithdrawalTaxRate);\\n        op.vaultTaxPaid = PercentHelper.rate(_amount, discountedFee);\\n        defo.transferFrom(\\n            wallets[uint(Wallets.Vault)],\\n            wallets[uint(Wallets.RewardPool)],\\n            op.vaultTaxPaid);\\n\\n        op.unStakedNet = _amount - op.vaultTaxPaid;\\n\\n        defo.transferFrom(\\n            wallets[uint(Wallets.Vault)],\\n            wallets[uint(Wallets.RewardPool)],\\n            op.unStakedNet);\\n\\n        emit UnStaked(user, op.unStakedGross, op.unStakedNet);\\n        op.updateStorage(_tokenId, user);\\n    }\\n\\n    function configureLottery(uint256 _numberOfWinners, uint32 _lotteryStart, uint32 _periodicity) external {\\n\\n    }\\n\\n    function getStaked(uint256 _tokenId) external view returns (uint256) {\\n        return s.gems[_tokenId].fi.stakedNet - s.gems[_tokenId].fi.unStakedGross;\\n    }\\n\\n    function getStakedAllGems() external view returns (uint256[] memory tokenIds_, uint256[] memory amounts_) {\\n        address user = _msgSender();\\n        tokenIds_ = _getGemIds(user);\\n        amounts_ = new uint256[](tokenIds_.length);\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            uint256 tokenId = tokenIds_[i];\\n            amounts_[i] = s.gems[tokenId].fi.stakedNet - s.gems[tokenId].fi.unStakedGross;\\n        }\\n        return (tokenIds_, amounts_);\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        address user = _msgSender();\\n        return s.usersFi[user].stakedNet - s.usersFi[user].unStakedGross;\\n    }\\n\\n    function getTotalStakedAllUsers() external view returns (uint256) {\\n        return s.total.stakedNet - s.total.unStakedGross;\\n    }\\n\\n    function lotteryWinners(uint32 _timestamp) external view returns (address[] memory) {\\n\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdb8e2f845cb03e12c9e0f7640aa6e955083001b52c707552fe243b7ac7cfd665\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\n/** @title  IVault EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice Vault Interface - unStake, lottery, and getters\\n*/\\ninterface IVault {\\n    // @dev here if we unStake, say, 100 DEFO from the vault, the  amountGross is unStaked, amountNet comes back to earned rewards\\n    event UnStaked(address indexed user, uint256 amountGross, uint256 amountNet);\\n    event LotteryConfigured(uint256 numberOfWinners, uint32 lotteryStart, uint32 periodicity);\\n    event LotteryWinnersDetermined(uint256[] winners);\\n\\n    /**\\n    * @notice remove DEFO amount from the vault back to the unclaimed rewards\\n    * @param _tokenId yield gem id\\n    * @param _amount amount to remove from the vault in DEFO (wei precision)\\n    */\\n    function unStakeReward(uint256 _tokenId, uint256 _amount) external;\\n\\n    /**\\n    * @notice vault lottery configuration\\n    * @param _numberOfWinners number of winners of the vault lottery\\n    * @param _lotteryStart lottery start moment to remember, blocktime format, zero for blocktime\\n    * @param _periodicity periodicity in seconds, initially weekly\\n    */\\n    function configureLottery(uint256 _numberOfWinners, uint32 _lotteryStart, uint32 _periodicity) external;\\n\\n    /**\\n    * @notice get DEFO amount currently in the vault for a specific yield gem\\n    * @param _tokenId yield gem id\\n    * @return amount in DEFO (wei precision)\\n    */\\n    function getStaked(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n    * @notice get DEFO amount currently in the vault for all user's yield gems\\n    * @return tokenIds_ array of staked tokenIds\\n    * @return amounts_ array of amounts (gross, currently in the vault)\\n    */\\n    function getStakedAllGems() external view returns (uint256[] memory tokenIds_, uint256[] memory amounts_);\\n\\n    /**\\n    * @notice get amount currently in the vault for sender\\n    * @return amount in DEFO (wei precision)\\n    */\\n    function getTotalStaked() external view returns (uint256);\\n\\n    /**\\n    * @notice get amount currently in the vault for all protocol users\\n    * @return amount in DEFO (wei precision)\\n    */\\n    function getTotalStakedAllUsers() external view returns (uint256);\\n\\n    /**\\n    * @notice gets lottery winners in the lottery interval containing _timestamp\\n    * @param _timestamp moment of the query, zero if now\\n    * @return addresses of the lottery winners\\n    * @dev the ones related to the requested period are put to the storage to return the same number in the future\\n    */\\n    function lotteryWinners(uint32 _timestamp) external view returns (address[] memory);\\n\\n}\\n\",\"keccak256\":\"0x23b26faab95b0f6ffbee71aec426d496316d09e802725503d8fa7dca998f0aff\",\"license\":\"GPL-3.0\"},\"contracts/libraries/BoosterHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport {Booster} from \\\"../data-types/IDataTypes.sol\\\";\\nimport \\\"./PercentHelper.sol\\\";\\n\\n/// @notice Library to boost rates and fees\\n/// @author Decentralized Foundation\\n///todo utilize percenthelper\\nlibrary BoosterHelper {\\n    /// @notice boosting rewards rate (which is an amount per second), 50% for omega, 25% for delta\\n    function boostRewardsRate(Booster booster, uint256 rate) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            //50% more\\n            return rate * 15000 / 10000;\\n        } else if (booster == Booster.Delta) {\\n            //25% more\\n            return rate * 12500 / 10000;\\n        } else return rate;\\n    }\\n\\n    /// @notice reducing fees, 50% for omega, 25% reduction for delta\\n    function reduceMaintenanceFee(Booster booster, uint256 fee) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            return fee / 2;\\n        } else if (booster == Booster.Delta) {\\n            return fee * 7500 / 10000;\\n        } else return fee;\\n    }\\n\\n    function reduceVaultWithdrawalFee(Booster booster, uint256 fee) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            return fee * 1000 / 10000;\\n        } else if (booster == Booster.Delta) {\\n            return fee / 2;\\n        } else return fee;\\n    }\\n}\\n\",\"keccak256\":\"0xee7e3041146e7c8cf718966e77889b0bd8f631488dfc50bb7796e8b0292c3730\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FiHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/**\\n * @notice Library for Fi financial operations structure\\n * @author Decentralized Foundation Team\\n */\\n\\nlibrary FiHelper {\\n    function updateStorage(Fi memory _add, uint256 _tokenId, address _user) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        Gem storage gem = s.gems[_tokenId];\\n\\n\\n        ///todo refactor financial consisitency checks into a separate function\\n        //        require(\\n        //            (_add.claimedGross - _add.claimTaxPaid - _add.donated == _add.claimedNet) &&\\n        //            (_add.unStakedGross - _add.vaultTaxPaid - _add.donated == _add.unStakedNet) &&\\n        //            (_add.stakedGross - _add.donated == _add.stakedNetstakedNet)\\n        //        , \\\"wrong financial operation structure\\\");\\n\\n        fiAdd(s.total, _add);\\n        fiAdd(gem.fi, _add);\\n        fiAdd(s.usersFi[_user], _add);\\n    }\\n\\n    function fiAdd(Fi storage _initial, Fi memory _add) internal {\\n        _initial.claimedGross += _add.claimedGross;\\n        _initial.claimedNet += _add.claimedNet;\\n        _initial.stakedGross += _add.stakedGross;\\n        _initial.stakedNet += _add.stakedNet;\\n        _initial.unStakedGross += _add.unStakedGross;\\n        _initial.unStakedGrossUp += _add.unStakedGrossUp;\\n        _initial.unStakedNet += _add.unStakedNet;\\n        _initial.donated += _add.donated;\\n        _initial.claimTaxPaid += _add.claimTaxPaid;\\n        _initial.vaultTaxPaid += _add.vaultTaxPaid;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc6679d153baead03e166e2ab90e5ac78e8d857119b2c7a109398ea5e073d4f84\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/** @title  LibAppStorage EIP-2535 Diamond Facet Storage\\n  * @author Decentralized Foundation Team\\n  * @notice This diamond storage library is inherited by all facets and imported in libraries\\n*/\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf2e84cec0bd10a28b47d23a086c1d77096efac4f3b3d6f1c132ebbe814c8b1d5\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibDonations.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n// helper for limit daily mints\\nlibrary LibDonations {\\n    event Donated(address indexed user, uint256 amount);\\n}\\n\",\"keccak256\":\"0xffec6a5e5edf3407bff6f08539b45c493f00d6bf32d10e1efdd12a28a3e7f757\",\"license\":\"GPL-3.0\"},\"contracts/libraries/PercentHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n\\n/**\\n * @notice Library for percentage integer math, note PERCENTAGE_PRECISION_MULTIPLIER when configuring the protocol\\n * @author Decentralized Foundation Team\\n * @dev PERCENTAGE_PRECISION_MULTIPLIER*100 = 10000 greater than real percent, so 20% is represented as 2000, meaning 0.2\\n */\\n\\nlibrary PercentHelper {\\n    uint256 constant PERCENTAGE_PRECISION_MULTIPLIER = 100;\\n    uint256 constant HUNDRED_PERCENT = 100 * PERCENTAGE_PRECISION_MULTIPLIER;\\n\\n    /**\\n     * @dev simply a ratio of the given value, e.g. if tax is 30% and value if 100 the function gives 30\\n     * @param value Value to get ratio from\\n     * @param tax Percent to apply\\n     */\\n    ///todo make pure once got rid of the console.log\\n    function rate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (value * tax) / HUNDRED_PERCENT : 0;\\n    }\\n\\n    /**\\n    * @dev simple gross-up, gives back gross for net value, if charity is 5%, then gross up of 95 gives 100\\n     * @param netValue Net value to gross up\\n     * @param tax Percent that was applied\\n     */\\n    function grossUp(uint256 netValue, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (netValue * HUNDRED_PERCENT) / (HUNDRED_PERCENT - tax) : 0;\\n    }\\n\\n\\n    /// @dev received inverted percent for taper calc, if ratio is 20%, then 1/(1-20%) = 25%\\n    function invertedRate(uint256 value, uint256 ratio) internal pure returns (uint256) {\\n        return value * HUNDRED_PERCENT / (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function oneHundredLessPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function minusHundredPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (ratio - HUNDRED_PERCENT);\\n    }\\n\\n\\n    function reversePercent(uint256 ratio) internal pure returns (uint256) {\\n        return PERCENTAGE_PRECISION_MULTIPLIER / ratio;\\n    }\\n\\n    function percentPower(uint256 value, uint256 ratio, uint pow) internal pure returns (uint256) {\\n        return value * PERCENTAGE_PRECISION_MULTIPLIER ** pow / ratio ** pow;\\n    }\\n\\n\\n    /// @dev simply value less given percentage, e.g. if tax is 30% the functio gives 70 for 100\\n    function lessRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value - rate(value, tax);\\n    }\\n\\n    function plusRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value + rate(value, tax);\\n    }\\n}\\n\",\"keccak256\":\"0x70d9a8e3cf2aad9102eda57cb8d7efacca2f96f89d50aef7c6088f522c4763ae\",\"license\":\"GPL-3.0\"},\"contracts/libraries/PeriodicHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./PercentHelper.sol\\\";\\nimport \\\"./BoosterHelper.sol\\\";\\n\\n/// @notice Library for reward calculations\\n/// @author Decentralized Foundation\\nlibrary PeriodicHelper {\\n    using PercentHelper for uint256;\\n\\n    /// @dev calculates rewards with a second precision to a given date, not prorated to date\\n    function calculatePeriodicToDate(\\n        uint256 ratePerPeriod,\\n        uint32 lastEventTime,\\n        uint32 toDate,\\n        uint32 payOrDeductPeriod\\n    ) internal pure returns (uint) {\\n        return (toDate > lastEventTime) ? ((toDate - lastEventTime) / payOrDeductPeriod) * ratePerPeriod : 0;\\n    }\\n\\n    /// @dev calculates rewards with a second precision, not prorated to date\\n    function calculatePeriodic(\\n        uint256 ratePerPeriod,\\n        uint32 lastEventTime,\\n        uint32 payOrDeductPeriod\\n    ) internal view returns (uint) {\\n\\n        return calculatePeriodicToDate(ratePerPeriod, lastEventTime, uint32(block.timestamp), payOrDeductPeriod);\\n    }\\n\\n\\n\\n    // @notice Calculated Tapered Reward starting from the mint time. To get the reward call this function and subtract already paid from it.\\n    // @return taperedReward, updatedRewardRate\\n    function calculateTaperedReward(\\n        uint timePeriod, //block.timestamp - mintTime\\n        uint256 taperThreshold, //120 for diamond\\n        uint256 taperPercent, //80% usually, NOTE this is 80% but not 20%\\n        uint ratePerPeriod, //5 for diamond, pass already boosted rate if boost is applicable\\n        uint payOrDeductPeriod //in seconds, initially it's 1 week\\n    ) internal pure returns (uint256 taperedReward) {\\n        uint256 taperedPercent = taperPercent.oneHundredLessPercent();\\n        // Basically it's a geometric progression of the timestamps b_n = b_1*q_(n-1),\\n        // For simplicity startTime is zero, so timePeriod should be block.timestamp - startTime\\n        // where q = 1/taperedPercent, b_1 =  taperThreshold/ratePerPeriod\\n        // So that b_0 = taperThreshold/ratePerPeriod (which is 120/5= 24 weeks for the first taper from the startTime)\\n        // b_1 = taperThreshold/(ratePerPeriod*taperedPercent^1)  (which is 120/(5*0.8)= 30 weeks from the previous point to get 120 $DEFO by the tapered rate of 4)\\n        // b_2 = taperThreshold/(ratePerPeriod*taperedPercent^2)\\n        // ....\\n        // b_n = taperThreshold/(ratePerPeriod  *taperedPercent^n)\\n        // b_(n+1) = taperThreshold/(ratePerPeriod*taperedPercent^(n+1))\\n        // So that SUM_n_from_1_to_n(b_n)<=timePeriod, but SUM_n_from_1_to_(n+1)(b_n)>timePeriod\\n        // Actual points on the timeline are S_i which are sums of the taper intervals b_i\\n        //\\n        // 1. At first, lets' find n and S_n\\n        // Sum of geometric progression is Sn = b_1 * (q^n-1)/(q-1)\\n        // So we just loop to find while Sn<=timePeriod, so that Sn = taperThreshold/ratePerPeriod * (1/taperedPercent^n-1)/(1/taperedPercent -1)\\n        //\\n        // for example, for diamond gem: it's 120/5*(1/0.8**(N-1)-1)/(1/0.8-1)\\n        //\\n        // 2. Once we found n and S_n, the amount to pay would be taperThreshold*n+(timePeriod - S_n)*ratePerPeriod*taperedPercent^n\\n        // for example. if we got 100 weeks, n =3 and the formula is 120*3+(100-91.5)*5*0.8**3 = 381.76\\n        // We calculate the finalAmount and deduct what was paid already to calculate the payment.\\n        uint finalAmount;\\n        uint sN = 0;\\n        uint sNp1 = 0;\\n        //S_(n+1)\\n        uint n = 0;\\n        do {\\n            //this is the formula, but the percents are with precision multiplier\\n            //sN = taperThreshold/ratePerPeriod * (1/taperedPercent**n-1)/(1/taperedPercent -1);\\n            sN = sNp1;\\n            sNp1 = taperThreshold / ratePerPeriod *\\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT ** n / taperedPercent ** n - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER) /\\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT / taperedPercent - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER);\\n            n++;\\n        }\\n        while (payOrDeductPeriod * sNp1 <= timePeriod);\\n        n = n - 2;\\n        //convert sN to Seconds, that's just for the logs to show in weeks\\n        sN *= payOrDeductPeriod;\\n        //        uint bN = payOrDeductPeriod * taperThreshold / (ratePerPeriod * taperedPercent ** n);\\n        // The whole process makes sense if the current time is later than the 1st taper event\\n        uint finalRate;\\n        if (sN != 0 && timePeriod > sN) {\\n            finalRate = ratePerPeriod * taperedPercent ** (n) / PercentHelper.HUNDRED_PERCENT ** (n);\\n            finalAmount = taperThreshold * n + ((timePeriod - sN) / payOrDeductPeriod) * finalRate;\\n        }\\n        else {\\n            finalRate = ratePerPeriod;\\n            finalAmount = timePeriod / payOrDeductPeriod * ratePerPeriod;\\n        }\\n        return finalAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xf4a075af12a13cf32cd59469bcd6274204d7cb575cd1bf177bf447eabcbaf2ab\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TaxHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./PercentHelper.sol\\\";\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/// @notice Library for withdrawal tax operations\\nlibrary TaxHelper {\\n    /// @dev gets an index to the taxTable\\n    /// @param _timeFromLastRewardWithdrawal time in seconds passed from the last claim or stake\\n    /// @return taxTier_ tax tier, can be a configurable mapping, now it's 0- 100% (rewards have not accrued yet), 1- 30%, 2-30%, 3- 15%, 4-0%.\\n    function getTaxTier(uint256 _timeFromLastRewardWithdrawal) internal view returns (TaxTiers taxTier_) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint32 scale = s.config.taxScaleSinceLastClaimPeriod;\\n\\n        taxTier_ = TaxTiers.Tier4NoTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 4) taxTier_ = TaxTiers.Tier3SmallTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 3) taxTier_ = TaxTiers.Tier2MediumTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 2) taxTier_ = TaxTiers.Tier1HugeTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 1) taxTier_ = TaxTiers.Tier0NoPayment;\\n    }\\n\\n    /// @dev gets an index to taxRates from config\\n    /// @param _lastRewardWithdrawalTimestamp time in seconds of the last claim or stake to vault\\n    /// @return timestamp of the next tax tier change\\n    function wenNextTaxTier(uint32 _lastRewardWithdrawalTimestamp) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint32 scale = s.config.taxScaleSinceLastClaimPeriod;\\n\\n        if (_lastRewardWithdrawalTimestamp > uint32(block.timestamp)) {\\n            return 0;\\n        }\\n        uint256 _timeFromLastRewardWithdrawal = uint32(block.timestamp) - _lastRewardWithdrawalTimestamp;\\n        if (_timeFromLastRewardWithdrawal > scale * 4)\\n            return 0;\\n        else\\n            return _lastRewardWithdrawalTimestamp + scale;\\n    }\\n\\n    /// function retrieves tax rate for given tax tier\\n    function getTaxRate(TaxTiers _taxTier) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.config.taxRates[uint256(_taxTier)];\\n    }\\n}\\n\",\"keccak256\":\"0x34878351c0e713530b4762b7139f603504a40267093da4f92b0621f9fc14c3c4\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TimeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/// @notice Operations with time periods and durations\\nlibrary TimeHelper {\\n    function hasPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 lockPeriod) internal view returns (bool) {\\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent > lockPeriod);\\n    }\\n\\n    function notPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 freePeriod) internal view returns (bool) {\\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent < freePeriod);\\n    }\\n}\\n\",\"keccak256\":\"0x7f6ce8b464efa3f9a47d7fcaed8830e2890e160e6bac07e7c38171aa48460e3a\",\"license\":\"GPL-3.0\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506116ba806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063400f79a61161005b578063400f79a6146100d8578063b70eafa4146100f6578063f61d7f5a14610126578063fac9101c146101455761007d565b80630917e7761461008257806309873d04146100a05780632db5814d146100bc575b600080fd5b61008a610175565b6040516100979190610e71565b60405180910390f35b6100ba60048036038101906100b59190610ef9565b61021e565b005b6100d660048036038101906100d19190610f4c565b610223565b005b6100e06106d4565b6040516100ed9190610e71565b60405180910390f35b610110600480360381019061010b9190610f8c565b6106f6565b60405161011d91906110a9565b60405180910390f35b61012e6106fd565b60405161013c929190611189565b60405180910390f35b61015f600480360381019061015a91906111c0565b61080b565b60405161016c9190610e71565b60405180910390f35b600080610180610857565b9050600060380160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600060380160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154610218919061121c565b91505090565b505050565b8161022c610857565b73ffffffffffffffffffffffffffffffffffffffff166000602101600301600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c9906112ad565b60405180910390fd5b60006102dc610857565b905060008060200160008681526020019081526020016000209050600081600101600401548260010160030154610313919061121c565b905084811015610358576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034f9061133f565b60405180910390fd5b6000806000016000016001808111156103745761037361135f565b5b600281106103855761038461138e565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060000160020190506103bc610e05565b878160800181815250506103d788600080016015015461090e565b8160a001818152505060006104048660000160019054906101000a900460ff166000800160160154610961565b905061041089826109fa565b826101200181815250508373ffffffffffffffffffffffffffffffffffffffff166323b872dd846005600681111561044b5761044a61135f565b5b6007811061045c5761045b61138e565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600160068111156104935761049261135f565b5b600781106104a4576104a361138e565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168561012001516040518463ffffffff1660e01b81526004016104ea939291906113cc565b6020604051808303816000875af1158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052d919061143b565b508161012001518961053f919061121c565b8260c00181815250508373ffffffffffffffffffffffffffffffffffffffff166323b872dd84600560068111156105795761057861135f565b5b6007811061058a5761058961138e565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600160068111156105c1576105c061135f565b5b600781106105d2576105d161138e565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560c001516040518463ffffffff1660e01b8152600401610617939291906113cc565b6020604051808303816000875af1158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a919061143b565b508673ffffffffffffffffffffffffffffffffffffffff167ff26c0304cc83daf500e1dc22ab2e3cf954b3d506d62e34d70cc054255079e39783608001518460c001516040516106ab929190611468565b60405180910390a26106c88a8884610a369092919063ffffffff16565b50505050505050505050565b600080602e01600401546000602e01600301546106f1919061121c565b905090565b6060919050565b606080600061070a610857565b905061071581610ac6565b9250825167ffffffffffffffff81111561073257610731611491565b5b6040519080825280602002602001820160405280156107605781602001602082028036833780820191505090505b50915060005b83518110156108055760008482815181106107845761078361138e565b5b60200260200101519050600060200160008281526020019081526020016000206001016004015460006020016000838152602001908152602001600020600101600301546107d2919061121c565b8483815181106107e5576107e461138e565b5b6020026020010181815250505080806107fd906114c0565b915050610766565b50509091565b6000806020016000838152602001908152602001600020600101600401546000602001600084815260200190815260200160002060010160030154610850919061121c565b9050919050565b60003073ffffffffffffffffffffffffffffffffffffffff16610878610c4a565b73ffffffffffffffffffffffffffffffffffffffff160361090757600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff81830151169250505061090b565b3390505b90565b600080821161091e576000610959565b8160648061092c9190611508565b610936919061121c565b6064806109439190611508565b8461094e9190611508565b6109589190611591565b5b905092915050565b60006002808111156109765761097561135f565b5b8360028111156109895761098861135f565b5b036109b0576127106103e88361099f9190611508565b6109a99190611591565b90506109f4565b600160028111156109c4576109c361135f565b5b8360028111156109d7576109d661135f565b5b036109f0576002826109e99190611591565b90506109f4565b8190505b92915050565b6000808211610a0a576000610a2e565b606480610a179190611508565b8284610a239190611508565b610a2d9190611591565b5b905092915050565b6000610a40610c52565b905060008160200160008581526020019081526020016000209050610a6882602e0186610c57565b610a758160010186610c57565b610abf8260380160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086610c57565b5050505050565b606060008060210160040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008167ffffffffffffffff811115610b2d57610b2c611491565b5b604051908082528060200260200182016040528015610b5b5781602001602082028036833780820191505090505b50905060005b82811015610c3f5760008060210160080160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020549050610bcc81610d93565b610c0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c029061160e565b60405180910390fd5b80838381518110610c1f57610c1e61138e565b5b602002602001018181525050508080610c37906114c0565b915050610b61565b508092505050919050565b600033905090565b600090565b8060000151826000016000828254610c6f919061162e565b925050819055508060200151826001016000828254610c8e919061162e565b925050819055508060400151826002016000828254610cad919061162e565b925050819055508060600151826003016000828254610ccc919061162e565b925050819055508060800151826004016000828254610ceb919061162e565b925050819055508060a00151826005016000828254610d0a919061162e565b925050819055508060c00151826006016000828254610d29919061162e565b925050819055508060e00151826007016000828254610d48919061162e565b92505081905550806101000151826008016000828254610d68919061162e565b92505081905550806101200151826009016000828254610d88919061162e565b925050819055505050565b60008073ffffffffffffffffffffffffffffffffffffffff166000602101600301600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000819050919050565b610e6b81610e58565b82525050565b6000602082019050610e866000830184610e62565b92915050565b600080fd5b610e9a81610e58565b8114610ea557600080fd5b50565b600081359050610eb781610e91565b92915050565b600063ffffffff82169050919050565b610ed681610ebd565b8114610ee157600080fd5b50565b600081359050610ef381610ecd565b92915050565b600080600060608486031215610f1257610f11610e8c565b5b6000610f2086828701610ea8565b9350506020610f3186828701610ee4565b9250506040610f4286828701610ee4565b9150509250925092565b60008060408385031215610f6357610f62610e8c565b5b6000610f7185828601610ea8565b9250506020610f8285828601610ea8565b9150509250929050565b600060208284031215610fa257610fa1610e8c565b5b6000610fb084828501610ee4565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101082610fe5565b9050919050565b61102081611005565b82525050565b60006110328383611017565b60208301905092915050565b6000602082019050919050565b600061105682610fb9565b6110608185610fc4565b935061106b83610fd5565b8060005b8381101561109c5781516110838882611026565b975061108e8361103e565b92505060018101905061106f565b5085935050505092915050565b600060208201905081810360008301526110c3818461104b565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61110081610e58565b82525050565b600061111283836110f7565b60208301905092915050565b6000602082019050919050565b6000611136826110cb565b61114081856110d6565b935061114b836110e7565b8060005b8381101561117c5781516111638882611106565b975061116e8361111e565b92505060018101905061114f565b5085935050505092915050565b600060408201905081810360008301526111a3818561112b565b905081810360208301526111b7818461112b565b90509392505050565b6000602082840312156111d6576111d5610e8c565b5b60006111e484828501610ea8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061122782610e58565b915061123283610e58565b925082821015611245576112446111ed565b5b828203905092915050565b600082825260208201905092915050565b7f596f7520646f6e2774206f776e20746869732067656d00000000000000000000600082015250565b6000611297601683611250565b91506112a282611261565b602082019050919050565b600060208201905081810360008301526112c68161128a565b9050919050565b7f4e6f7420656e6f75676820616d6f756e7420696e20746865207661756c74206660008201527f6f72207468652067656d00000000000000000000000000000000000000000000602082015250565b6000611329602a83611250565b9150611334826112cd565b604082019050919050565b600060208201905081810360008301526113588161131c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6113c681611005565b82525050565b60006060820190506113e160008301866113bd565b6113ee60208301856113bd565b6113fb6040830184610e62565b949350505050565b60008115159050919050565b61141881611403565b811461142357600080fd5b50565b6000815190506114358161140f565b92915050565b60006020828403121561145157611450610e8c565b5b600061145f84828501611426565b91505092915050565b600060408201905061147d6000830185610e62565b61148a6020830184610e62565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006114cb82610e58565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114fd576114fc6111ed565b5b600182019050919050565b600061151382610e58565b915061151e83610e58565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611557576115566111ed565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061159c82610e58565b91506115a783610e58565b9250826115b7576115b6611562565b5b828204905092915050565b7f412067656d20646f65736e277420657869737473000000000000000000000000600082015250565b60006115f8601483611250565b9150611603826115c2565b602082019050919050565b60006020820190508181036000830152611627816115eb565b9050919050565b600061163982610e58565b915061164483610e58565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611679576116786111ed565b5b82820190509291505056fea2646970667358221220d2157f7581a9774e93ad792d4f12998924a5ab0549096e2a9b343f99e866e65d64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063400f79a61161005b578063400f79a6146100d8578063b70eafa4146100f6578063f61d7f5a14610126578063fac9101c146101455761007d565b80630917e7761461008257806309873d04146100a05780632db5814d146100bc575b600080fd5b61008a610175565b6040516100979190610e71565b60405180910390f35b6100ba60048036038101906100b59190610ef9565b61021e565b005b6100d660048036038101906100d19190610f4c565b610223565b005b6100e06106d4565b6040516100ed9190610e71565b60405180910390f35b610110600480360381019061010b9190610f8c565b6106f6565b60405161011d91906110a9565b60405180910390f35b61012e6106fd565b60405161013c929190611189565b60405180910390f35b61015f600480360381019061015a91906111c0565b61080b565b60405161016c9190610e71565b60405180910390f35b600080610180610857565b9050600060380160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600060380160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154610218919061121c565b91505090565b505050565b8161022c610857565b73ffffffffffffffffffffffffffffffffffffffff166000602101600301600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c9906112ad565b60405180910390fd5b60006102dc610857565b905060008060200160008681526020019081526020016000209050600081600101600401548260010160030154610313919061121c565b905084811015610358576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034f9061133f565b60405180910390fd5b6000806000016000016001808111156103745761037361135f565b5b600281106103855761038461138e565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060000160020190506103bc610e05565b878160800181815250506103d788600080016015015461090e565b8160a001818152505060006104048660000160019054906101000a900460ff166000800160160154610961565b905061041089826109fa565b826101200181815250508373ffffffffffffffffffffffffffffffffffffffff166323b872dd846005600681111561044b5761044a61135f565b5b6007811061045c5761045b61138e565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600160068111156104935761049261135f565b5b600781106104a4576104a361138e565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168561012001516040518463ffffffff1660e01b81526004016104ea939291906113cc565b6020604051808303816000875af1158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052d919061143b565b508161012001518961053f919061121c565b8260c00181815250508373ffffffffffffffffffffffffffffffffffffffff166323b872dd84600560068111156105795761057861135f565b5b6007811061058a5761058961138e565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600160068111156105c1576105c061135f565b5b600781106105d2576105d161138e565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560c001516040518463ffffffff1660e01b8152600401610617939291906113cc565b6020604051808303816000875af1158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a919061143b565b508673ffffffffffffffffffffffffffffffffffffffff167ff26c0304cc83daf500e1dc22ab2e3cf954b3d506d62e34d70cc054255079e39783608001518460c001516040516106ab929190611468565b60405180910390a26106c88a8884610a369092919063ffffffff16565b50505050505050505050565b600080602e01600401546000602e01600301546106f1919061121c565b905090565b6060919050565b606080600061070a610857565b905061071581610ac6565b9250825167ffffffffffffffff81111561073257610731611491565b5b6040519080825280602002602001820160405280156107605781602001602082028036833780820191505090505b50915060005b83518110156108055760008482815181106107845761078361138e565b5b60200260200101519050600060200160008281526020019081526020016000206001016004015460006020016000838152602001908152602001600020600101600301546107d2919061121c565b8483815181106107e5576107e461138e565b5b6020026020010181815250505080806107fd906114c0565b915050610766565b50509091565b6000806020016000838152602001908152602001600020600101600401546000602001600084815260200190815260200160002060010160030154610850919061121c565b9050919050565b60003073ffffffffffffffffffffffffffffffffffffffff16610878610c4a565b73ffffffffffffffffffffffffffffffffffffffff160361090757600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff81830151169250505061090b565b3390505b90565b600080821161091e576000610959565b8160648061092c9190611508565b610936919061121c565b6064806109439190611508565b8461094e9190611508565b6109589190611591565b5b905092915050565b60006002808111156109765761097561135f565b5b8360028111156109895761098861135f565b5b036109b0576127106103e88361099f9190611508565b6109a99190611591565b90506109f4565b600160028111156109c4576109c361135f565b5b8360028111156109d7576109d661135f565b5b036109f0576002826109e99190611591565b90506109f4565b8190505b92915050565b6000808211610a0a576000610a2e565b606480610a179190611508565b8284610a239190611508565b610a2d9190611591565b5b905092915050565b6000610a40610c52565b905060008160200160008581526020019081526020016000209050610a6882602e0186610c57565b610a758160010186610c57565b610abf8260380160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086610c57565b5050505050565b606060008060210160040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008167ffffffffffffffff811115610b2d57610b2c611491565b5b604051908082528060200260200182016040528015610b5b5781602001602082028036833780820191505090505b50905060005b82811015610c3f5760008060210160080160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020549050610bcc81610d93565b610c0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c029061160e565b60405180910390fd5b80838381518110610c1f57610c1e61138e565b5b602002602001018181525050508080610c37906114c0565b915050610b61565b508092505050919050565b600033905090565b600090565b8060000151826000016000828254610c6f919061162e565b925050819055508060200151826001016000828254610c8e919061162e565b925050819055508060400151826002016000828254610cad919061162e565b925050819055508060600151826003016000828254610ccc919061162e565b925050819055508060800151826004016000828254610ceb919061162e565b925050819055508060a00151826005016000828254610d0a919061162e565b925050819055508060c00151826006016000828254610d29919061162e565b925050819055508060e00151826007016000828254610d48919061162e565b92505081905550806101000151826008016000828254610d68919061162e565b92505081905550806101200151826009016000828254610d88919061162e565b925050819055505050565b60008073ffffffffffffffffffffffffffffffffffffffff166000602101600301600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000819050919050565b610e6b81610e58565b82525050565b6000602082019050610e866000830184610e62565b92915050565b600080fd5b610e9a81610e58565b8114610ea557600080fd5b50565b600081359050610eb781610e91565b92915050565b600063ffffffff82169050919050565b610ed681610ebd565b8114610ee157600080fd5b50565b600081359050610ef381610ecd565b92915050565b600080600060608486031215610f1257610f11610e8c565b5b6000610f2086828701610ea8565b9350506020610f3186828701610ee4565b9250506040610f4286828701610ee4565b9150509250925092565b60008060408385031215610f6357610f62610e8c565b5b6000610f7185828601610ea8565b9250506020610f8285828601610ea8565b9150509250929050565b600060208284031215610fa257610fa1610e8c565b5b6000610fb084828501610ee4565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101082610fe5565b9050919050565b61102081611005565b82525050565b60006110328383611017565b60208301905092915050565b6000602082019050919050565b600061105682610fb9565b6110608185610fc4565b935061106b83610fd5565b8060005b8381101561109c5781516110838882611026565b975061108e8361103e565b92505060018101905061106f565b5085935050505092915050565b600060208201905081810360008301526110c3818461104b565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61110081610e58565b82525050565b600061111283836110f7565b60208301905092915050565b6000602082019050919050565b6000611136826110cb565b61114081856110d6565b935061114b836110e7565b8060005b8381101561117c5781516111638882611106565b975061116e8361111e565b92505060018101905061114f565b5085935050505092915050565b600060408201905081810360008301526111a3818561112b565b905081810360208301526111b7818461112b565b90509392505050565b6000602082840312156111d6576111d5610e8c565b5b60006111e484828501610ea8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061122782610e58565b915061123283610e58565b925082821015611245576112446111ed565b5b828203905092915050565b600082825260208201905092915050565b7f596f7520646f6e2774206f776e20746869732067656d00000000000000000000600082015250565b6000611297601683611250565b91506112a282611261565b602082019050919050565b600060208201905081810360008301526112c68161128a565b9050919050565b7f4e6f7420656e6f75676820616d6f756e7420696e20746865207661756c74206660008201527f6f72207468652067656d00000000000000000000000000000000000000000000602082015250565b6000611329602a83611250565b9150611334826112cd565b604082019050919050565b600060208201905081810360008301526113588161131c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6113c681611005565b82525050565b60006060820190506113e160008301866113bd565b6113ee60208301856113bd565b6113fb6040830184610e62565b949350505050565b60008115159050919050565b61141881611403565b811461142357600080fd5b50565b6000815190506114358161140f565b92915050565b60006020828403121561145157611450610e8c565b5b600061145f84828501611426565b91505092915050565b600060408201905061147d6000830185610e62565b61148a6020830184610e62565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006114cb82610e58565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114fd576114fc6111ed565b5b600182019050919050565b600061151382610e58565b915061151e83610e58565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611557576115566111ed565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061159c82610e58565b91506115a783610e58565b9250826115b7576115b6611562565b5b828204905092915050565b7f412067656d20646f65736e277420657869737473000000000000000000000000600082015250565b60006115f8601483611250565b9150611603826115c2565b602082019050919050565b60006020820190508181036000830152611627816115eb565b9050919050565b600061163982610e58565b915061164483610e58565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611679576116786111ed565b5b82820190509291505056fea2646970667358221220d2157f7581a9774e93ad792d4f12998924a5ab0549096e2a9b343f99e866e65d64736f6c634300080f0033",
  "devdoc": {
    "author": "Decentralized Foundation Team",
    "kind": "dev",
    "methods": {
      "configureLottery(uint256,uint32,uint32)": {
        "params": {
          "_lotteryStart": "lottery start moment to remember, blocktime format, zero for blocktime",
          "_numberOfWinners": "number of winners of the vault lottery",
          "_periodicity": "periodicity in seconds, initially weekly"
        }
      },
      "getStaked(uint256)": {
        "params": {
          "_tokenId": "yield gem id"
        },
        "returns": {
          "_0": "amount in DEFO (wei precision)"
        }
      },
      "getStakedAllGems()": {
        "returns": {
          "amounts_": "array of amounts (gross, currently in the vault)",
          "tokenIds_": "array of staked tokenIds"
        }
      },
      "getTotalStaked()": {
        "returns": {
          "_0": "amount in DEFO (wei precision)"
        }
      },
      "getTotalStakedAllUsers()": {
        "returns": {
          "_0": "amount in DEFO (wei precision)"
        }
      },
      "lotteryWinners(uint32)": {
        "details": "the ones related to the requested period are put to the storage to return the same number in the future",
        "params": {
          "_timestamp": "moment of the query, zero if now"
        },
        "returns": {
          "_0": "addresses of the lottery winners"
        }
      },
      "unStakeReward(uint256,uint256)": {
        "params": {
          "_amount": "amount to remove from the vault in DEFO (wei precision)",
          "_tokenId": "yield gem id"
        }
      }
    },
    "title": "VaultFacet EIP-2535 Diamond Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "configureLottery(uint256,uint32,uint32)": {
        "notice": "vault lottery configuration"
      },
      "getStaked(uint256)": {
        "notice": "get DEFO amount currently in the vault for a specific yield gem"
      },
      "getStakedAllGems()": {
        "notice": "get DEFO amount currently in the vault for all user's yield gems"
      },
      "getTotalStaked()": {
        "notice": "get amount currently in the vault for sender"
      },
      "getTotalStakedAllUsers()": {
        "notice": "get amount currently in the vault for all protocol users"
      },
      "lotteryWinners(uint32)": {
        "notice": "gets lottery winners in the lottery interval containing _timestamp"
      },
      "unStakeReward(uint256,uint256)": {
        "notice": "remove DEFO amount from the vault back to the unclaimed rewards"
      }
    },
    "notice": "Vault functionality - unStake, lottery, and getters",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4283,
        "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4537_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)7_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[7]",
        "numberOfBytes": "224"
      },
      "t_array(t_array(t_uint256)3_storage)2_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][2]",
        "numberOfBytes": "192"
      },
      "t_array(t_contract(IERC20)737)2_storage": {
        "base": "t_contract(IERC20)737",
        "encoding": "inplace",
        "label": "contract IERC20[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(GemTypeConfig)4429_storage)dyn_storage": {
        "base": "t_struct(GemTypeConfig)4429_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GemTypeMintWindow)4434_storage)dyn_storage": {
        "base": "t_struct(GemTypeMintWindow)4434_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeMintWindow[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)737": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Booster)4456": {
        "encoding": "inplace",
        "label": "enum Booster",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => mapping(enum Booster => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256))"
      },
      "t_mapping(t_address,t_struct(Fi)4477_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Fi)",
        "numberOfBytes": "32",
        "value": "t_struct(Fi)4477_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Booster)4456,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Booster)4456",
        "label": "mapping(enum Booster => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Gem)4494_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gem)",
        "numberOfBytes": "32",
        "value": "t_struct(Gem)4494_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(enum Booster => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Booster)4456,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4537_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4497,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "config",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ProtocolConfig)4416_storage"
          },
          {
            "astId": 4501,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "gemTypes",
            "offset": 0,
            "slot": "28",
            "type": "t_array(t_struct(GemTypeConfig)4429_storage)dyn_storage"
          },
          {
            "astId": 4505,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "gemTypesMintWindows",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_struct(GemTypeMintWindow)4434_storage)dyn_storage"
          },
          {
            "astId": 4508,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "defoTokenLimitWindow",
            "offset": 0,
            "slot": "30",
            "type": "t_struct(DEFOTokenLimitWindow)4443_storage"
          },
          {
            "astId": 4513,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "gems",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_uint256,t_struct(Gem)4494_storage)"
          },
          {
            "astId": 4516,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "nft",
            "offset": 0,
            "slot": "33",
            "type": "t_struct(ERC721Storage)4351_storage"
          },
          {
            "astId": 4519,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "total",
            "offset": 0,
            "slot": "46",
            "type": "t_struct(Fi)4477_storage"
          },
          {
            "astId": 4524,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "usersFi",
            "offset": 0,
            "slot": "56",
            "type": "t_mapping(t_address,t_struct(Fi)4477_storage)"
          },
          {
            "astId": 4533,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "usersNextGemBooster",
            "offset": 0,
            "slot": "57",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256)))"
          },
          {
            "astId": 4536,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "defoTokenLimitPerRewards",
            "offset": 0,
            "slot": "58",
            "type": "t_struct(DEFOTokenLimitPerRewards)4452_storage"
          }
        ],
        "numberOfBytes": "1920"
      },
      "t_struct(Counter)2737_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2736,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DEFOTokenLimitPerRewards)4452_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitPerRewards",
        "members": [
          {
            "astId": 4447,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4451,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "timeOfWindowStart",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DEFOTokenLimitWindow)4443_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitWindow",
        "members": [
          {
            "astId": 4438,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4442,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "timeOfLastSale",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefoTokenLimitConfig)4375_storage": {
        "encoding": "inplace",
        "label": "struct DefoTokenLimitConfig",
        "members": [
          {
            "astId": 4370,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "saleLimitPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4372,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "saleLimitAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4374,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "limitByReward",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ERC721Storage)4351_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage",
        "members": [
          {
            "astId": 4306,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4308,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4311,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "tokenIdTracker",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Counter)2737_storage"
          },
          {
            "astId": 4315,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "owners",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4319,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "balances",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4323,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "tokenApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4329,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "operatorApprovals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 4331,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4337,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "ownedTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 4341,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "ownedTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4344,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "allTokens",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4348,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "allTokensIndex",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4350,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "init",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Fi)4477_storage": {
        "encoding": "inplace",
        "label": "struct Fi",
        "members": [
          {
            "astId": 4458,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "claimedGross",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4460,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "claimedNet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4462,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "stakedGross",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4464,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "stakedNet",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4466,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "unStakedGross",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4468,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "unStakedGrossUp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4470,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "unStakedNet",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4472,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "donated",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4474,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "claimTaxPaid",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4476,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "vaultTaxPaid",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Gem)4494_storage": {
        "encoding": "inplace",
        "label": "struct Gem",
        "members": [
          {
            "astId": 4479,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "gemTypeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4482,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "booster",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Booster)4456"
          },
          {
            "astId": 4484,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "mintTime",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4486,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "lastRewardWithdrawalTime",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4488,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "lastMaintenanceTime",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4491,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "fi",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Fi)4477_storage"
          },
          {
            "astId": 4493,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "presold",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(GemTypeConfig)4429_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeConfig",
        "members": [
          {
            "astId": 4418,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "maintenanceFeeDai",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4420,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "rewardAmountDefo",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4424,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 4426,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "taperRewardsThresholdDefo",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4428,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "maxMintsPerLimitWindow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(GemTypeMintWindow)4434_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeMintWindow",
        "members": [
          {
            "astId": 4431,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "mintCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4433,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "endOfMintLimitWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProtocolConfig)4416_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolConfig",
        "members": [
          {
            "astId": 4380,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "paymentTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20)737)2_storage"
          },
          {
            "astId": 4384,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "wallets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)7_storage"
          },
          {
            "astId": 4390,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "incomeDistributionOnMint",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_array(t_uint256)3_storage)2_storage"
          },
          {
            "astId": 4392,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "maintenancePeriod",
            "offset": 0,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4394,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "rewardPeriod",
            "offset": 4,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4396,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "taxScaleSinceLastClaimPeriod",
            "offset": 8,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4400,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "taxRates",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_uint256)5_storage"
          },
          {
            "astId": 4402,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "charityContributionRate",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 4404,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "vaultWithdrawalTaxRate",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 4406,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "taperRate",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 4408,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "mintLock",
            "offset": 0,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4410,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "transferLock",
            "offset": 1,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4412,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "mintLimitWindow",
            "offset": 2,
            "slot": "24",
            "type": "t_uint32"
          },
          {
            "astId": 4415,
            "contract": "contracts/facets/VaultFacet.sol:VaultFacet",
            "label": "defoTokenLimitConfig",
            "offset": 0,
            "slot": "25",
            "type": "t_struct(DefoTokenLimitConfig)4375_storage"
          }
        ],
        "numberOfBytes": "896"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}