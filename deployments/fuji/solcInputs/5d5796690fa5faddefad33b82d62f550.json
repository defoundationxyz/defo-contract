{
  "language": "Solidity",
  "sources": {
    "contracts/token/DEFOToken.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"../interfaces/ITransferLimiter.sol\";\n\n/** @title  DEFO Token\n  * @author Decentralized Foundation Team\n  * @notice ERC20 with Dai-like gas-less approvals with EIP712 signatures, admin access, black lists, burnable, pausable, and recoverable if tokens are mistakely sent\n*/\n\ncontract DEFOToken is Pausable, IERC20, IERC20Metadata {\n    ITransferLimiter transferLimiter;\n\n    mapping(address => uint256) private _balances;\n\n    // @notice Admins list\n    mapping(address => uint256) public wards;\n\n    // @notice Blacklist\n    mapping(address => bool) public blacklist;\n\n    // --- ERC20 Data ---\n    string public constant name = \"DEFO Token\";\n    string public constant symbol = \"DEFO\";\n    string public constant version = \"1\";\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply;\n    bool public initialized;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    mapping(address => uint256) public nonces;\n\n\n    // --- EIP712 niceties ---\n    bytes32 public DOMAIN_SEPARATOR;\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n\n    /* ============ External and Public Functions ============ */\n\n    modifier auth() {\n        require(wards[_msgSender()] == 1, \"DEFOToken:not-authorized\");\n        _;\n    }\n\n    constructor(uint256 chainId_) {\n        wards[_msgSender()] = 1;\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(version)),\n                chainId_,\n                address(this)\n            )\n        );\n    }\n\n    function initialize(uint256 chainId_) external {\n        require(!initialized, \"DEFOToken:already-initialized\");\n        initialized = true;\n        wards[_msgSender()] = 1;\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(version)),\n                chainId_,\n                address(this)\n            )\n        );\n    }\n\n    // --- Token ---\n\n    function transfer(address dst, uint256 wad) external returns (bool) {\n        return transferFrom(_msgSender(), dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) public returns (bool) {\n        require(!paused(), \"DEFOToken:paused\");\n        require(balanceOf[src] >= wad, \"DEFOToken:insufficient-balance\");\n        require(!blacklist[src] && !blacklist[dst], \"DEFOToken:blacklisted\");\n        if (wards[_msgSender()] != 1 && address(transferLimiter) != address(0))\n            transferLimiter.DEFOTokenTransferLimit(src, dst, wad);\n        if (src != _msgSender() && allowance[src][_msgSender()] != type(uint256).max) {\n            require(allowance[src][_msgSender()] >= wad, \"DEFOToken:insufficient-allowance\");\n            allowance[src][_msgSender()] = sub(allowance[src][_msgSender()], wad);\n        }\n        balanceOf[src] = sub(balanceOf[src], wad);\n        balanceOf[dst] = add(balanceOf[dst], wad);\n        emit Transfer(src, dst, wad);\n        return true;\n    }\n\n\n    function burn(address usr, uint256 wad) external {\n        require(balanceOf[usr] >= wad, \"DEFOToken:insufficient-balance\");\n        if (usr != _msgSender() && allowance[usr][_msgSender()] != type(uint256).max) {\n            require(allowance[usr][_msgSender()] >= wad, \"DEFOToken:insufficient-allowance\");\n            allowance[usr][_msgSender()] = sub(allowance[usr][_msgSender()], wad);\n        }\n        balanceOf[usr] = sub(balanceOf[usr], wad);\n        totalSupply = sub(totalSupply, wad);\n        emit Transfer(usr, address(0), wad);\n    }\n\n    function approve(address usr, uint256 wad) external returns (bool) {\n        allowance[_msgSender()][usr] = wad;\n        emit Approval(_msgSender(), usr, wad);\n        return true;\n    }\n\n    // --- Approve by signature ---\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed))\n            )\n        );\n\n        require(holder != address(0), \"DEFOToken:invalid-address-0\");\n        require(holder == ecrecover(digest, v, r, s), \"DEFOToken:invalid-permit\");\n        require(expiry == 0 || block.timestamp <= expiry, \"DEFOToken:permit-expired\");\n        require(nonce == nonces[holder]++, \"DEFOToken:invalid-nonce\");\n        uint256 wad = allowed ? type(uint256).max : 0;\n        allowance[holder][spender] = wad;\n        emit Approval(holder, spender, wad);\n    }\n\n    /* ============ External and Public Admin Functions ============ */\n\n    function linkDiamond(ITransferLimiter _transferLimiter) external auth {\n        transferLimiter = _transferLimiter;\n    }\n\n    function mint(address usr, uint256 wad) external auth {\n        balanceOf[usr] = add(balanceOf[usr], wad);\n        totalSupply = add(totalSupply, wad);\n        emit Transfer(address(0), usr, wad);\n    }\n\n    // @notice Grant access\n    // @param guy admin to grant auth\n    function rely(address guy) external auth {\n        wards[guy] = 1;\n    }\n\n    // @notice Deny access\n    // @param guy deny auth for\n    function deny(address guy) external auth {\n        wards[guy] = 0;\n    }\n\n\n    // Recovering lost tokens and avax\n    function recoverLostDEFO(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) external auth {\n        IERC20(_token).transfer(_to, _amount);\n    }\n\n    function recoverLostAVAX(address _to) external auth {\n        payable(_to).transfer(address(this).balance);\n    }\n\n    function updateBlacklist(address _address, bool _allow) external auth {\n        blacklist[_address] = _allow;\n    }\n\n    function pause() external auth {\n        _pause();\n    }\n\n    function unpause() external auth {\n        _unpause();\n    }\n\n    function getLinkedDiamond() external view returns (ITransferLimiter) {\n        return transferLimiter;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    // --- Math ---\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/interfaces/ITransferLimiter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\n/** @title  ILimiter, limiter for DEFO token transfer\n  * @author Decentralized Foundation Team\n*/\n\ninterface ITransferLimiter {\n    function yieldGemTransferLimit(\n        address to,\n        address from,\n        uint256 tokenId\n    ) external;\n\n    function DEFOTokenTransferLimit(\n        address to,\n        address from,\n        uint256 amount\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 250
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "evmVersion": "berlin",
    "metadata": {
      "useLiteralContent": true
    }
  }
}