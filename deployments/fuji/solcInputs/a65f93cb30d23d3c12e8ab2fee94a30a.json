{
  "language": "Solidity",
  "sources": {
    "contracts/facets/RewardsFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../data-types/IDataTypes.sol\";\nimport \"../interfaces/IRewards.sol\";\nimport \"../base-facet/BaseFacet.sol\";\nimport \"../libraries/LibDonations.sol\";\nimport \"../libraries/LibMaintainer.sol\";\nimport \"../libraries/PercentHelper.sol\";\nimport \"../libraries/BoosterHelper.sol\";\nimport \"../libraries/PeriodicHelper.sol\";\nimport \"../libraries/TimeHelper.sol\";\nimport \"../libraries/TaxHelper.sol\";\nimport \"../libraries/FiHelper.sol\";\n\n/** @title  ERC721Facet EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\n*/\ncontract RewardsFacet is BaseFacet, IRewards {\n    using FiHelper for Fi;\n    using BoosterHelper for Booster;\n\n    /* ====================== Modifiers ====================== */\n    modifier onlyClaimable(uint256 _tokenId) {\n        require(isClaimable(_tokenId), \"Not claimable\");\n        _;\n    }\n\n    /* ============ External and Public Functions ============ */\n    function claimReward(uint256 _tokenId) public onlyGemHolder(_tokenId) onlyClaimable(_tokenId) {\n        _claimRewardAmount(_tokenId, getRewardAmount(_tokenId));\n    }\n\n    function batchClaimReward(uint256[] calldata _tokenids) external {\n        for (uint256 index = 0; index < _tokenids.length; index++) {\n            claimReward(_tokenids[index]);\n        }\n    }\n\n    function stakeReward(uint256 _tokenId, uint256 _amount) onlyGemHolder(_tokenId) exists(_tokenId) public {\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\n        address[WALLETS] storage wallets = s.config.wallets;\n        address user = _msgSender();\n        Fi memory op;\n\n        uint256 rewardGross = getRewardAmount(_tokenId);\n        require(_amount <= rewardGross, \"Not enough rewards\");\n\n        op.donated = PercentHelper.rate(_amount, s.config.charityContributionRate);\n        op.stakedGross = _amount;\n        op.stakedNet = _amount - op.donated;\n\n        defo.transferFrom(\n            wallets[uint(Wallets.RewardPool)],\n            wallets[uint(Wallets.Charity)],\n            op.donated);\n        emit LibDonations.Donated(user, op.donated);\n\n\n        defo.transferFrom(\n            wallets[uint(Wallets.RewardPool)],\n            wallets[uint(Wallets.Vault)],\n            op.stakedNet);\n        emit Staked(user, op.stakedGross, op.stakedNet);\n\n        op.updateStorage(_tokenId, user);\n    }\n\n    function stakeAndClaim(uint256 _tokenId, uint256 _percent) public onlyGemHolder(_tokenId) onlyClaimable(_tokenId) {\n        uint256 reward = getRewardAmount(_tokenId);\n        uint256 rewardToStake = PercentHelper.rate(reward, _percent);\n        stakeReward(_tokenId, rewardToStake);\n        claimReward(_tokenId);\n    }\n\n\n    function batchStakeReward(uint256[] calldata _tokenIds, uint256[] calldata _amounts) external {\n        require(_tokenIds.length == _amounts.length, \"DEFORewards:_tokendIds-_amounts-inconsistent\");\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            stakeReward(_tokenIds[i], _amounts[i]);\n        }\n    }\n\n    function batchStakeAndClaim(uint256[] calldata _tokenIds, uint256 _percent) external {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            stakeAndClaim(_tokenIds[i], _percent);\n        }\n    }\n\n    function getRewardAmount(uint256 _tokenId) public exists(_tokenId) view returns (uint256) {\n        uint256 rewardToDate = _getCumulatedRewardAmountGross(_tokenId);\n        rewardToDate += s.gems[_tokenId].fi.unStakedNet;\n        rewardToDate -= s.gems[_tokenId].fi.claimedGross;\n        rewardToDate -= s.gems[_tokenId].fi.stakedGross;\n        return rewardToDate;\n    }\n\n    function isClaimable(uint256 _tokenId) public view returns (bool) {\n        return (\n        TimeHelper.hasPassedFromOrNotHappenedYet(s.gems[_tokenId].lastRewardWithdrawalTime, s.config.rewardPeriod) &&\n        LibMaintainer._getPendingMaintenanceFee(_tokenId) == 0 &&\n        getRewardAmount(_tokenId) != 0);\n    }\n\n    function getCumulatedReward() external view returns (uint256) {\n        address user = _msgSender();\n        uint256[] memory gemIds = _getGemIds(user);\n        uint256 reward = 0;\n        for (uint256 i = 0; i < gemIds.length; i++) {\n            reward += _getCumulatedRewardAmountGross(gemIds[i]);\n        }\n        return reward;\n    }\n\n    function getCumulatedRewardAllUsers() external view returns (uint256 allForAllTotalReward_) {\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\n            allForAllTotalReward_ += _getCumulatedRewardAmountGross(tokenId);\n        }\n    }\n\n\n    function getStakedGross() external view returns (uint256) {\n        return s.usersFi[_msgSender()].stakedGross - s.usersFi[_msgSender()].unStakedGrossUp;\n    }\n\n    function getStakedGrossAllUsers() external view returns (uint256) {\n        return s.total.stakedGross - s.total.unStakedGrossUp;\n    }\n\n    function getTaxTier(uint256 _tokenId) public view returns (TaxTiers) {\n        return TaxHelper.getTaxTier(uint32(block.timestamp) - s.gems[_tokenId].lastRewardWithdrawalTime);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _claimRewardAmount(uint256 _tokenId, uint256 _amount) private {\n        Gem storage gem = s.gems[_tokenId];\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\n        address[WALLETS] storage wallets = s.config.wallets;\n\n        require(_amount > 0, \"No amount to claim\");\n\n        Fi memory op;\n        op.claimedGross = _amount;\n\n        TaxTiers taxTier = getTaxTier(_tokenId);\n        op.claimTaxPaid = PercentHelper.rate(op.claimedGross, s.config.taxRates[uint256(taxTier)]);\n        op.donated = PercentHelper.rate(op.claimedGross, s.config.charityContributionRate);\n        op.claimedNet = op.claimedGross - op.claimTaxPaid - op.donated;\n\n        address user = _msgSender();\n        defo.transferFrom(\n            wallets[uint(Wallets.RewardPool)],\n            wallets[uint(Wallets.Charity)],\n            op.donated);\n        emit LibDonations.Donated(user, op.donated);\n\n        defo.transferFrom(\n            wallets[uint(Wallets.RewardPool)],\n            user,\n            op.claimedNet);\n        gem.lastRewardWithdrawalTime = uint32(block.timestamp);\n        emit Claimed(user, op.claimedGross, op.claimedNet);\n\n        op.updateStorage(_tokenId, user);\n    }\n\n    function _getCumulatedRewardAmountGross(uint256 _tokenId) internal view returns (uint256) {\n        Gem memory gem = s.gems[_tokenId];\n        GemTypeConfig memory gemType = s.gemTypes[gem.gemTypeId];\n        uint256 boostedRewardAmount = gem.booster.boostRewardsRate(gemType.rewardAmountDefo);\n        uint256 totalReward = PeriodicHelper.calculateTaperedReward(\n            block.timestamp - gem.mintTime, //period to calculate\n            gemType.taperRewardsThresholdDefo,\n            s.config.taperRate,\n            boostedRewardAmount,\n            s.config.rewardPeriod);\n        return totalReward;\n    }\n\n\n}\n"
    },
    "contracts/data-types/IDataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n/**\n*   @dev The only source for all the data structures used in the protocol storage\n*   @dev This includes general config, gem type config, and mutable data\n*/\n\n/// @dev number of payment tokens to enumerate the error, initially it's Defo and Dai,\n/// @dev see PaymentTokens enum\nuint256 constant PAYMENT_TOKENS = 2;\n\n/// @dev number of income recievers on yield gem mint\nuint256 constant PAYMENT_RECEIVERS = 3;\n\n/// @dev total wallets on the protocol, see Wallets enum\nuint256 constant WALLETS = 7;\n\n/// @dev total number of supported tax tiers\nuint256 constant TAX_TIERS = 5;\n\n/**\n*   @notice a struct for data compliance with erc721 standard\n*   @param name Token name\n*   @param symbol Token symbol\n*   @param owners Mapping from token ID to owner address\n*   @param balances Mapping owner address to token count\n*   @param tokenApprovals Mapping from token ID to approved address\n*   @param operatorApprovals Mapping from owner to operator approvals\n*   @param ownedTokens Mapping from owner to list of owned token IDs\n*   @param ownedTokensIndex Mapping from token ID to index of the owner tokens list\n*   @param allTokens Array with all token ids, used for enumeration\n*   @param allTokensIndex Mapping from token id to position in the allTokens array\n*/\n    struct ERC721Storage {\n        string name;\n        string symbol;\n        Counters.Counter tokenIdTracker;\n        mapping(uint256 => address) owners;\n        mapping(address => uint256) balances;\n        mapping(uint256 => address) tokenApprovals;\n        mapping(address => mapping(address => bool)) operatorApprovals;\n        string baseURI;\n        mapping(address => mapping(uint256 => uint256)) ownedTokens;\n        mapping(uint256 => uint256) ownedTokensIndex;\n        uint256[] allTokens;\n        mapping(uint256 => uint256) allTokensIndex;\n        bool init;\n    }\n\n\n/// @notice token enum to index arrays of rates and addresses, the convention is that Dai is at place 0, Defo is at 1\n/// @dev the order is extremely important once deployed\n    enum PaymentTokens {\n        Dai,\n        Defo\n    }\n\n/// @notice protocol wallets for easy enumeration,\n/// @dev the order is extremely important once deployed, see configuration scripts\n    enum Wallets {\n        Treasury,\n        RewardPool,\n        LiquidityPair,\n        Team,\n        Charity,\n        Vault,\n        RedeemContract\n    }\n\n\n/// @notice these tiers correspond to the configurable percentage from the diamond storage\n    enum TaxTiers {\n        Tier0NoPayment,\n        Tier1HugeTax,\n        Tier2MediumTax,\n        Tier3SmallTax,\n        Tier4NoTax\n    }\n\n/**\n * @notice DefoTokenLimitConfig DEFO ERC20 Token transfer limiter, this is for the 1000 DEFO per 24h sale limitation, can be changes with setTransferLimit\n * @param saleLimitPeriod initially 1 day\n * @param saleLimitAmount initially 1000 tokens\n*/\n    struct DefoTokenLimitConfig {\n        uint256 saleLimitPeriod;\n        uint256 saleLimitAmount;\n        bool limitByReward;\n    }\n\n/**\n * @notice Main Protocol Configuration structure\n     * @param mintLock no mint for all gems, no minting if set\n     * @param transferLock no transfer if set, including no minting\n     * @param incomeDistributionOnMint distribution of the payment among tokens in percent rates, all values use percentage multiplier (see percent helper), here addresses are from the Addresses\n     * @param maintenancePeriod a period in seconds for maintenance fee accrual, initially one month\n     * @param rewardPeriod a period in seconds for generating yield gem rewards, initially one week\n     * @param mintCountResetPeriod a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs.\n     * @param taxScaleSinceLastClaimPeriod a period in seconds for a tax scale to work out, initially one week\n     * @param taxRates tax rates in percent (with percent multiplier, see percent helper contract), initially 30%, 30%, 15%, 0\n     * @param charityContributionRate charity rate (w multiplier as all percent values in the project), initially 5%\n     * @param vaultWithdrawalRate fee paid to withdraw amount from the vault back to the earned rewards, initially 10%\n     * @param taperRate taper rate, initially 20%\n     * @param mintLock no mint for all gems, no minting if set\n     * @param transferLock no transfer if set\n     * @param mintLimitWindow a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs, see GemTypeConfig.maxMintsPerLimitWindow\n     */\n\n    struct ProtocolConfig {\n        IERC20[PAYMENT_TOKENS] paymentTokens;\n        address[WALLETS] wallets;\n        uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] incomeDistributionOnMint;\n        // time periods\n        uint32 maintenancePeriod;\n        uint32 rewardPeriod;\n        uint32 taxScaleSinceLastClaimPeriod;\n        // taxes and contributions\n        uint256[TAX_TIERS] taxRates;\n        uint256 charityContributionRate;\n        uint256 vaultWithdrawalTaxRate;\n        uint256 taperRate;\n        // locks\n        bool mintLock;\n        bool transferLock;\n        // mint limit period for coutner reset\n        uint32 mintLimitWindow;\n        DefoTokenLimitConfig defoTokenLimitConfig;\n    }\n\n/**\n * @notice A struct containing configuration details for gemType\n     * @param maintenanceFee Maintenance fee in Dai for the node type, amount in wei per month\n     * @param rewardAmountDefo Reward in DEFO for the node type, amount in wei per week\n     * @param price Price in DEFO and DAI (in wei), respectively, according to the PaymentTokens enum\n     * @param taperRewardsThresholdDefo Taper threshold, in wei, decreasing rate every given amount of rewards in DEFO\n     * @param maxMintsPerLimitWindow number of gems, mint limit for a node type, see ProtocolConfig.mintLimitWindow\n     */\n    struct GemTypeConfig {\n        uint256 maintenanceFeeDai;\n        uint256 rewardAmountDefo;\n        uint256[PAYMENT_TOKENS] price;\n        uint256 taperRewardsThresholdDefo;\n        uint8 maxMintsPerLimitWindow;\n    }\n\n/**\n * @notice A struct containing current mutable status for gemType\n     * @param mintCount counter incrementing by one on every mint, during mintCountResetPeriod; after mintCountResetPeriod with no mints, reset to 0\n     * @param endOfMintLimitWindow a moment to reset the mintCount counter to zero, set the new endOfMintLimitWindow and start over\n     */\n    struct GemTypeMintWindow {\n        uint256 mintCount;\n        uint32 endOfMintLimitWindow;\n    }\n\n/**\n * @notice A struct describing current DEFO Token limiter input\n * @param tokensSold DEFO tokens sold per limit window, \"sold\" = \"transferred to liquidity pair except the mint\"\n * @param timeOfLastSale time of last sale\n     */\n    struct DEFOTokenLimitWindow {\n        mapping(address => uint256) tokensSold;\n        mapping(address => uint256) timeOfLastSale;\n    }\n\n    enum Booster {\n        None,\n        Delta,\n        Omega\n    }\n\n/**\n * @notice A struct describing financial state, provides the complete state for user, gem, or protocol total.\n * @notice It gives the current exact balance of the Vault, Rewards, and Charity.\n * @param claimedGross rewards amount previously claimed for all time, gross amount - before tax and charity\n * @param claimedNet rewards claimed and to user, net amount after tax and charity\n * @param stakedGross amount removed from rewards to stake, charity not yet deducted\n * @param stakedNet amount put to the vault - charity has been deducted\n * @param unStakedGross  amount removed from the vault, pre withdraw tax and charity\n * @param unStakedGrossUpped  amount removed from the vault gross-upped with charity to equal to the stakedGross amount\n * @param unStakedNet  amount returned to the earned rewards, post withdraw tax and charity\n * @param donated sent to charity\n * @param claimTaxPaid claim tax deducted - 30%, 15%, 15%\n * @param vaultTaxPaid vault withdrawal tax deducted\n     */\n    struct Fi {\n        uint256 claimedGross;\n        uint256 claimedNet;\n        uint256 stakedGross;\n        uint256 stakedNet;\n        uint256 unStakedGross;\n        uint256 unStakedGrossUp;\n        uint256 unStakedNet;\n        uint256 donated;\n        uint256 claimTaxPaid;\n        uint256 vaultTaxPaid;\n    }\n\n/**\n * @notice current state of a gem, a gem is an instance with consistent yield and fee rates specified by the pair (gemType, booster)\n * @param gemType node type, initially it's  0 -> Ruby , 1 -> Sapphire, 2 -> Diamond, and boosters\n * @param booster node Booster 0 -> None , 1 -> Delta , 2 -> Omega\n * @param mintTime timestamp of the mint time\n * @param lastRewardWithdrawalTime timestamp of last reward claim OR stake. Same as mintTime if not yet claimed.\n * @param lastMaintenanceTime timestamp of the last maintenance (could be a date in the future in case of the upfront payment)\n*/\n    struct Gem {\n        uint8 gemTypeId;\n        Booster booster;\n        uint32 mintTime;\n        uint32 lastRewardWithdrawalTime;\n        uint32 lastMaintenanceTime;\n        Fi fi;\n    }\n\n/**\n*   @notice Main Contract Storage utilizing App Storage pattern for Diamond Proxy data organization\n*   @param config main configuration, basically everything except gemType specific\n*   @param gemTypes supported gem types with their details, gemTypeId is the index of the array\n*   @param gems mapping indexed by tokenId, where tokenId is in the nft.allTokens\n*   @param gemTypesMintWindows windows for limiting yield gem mints per gem type\n*   @param defoTokenLimitWindow window for limiting DEFO Token sale\n*   @param nft ERC721 standard related storage\n*   @param total cumulated amounts for all operations\n*   @param usersFi financial info per each user\n*/\n    struct AppStorage {\n        // configuration\n        ProtocolConfig config;\n        GemTypeConfig[] gemTypes;\n        // current state\n        GemTypeMintWindow[] gemTypesMintWindows;\n        DEFOTokenLimitWindow defoTokenLimitWindow;\n        mapping(uint256 => Gem) gems;\n        ERC721Storage nft;\n        // Cumulations\n        Fi total;\n        // User data, users list is s.nft.owners, size s.nft.allTokens.length (managed by ERC721Enumerable)\n        mapping(address => Fi) usersFi;\n        mapping(address => uint8) usersNextGemTypeToBoost;\n        mapping(address => Booster) usersNextGemBooster;\n    }\n"
    },
    "contracts/interfaces/IRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../data-types/IDataTypes.sol\";\n\n/** @title  IYieldGem EIP-2535 Diamond Facet\n  * @author Decentralized Foundation Team\n  * @notice Rewards Interface, operation with rewards: taxation, charity, claiming and putting to the vault\n*/\ninterface IRewards {\n    event Claimed(address indexed user, uint256 amountGross, uint256 amountNet);\n    event Staked(address indexed user, uint256 amountGross, uint256 amountNet);\n\n    function claimReward(uint256 _tokenId) external;\n\n    function batchClaimReward(uint256[] calldata _tokenids) external;\n\n    ///todo decide whether move this to the vault facet or not - (to keep all staking/unstaking in one place), or to leave it here (this is a facet working with rewards  which can be either claimed or staked)\n    function stakeReward(uint256 _tokenId, uint256 _amount) external;\n\n    /**\n*   @notice This is used for the Vault Strategy, it puts the percent of all rewards to the vault and claims the rest\n    *   @param _tokenId unique NFT gem id\n    *   @param _percent percent of what to put into the vault, as usual uses PRECISION_MULTIPLIER (which is 100 by defualt, e.g. 500 for 5%)\n    */\n    function stakeAndClaim(uint256 _tokenId, uint256 _percent) external;\n\n    function batchStakeReward(uint256[] calldata _tokenIds, uint256[] calldata _amounts) external;\n\n    function batchStakeAndClaim(uint256[] calldata _tokenIds, uint256 _percent) external;\n\n    /**\n    *   @notice reward earned by the sender to the moment ready to be claimed or put to vault\n    *   @param _tokenId unique NFT gem id\n    *   @return pre-tax unclaimed reward in DEFO,- before deducting tax or charity, ready to be claimed or put to vault\n    */\n    function getRewardAmount(uint256 _tokenId) external view returns (uint256);\n\n    /**\n*   @notice checks if rewards can be claimed or not\n    *   @param _tokenId unique NFT gem id\n    *   @return true or false, checks for the pending maintenance and time passed since last claim\n    */\n    function isClaimable(uint256 _tokenId) external view returns (bool);\n\n    /**\n    *   @notice amount of pre-taxed total reward earned by the sender for all time\n    *   @return amount in Dai (in wei precision)\n    */\n    function getCumulatedReward() external view returns (uint256);\n\n    /**\n    *   @notice amount of pre-taxed total reward earned by all the users for all time\n    *   @return amount in Dai (in wei precision)\n    */\n    function getCumulatedRewardAllUsers() external view returns (uint256);\n\n\n    /**\n    *   @notice amount of pre-taxed reward that are currently in the vault for the sender, so if put and then taken from the vault, it's not the return of the function\n    *   @return total amount in Dai (in wei precision)\n    */\n    function getStakedGross() external view returns (uint256);\n\n    /**\n    *   @notice amount of pre-taxed reward that are currently in the vault for all users, it's not equal to the after-tax amount in the vault\n    *   @return total amount in Dai (in wei precision)\n    */\n    function getStakedGrossAllUsers() external view returns (uint256);\n\n    /**\n    *   @notice gets tax tier for a gem\n    *   @param _tokenId unique NFT gem id\n    *   @return current tax tier of the gem might be configurable, now it's a number in the range starting from 0 when 0 means nothing is payed out since there's no rewards in the first week, 4 is no tax, 1,2,3 - % in between (currently 30,30,15)\n    */\n    function getTaxTier(uint256 _tokenId) external view returns (TaxTiers);\n\n\n}\n"
    },
    "contracts/base-facet/BaseFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\nimport \"./Storage.sol\";\n/**\n * @title  BaseFacet\n * @author Decentralized Foundation Team\n * @notice BaseFacet is a base contract all facets to inherit, includes cross-facet utils and  common reusable functions for DEFO Diamond\n */\ncontract BaseFacet is Storage {\n\n    /* ====================== Modifiers ====================== */\n\n    modifier exists(uint256 _tokenId) {\n        _requireExists(_tokenId);\n        _;\n    }\n\n    modifier onlyGemHolder(uint256 _tokenId) {\n        require(s.nft.owners[_tokenId] == _msgSender(), \"You don't own this gem\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        LibDiamond.enforceIsContractOwner();\n        _;\n    }\n    modifier nonZeroAddress(address _owner) {\n        require(_owner != address(0), \"ERC721: address zero is not a valid owner\");\n        _;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _msgSender() internal override view returns (address sender_) {\n        if (Context._msgSender() == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n        } else {\n            sender_ = msg.sender;\n        }\n    }\n\n    function _getChainID() internal view returns (uint256 id) {\n        assembly {\n            id := chainid()\n        }\n    }\n\n    function _requireExists(uint256 _tokenId) internal view {\n        require(_exists(_tokenId), \"ERC721: tokenId is not valid\");\n    }\n\n    function _exists(uint256 _tokenId) internal view returns (bool) {\n        return (s.nft.owners[_tokenId] != address(0));\n    }\n\n    ///todo ensure passing memory array here to the public functions is pretty optimal\n    function _getGemIds(address _user) internal view returns (uint256[] memory) {\n        uint256 numberOfGems = s.nft.balances[_user];\n        uint256[] memory gemIds = new uint256[](numberOfGems);\n        for (uint256 i = 0; i < numberOfGems; i++) {\n            uint256 gemId = s.nft.ownedTokens[_user][i];\n            require(_exists(gemId), \"A gem doesn't exists\");\n            gemIds[i] = gemId;\n        }\n        return gemIds;\n    }\n\n    function _getAllUsers() internal view returns (address[] memory users_) {\n        users_ = new address[](s.nft.allTokens.length);\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\n            users_[tokenId] = s.nft.owners[tokenId];\n        }\n    }\n\n}\n"
    },
    "contracts/libraries/LibDonations.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./LibAppStorage.sol\";\n\n// helper for limit daily mints\nlibrary LibDonations {\n    event Donated(address indexed user, uint256 amount);\n}\n"
    },
    "contracts/libraries/LibMaintainer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./LibAppStorage.sol\";\nimport \"./PercentHelper.sol\";\nimport \"./BoosterHelper.sol\";\nimport \"./PeriodicHelper.sol\";\n\n// helper for limit daily mints\nlibrary LibMaintainer {\n    function _getPendingMaintenanceFee(uint256 _tokenId) internal view returns (uint256) {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        Gem storage gem = s.gems[_tokenId];\n\n        // time period checks - if it's not necessary or too early\n        if (gem.lastMaintenanceTime >= block.timestamp)\n            return 0;\n        uint32 feePaymentPeriod = uint32(block.timestamp) - gem.lastMaintenanceTime;\n        //\"Too soon, maintenance fee has not been yet accrued\");\n        if (feePaymentPeriod <= s.config.maintenancePeriod)\n            return 0;\n\n        // amount calculation\n        uint256 discountedFeeDai = BoosterHelper.reduceMaintenanceFee(gem.booster, s.gemTypes[gem.gemTypeId].maintenanceFeeDai);\n        uint256 feeAmount = PeriodicHelper.calculatePeriodic(discountedFeeDai, gem.lastMaintenanceTime, s.config.maintenancePeriod);\n        return feeAmount;\n    }\n\n}\n"
    },
    "contracts/libraries/PercentHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./LibAppStorage.sol\";\n\n\n/**\n * @notice Library for percentage integer math, note PERCENTAGE_PRECISION_MULTIPLIER when configuring the protocol\n * @author Decentralized Foundation Team\n * @dev PERCENTAGE_PRECISION_MULTIPLIER*100 = 10000 greater than real percent, so 20% is represented as 2000, meaning 0.2\n */\n\nlibrary PercentHelper {\n    uint256 constant PERCENTAGE_PRECISION_MULTIPLIER = 100;\n    uint256 constant HUNDRED_PERCENT = 100 * PERCENTAGE_PRECISION_MULTIPLIER;\n\n    /**\n     * @dev simply a ratio of the given value, e.g. if tax is 30% and value if 100 the function gives 30\n     * @param value Value to get ratio from\n     * @param tax Percent to apply\n     */\n    ///todo make pure once got rid of the console.log\n    function rate(uint256 value, uint256 tax) internal pure returns (uint256) {\n        return tax > 0 ? (value * tax) / HUNDRED_PERCENT : 0;\n    }\n\n    /**\n    * @dev simple gross-up, gives back gross for net value, if charity is 5%, then gross up of 95 gives 100\n     * @param netValue Net value to gross up\n     * @param tax Percent that was applied\n     */\n    function grossUp(uint256 netValue, uint256 tax) internal pure returns (uint256) {\n        return tax > 0 ? (netValue * HUNDRED_PERCENT) / (HUNDRED_PERCENT - tax) : 0;\n    }\n\n\n    /// @dev received inverted percent for taper calc, if ratio is 20%, then 1/(1-20%) = 25%\n    function invertedRate(uint256 value, uint256 ratio) internal pure returns (uint256) {\n        return value * HUNDRED_PERCENT / (HUNDRED_PERCENT - ratio);\n    }\n\n    function oneHundredLessPercent(uint256 ratio) internal pure returns (uint256) {\n        return (HUNDRED_PERCENT - ratio);\n    }\n\n    function minusHundredPercent(uint256 ratio) internal pure returns (uint256) {\n        return (ratio - HUNDRED_PERCENT);\n    }\n\n\n    function reversePercent(uint256 ratio) internal pure returns (uint256) {\n        return PERCENTAGE_PRECISION_MULTIPLIER / ratio;\n    }\n\n    function percentPower(uint256 value, uint256 ratio, uint pow) internal pure returns (uint256) {\n        return value * PERCENTAGE_PRECISION_MULTIPLIER ** pow / ratio ** pow;\n    }\n\n\n    /// @dev simply value less given percentage, e.g. if tax is 30% the functio gives 70 for 100\n    function lessRate(uint256 value, uint256 tax) internal pure returns (uint256) {\n        return value - rate(value, tax);\n    }\n\n    function plusRate(uint256 value, uint256 tax) internal pure returns (uint256) {\n        return value + rate(value, tax);\n    }\n}\n"
    },
    "contracts/libraries/BoosterHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport {Booster} from \"../data-types/IDataTypes.sol\";\nimport \"./PercentHelper.sol\";\n\n/// @notice Library to boost rates and fees\n/// @author Decentralized Foundation\n///todo utilize percenthelper\nlibrary BoosterHelper {\n    /// @notice boosting rewards rate (which is an amount per second), 50% for omega, 25% for delta\n    function boostRewardsRate(Booster booster, uint256 rate) internal pure returns (uint256) {\n        if (booster == Booster.Omega) {\n            //50% more\n            return rate * 15000 / 10000;\n        } else if (booster == Booster.Delta) {\n            //25% more\n            return rate * 12500 / 10000;\n        } else return rate;\n    }\n\n    /// @notice reducing fees, 50% for omega, 25% reduction for delta\n    function reduceMaintenanceFee(Booster booster, uint256 fee) internal pure returns (uint256) {\n        if (booster == Booster.Omega) {\n            return fee / 2;\n        } else if (booster == Booster.Delta) {\n            return fee * 7500 / 10000;\n        } else return fee;\n    }\n\n    function reduceVaultWithdrawalFee(Booster booster, uint256 fee) internal pure returns (uint256) {\n        if (booster == Booster.Omega) {\n            return fee * 1000 / 10000;\n        } else if (booster == Booster.Delta) {\n            return fee / 2;\n        } else return fee;\n    }\n}\n"
    },
    "contracts/libraries/PeriodicHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./PercentHelper.sol\";\nimport \"./BoosterHelper.sol\";\n\n/// @notice Library for reward calculations\n/// @author Decentralized Foundation\nlibrary PeriodicHelper {\n    using PercentHelper for uint256;\n\n    /// @dev calculates rewards with a second precision to a given date, not prorated to date\n    function calculatePeriodicToDate(\n        uint256 ratePerPeriod,\n        uint32 lastEventTime,\n        uint32 toDate,\n        uint32 payOrDeductPeriod\n    ) internal pure returns (uint) {\n        return (toDate > lastEventTime) ? ((toDate - lastEventTime) / payOrDeductPeriod) * ratePerPeriod : 0;\n    }\n\n    /// @dev calculates rewards with a second precision, not prorated to date\n    function calculatePeriodic(\n        uint256 ratePerPeriod,\n        uint32 lastEventTime,\n        uint32 payOrDeductPeriod\n    ) internal view returns (uint) {\n\n        return calculatePeriodicToDate(ratePerPeriod, lastEventTime, uint32(block.timestamp), payOrDeductPeriod);\n    }\n\n\n\n    // @notice Calculated Tapered Reward starting from the mint time. To get the reward call this function and subtract already paid from it.\n    // @return taperedReward, updatedRewardRate\n    function calculateTaperedReward(\n        uint timePeriod, //block.timestamp - mintTime\n        uint256 taperThreshold, //120 for diamond\n        uint256 taperPercent, //80% usually, NOTE this is 80% but not 20%\n        uint ratePerPeriod, //5 for diamond, pass already boosted rate if boost is applicable\n        uint payOrDeductPeriod //in seconds, initially it's 1 week\n    ) internal pure returns (uint256 taperedReward) {\n        uint256 taperedPercent = taperPercent.oneHundredLessPercent();\n        // Basically it's a geometric progression of the timestamps b_n = b_1*q_(n-1),\n        // For simplicity startTime is zero, so timePeriod should be block.timestamp - startTime\n        // where q = 1/taperedPercent, b_1 =  taperThreshold/ratePerPeriod\n        // So that b_0 = taperThreshold/ratePerPeriod (which is 120/5= 24 weeks for the first taper from the startTime)\n        // b_1 = taperThreshold/(ratePerPeriod*taperedPercent^1)  (which is 120/(5*0.8)= 30 weeks from the previous point to get 120 $DEFO by the tapered rate of 4)\n        // b_2 = taperThreshold/(ratePerPeriod*taperedPercent^2)\n        // ....\n        // b_n = taperThreshold/(ratePerPeriod  *taperedPercent^n)\n        // b_(n+1) = taperThreshold/(ratePerPeriod*taperedPercent^(n+1))\n        // So that SUM_n_from_1_to_n(b_n)<=timePeriod, but SUM_n_from_1_to_(n+1)(b_n)>timePeriod\n        // Actual points on the timeline are S_i which are sums of the taper intervals b_i\n        //\n        // 1. At first, lets' find n and S_n\n        // Sum of geometric progression is Sn = b_1 * (q^n-1)/(q-1)\n        // So we just loop to find while Sn<=timePeriod, so that Sn = taperThreshold/ratePerPeriod * (1/taperedPercent^n-1)/(1/taperedPercent -1)\n        //\n        // for example, for diamond gem: it's 120/5*(1/0.8**(N-1)-1)/(1/0.8-1)\n        //\n        // 2. Once we found n and S_n, the amount to pay would be taperThreshold*n+(timePeriod - S_n)*ratePerPeriod*taperedPercent^n\n        // for example. if we got 100 weeks, n =3 and the formula is 120*3+(100-91.5)*5*0.8**3 = 381.76\n        // We calculate the finalAmount and deduct what was paid already to calculate the payment.\n        uint finalAmount;\n        uint sN = 0;\n        uint sNp1 = 0;\n        //S_(n+1)\n        uint n = 0;\n        do {\n            //this is the formula, but the percents are with precision multiplier\n            //sN = taperThreshold/ratePerPeriod * (1/taperedPercent**n-1)/(1/taperedPercent -1);\n            sN = sNp1;\n            sNp1 = taperThreshold / ratePerPeriod *\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT ** n / taperedPercent ** n - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER) /\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT / taperedPercent - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER);\n            n++;\n        }\n        while (payOrDeductPeriod * sNp1 <= timePeriod);\n        n = n - 2;\n        //convert sN to Seconds, that's just for the logs to show in weeks\n        sN *= payOrDeductPeriod;\n        //        uint bN = payOrDeductPeriod * taperThreshold / (ratePerPeriod * taperedPercent ** n);\n        // The whole process makes sense if the current time is later than the 1st taper event\n        uint finalRate;\n        if (sN != 0 && timePeriod > sN) {\n            finalRate = ratePerPeriod * taperedPercent ** (n) / PercentHelper.HUNDRED_PERCENT ** (n);\n            finalAmount = taperThreshold * n + ((timePeriod - sN) / payOrDeductPeriod) * finalRate;\n        }\n        else {\n            finalRate = ratePerPeriod;\n            finalAmount = timePeriod / payOrDeductPeriod * ratePerPeriod;\n        }\n        return finalAmount;\n    }\n}\n"
    },
    "contracts/libraries/TimeHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\n/// @notice Operations with time periods and durations\nlibrary TimeHelper {\n    function hasPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 lockPeriod) internal view returns (bool) {\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent > lockPeriod);\n    }\n\n    function notPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 freePeriod) internal view returns (bool) {\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent < freePeriod);\n    }\n}\n"
    },
    "contracts/libraries/TaxHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./PercentHelper.sol\";\nimport \"./LibAppStorage.sol\";\n\n/// @notice Library for withdrawal tax operations\nlibrary TaxHelper {\n    /// @dev gets an index to the taxTable\n    /// @param _timeFromLastRewardWithdrawal time in seconds passed from the last claim or stake\n    /// @return taxTier_ tax tier, can be a configurable mapping, now it's 0- 100% (rewards have not accrued yet), 1- 30%, 2-30%, 3- 15%, 4-0%.\n    function getTaxTier(uint256 _timeFromLastRewardWithdrawal) internal pure returns (TaxTiers taxTier_) {\n        taxTier_ = TaxTiers.Tier4NoTax;\n        if (_timeFromLastRewardWithdrawal < 4 weeks) taxTier_ = TaxTiers.Tier3SmallTax;\n        if (_timeFromLastRewardWithdrawal < 3 weeks) taxTier_ = TaxTiers.Tier2MediumTax;\n        if (_timeFromLastRewardWithdrawal < 2 weeks) taxTier_ = TaxTiers.Tier1HugeTax;\n        if (_timeFromLastRewardWithdrawal < 1 weeks) taxTier_ = TaxTiers.Tier0NoPayment;\n    }\n\n    /// @dev gets an index to taxRates from config\n    /// @param _lastRewardWithdrawalTimestamp time in seconds of the last claim or stake to vault\n    /// @return timestamp of the next tax tier change\n    function wenNextTaxTier(uint32 _lastRewardWithdrawalTimestamp) internal view returns (uint256) {\n        if (_lastRewardWithdrawalTimestamp > uint32(block.timestamp)) {\n            return 0;\n        }\n        uint256 _timeFromLastRewardWithdrawal = uint32(block.timestamp) - _lastRewardWithdrawalTimestamp;\n        if (_timeFromLastRewardWithdrawal > 4 weeks)\n            return 0;\n        else\n            return _lastRewardWithdrawalTimestamp + 1 weeks;\n    }\n\n    /// function retrieves tax rate for given tax tier\n    function getTaxRate(TaxTiers _taxTier) internal view returns (uint256) {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        return s.config.taxRates[uint256(_taxTier)];\n    }\n}\n"
    },
    "contracts/libraries/FiHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport \"./LibAppStorage.sol\";\n\n/**\n * @notice Library for Fi financial operations structure\n * @author Decentralized Foundation Team\n */\n\nlibrary FiHelper {\n    function updateStorage(Fi memory _add, uint256 _tokenId, address _user) internal {\n        AppStorage storage s = LibAppStorage.diamondStorage();\n        Gem storage gem = s.gems[_tokenId];\n\n\n        ///todo refactor financial consisitency checks into a separate function\n        //        require(\n        //            (_add.claimedGross - _add.claimTaxPaid - _add.donated == _add.claimedNet) &&\n        //            (_add.unStakedGross - _add.vaultTaxPaid - _add.donated == _add.unStakedNet) &&\n        //            (_add.stakedGross - _add.donated == _add.stakedNetstakedNet)\n        //        , \"wrong financial operation structure\");\n\n        fiAdd(s.total, _add);\n        fiAdd(gem.fi, _add);\n        fiAdd(s.usersFi[_user], _add);\n    }\n\n    function fiAdd(Fi storage _initial, Fi memory _add) internal {\n        _initial.claimedGross += _add.claimedGross;\n        _initial.claimedNet += _add.claimedNet;\n        _initial.stakedGross += _add.stakedGross;\n        _initial.stakedNet += _add.stakedNet;\n        _initial.unStakedGross += _add.unStakedGross;\n        _initial.unStakedGrossUp += _add.unStakedGrossUp;\n        _initial.unStakedNet += _add.unStakedNet;\n        _initial.donated += _add.donated;\n        _initial.claimTaxPaid += _add.claimTaxPaid;\n        _initial.vaultTaxPaid += _add.vaultTaxPaid;\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    },
    "contracts/base-facet/Storage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport {AppStorage} from \"../libraries/LibAppStorage.sol\";\n\ncontract Storage is Context {\n    AppStorage internal s;\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "contracts/libraries/LibAppStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"../data-types/IDataTypes.sol\";\n\n/** @title  LibAppStorage EIP-2535 Diamond Facet Storage\n  * @author Decentralized Foundation Team\n  * @notice This diamond storage library is inherited by all facets and imported in libraries\n*/\nlibrary LibAppStorage {\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\n        assembly {\n            ds.slot := 0\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 250
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "evmVersion": "berlin",
    "metadata": {
      "useLiteralContent": true
    }
  }
}