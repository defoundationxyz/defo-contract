{
  "address": "0xF3B4799cC8f11eBE3B067a03207f31A8d43E8a87",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGross",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountNet",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGross",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountNet",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenids",
          "type": "uint256[]"
        }
      ],
      "name": "batchClaimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "batchStakeAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchStakeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumulatedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumulatedRewardAllUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allForAllTotalReward_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedGross",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedGrossAllUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTaxTier",
      "outputs": [
        {
          "internalType": "enum TaxTiers",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isClaimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "stakeAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x28389dd1b5c31799c24665f95b72f821ff2fbd039b028fab805ca4e62cd3d4ff",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x05309918A451156C2cE41f3C8dF89672ce83e944",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "1713525",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5ff76b6a3f4d48363e04a6d458b810059b97696554864b5021b4c4993cc62d4b",
    "transactionHash": "0x28389dd1b5c31799c24665f95b72f821ff2fbd039b028fab805ca4e62cd3d4ff",
    "logs": [],
    "blockNumber": 15975727,
    "cumulativeGasUsed": "2063531",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "eee850e7cb3cdcf8e203e703634e63e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGross\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNet\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGross\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNet\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenids\",\"type\":\"uint256[]\"}],\"name\":\"batchClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"batchStakeAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulatedRewardAllUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allForAllTotalReward_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedGross\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedGrossAllUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTaxTier\",\"outputs\":[{\"internalType\":\"enum TaxTiers\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"stakeAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Decentralized Foundation Team\",\"kind\":\"dev\",\"methods\":{\"getCumulatedReward()\":{\"returns\":{\"_0\":\"amount in DEFO (in wei precision)\"}},\"getCumulatedRewardAllUsers()\":{\"returns\":{\"allForAllTotalReward_\":\"amount in DEFO (in wei precision)\"}},\"getRewardAmount(uint256)\":{\"params\":{\"_tokenId\":\"unique NFT gem id\"},\"returns\":{\"_0\":\"pre-tax unclaimed reward in DEFO,- before deducting tax or charity, ready to be claimed or put to vault\"}},\"getStakedGross()\":{\"returns\":{\"_0\":\"total amount in DEFO (in wei precision)\"}},\"getStakedGrossAllUsers()\":{\"returns\":{\"_0\":\"total amount in DEFO (in wei precision)\"}},\"getTaxTier(uint256)\":{\"params\":{\"_tokenId\":\"unique NFT gem id\"},\"returns\":{\"_0\":\"current tax tier of the gem might be configurable, now it's a number in the range starting from 0 when 0 means nothing is payed out since there's no rewards in the first week, 4 is no tax, 1,2,3 - % in between (currently 30,30,15)\"}},\"isClaimable(uint256)\":{\"params\":{\"_tokenId\":\"unique NFT gem id\"},\"returns\":{\"_0\":\"true or false, checks for the pending maintenance and time passed since last claim\"}},\"stakeAndClaim(uint256,uint256)\":{\"params\":{\"_percent\":\"percent of what to put into the vault, as usual uses PRECISION_MULTIPLIER (which is 100 by defualt, e.g. 500 for 5%)\",\"_tokenId\":\"unique NFT gem id\"}}},\"title\":\"ERC721Facet EIP-2535 Diamond Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCumulatedReward()\":{\"notice\":\"amount of pre-taxed total reward earned by the sender for all time\"},\"getCumulatedRewardAllUsers()\":{\"notice\":\"amount of pre-taxed total reward earned by all the users for all time\"},\"getRewardAmount(uint256)\":{\"notice\":\"reward earned by the sender to the moment ready to be claimed or put to vault\"},\"getStakedGross()\":{\"notice\":\"amount of pre-taxed reward that are currently in the vault for the sender, so if put and then taken from the vault, it's not the return of the function\"},\"getStakedGrossAllUsers()\":{\"notice\":\"amount of pre-taxed reward that are currently in the vault for all users, it's not equal to the after-tax amount in the vault\"},\"getTaxTier(uint256)\":{\"notice\":\"gets tax tier for a gem\"},\"isClaimable(uint256)\":{\"notice\":\"checks if rewards can be claimed or not\"},\"stakeAndClaim(uint256,uint256)\":{\"notice\":\"This is used for the Vault Strategy, it puts the percent of all rewards to the vault and claims the rest\"},\"stakeReward(uint256,uint256)\":{\"notice\":\"todo decide whether move this to the vault facet or not - (to keep all staking/unstaking in one place), or to leave it here (this is a facet working with rewards  which can be either claimed or staked)\"}},\"notice\":\"The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/RewardsFacet.sol\":\"RewardsFacet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/base-facet/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n/**\\n * @title  BaseFacet\\n * @author Decentralized Foundation Team\\n * @notice BaseFacet is a base contract all facets to inherit, includes cross-facet utils and  common reusable functions for DEFO Diamond\\n */\\ncontract BaseFacet is Storage {\\n\\n    /* ====================== Modifiers ====================== */\\n\\n    modifier exists(uint256 _tokenId) {\\n        _requireExists(_tokenId);\\n        _;\\n    }\\n\\n    modifier onlyGemHolder(uint256 _tokenId) {\\n        require(s.nft.owners[_tokenId] == _msgSender(), \\\"You don't own this gem\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n    modifier nonZeroAddress(address _owner) {\\n        require(_owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        _;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _msgSender() internal override view returns (address sender_) {\\n        if (Context._msgSender() == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function _getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function _requireExists(uint256 _tokenId) internal view {\\n        require(_exists(_tokenId), \\\"ERC721: tokenId is not valid\\\");\\n    }\\n\\n    function _exists(uint256 _tokenId) internal view returns (bool) {\\n        return (s.nft.owners[_tokenId] != address(0));\\n    }\\n\\n    ///todo ensure passing memory array here to the public functions is pretty optimal\\n    function _getGemIds(address _user) internal view returns (uint256[] memory) {\\n        uint256 numberOfGems = s.nft.balances[_user];\\n        uint256[] memory gemIds = new uint256[](numberOfGems);\\n        for (uint256 i = 0; i < numberOfGems; i++) {\\n            uint256 gemId = s.nft.ownedTokens[_user][i];\\n            require(_exists(gemId), \\\"A gem doesn't exists\\\");\\n            gemIds[i] = gemId;\\n        }\\n        return gemIds;\\n    }\\n\\n    function _getAllUsers() internal view returns (address[] memory users_) {\\n        users_ = new address[](s.nft.allTokens.length);\\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\\n            users_[tokenId] = s.nft.owners[tokenId];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5ee18d83372dec082d66a9c61a88c6b5c034a741118da8be0524f9f1ed4f4b13\",\"license\":\"GPL-3.0\"},\"contracts/base-facet/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {AppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0x66f07eea1ae3a0fbf40fbf070d67bed29b4a0a2dfbb689f58292d28b5065418a\",\"license\":\"GPL-3.0\"},\"contracts/data-types/IDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n/**\\n*   @dev The only source for all the data structures used in the protocol storage\\n*   @dev This includes general config, gem type config, and mutable data\\n*/\\n\\n/// @dev number of payment tokens to enumerate the error, initially it's Defo and Dai,\\n/// @dev see PaymentTokens enum\\nuint256 constant PAYMENT_TOKENS = 2;\\n\\n/// @dev number of income recievers on yield gem mint\\nuint256 constant PAYMENT_RECEIVERS = 3;\\n\\n/// @dev total wallets on the protocol, see Wallets enum\\nuint256 constant WALLETS = 8;\\n\\n/// @dev total number of supported tax tiers\\nuint256 constant TAX_TIERS = 5;\\n\\n/**\\n*   @notice a struct for data compliance with erc721 standard\\n*   @param name Token name\\n*   @param symbol Token symbol\\n*   @param owners Mapping from token ID to owner address\\n*   @param balances Mapping owner address to token count\\n*   @param tokenApprovals Mapping from token ID to approved address\\n*   @param operatorApprovals Mapping from owner to operator approvals\\n*   @param ownedTokens Mapping from owner to list of owned token IDs\\n*   @param ownedTokensIndex Mapping from token ID to index of the owner tokens list\\n*   @param allTokens Array with all token ids, used for enumeration\\n*   @param allTokensIndex Mapping from token id to position in the allTokens array\\n*/\\n    struct ERC721Storage {\\n        string name;\\n        string symbol;\\n        Counters.Counter tokenIdTracker;\\n        mapping(uint256 => address) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n        string baseURI;\\n        mapping(address => mapping(uint256 => uint256)) ownedTokens;\\n        mapping(uint256 => uint256) ownedTokensIndex;\\n        uint256[] allTokens;\\n        mapping(uint256 => uint256) allTokensIndex;\\n        bool init;\\n    }\\n\\n\\n/// @notice token enum to index arrays of rates and addresses, the convention is that Dai is at place 0, Defo is at 1\\n/// @dev the order is extremely important once deployed\\n    enum PaymentTokens {\\n        Dai,\\n        Defo\\n    }\\n\\n/// @notice protocol wallets for easy enumeration,\\n/// @dev the order is extremely important once deployed, see configuration scripts\\n    enum Wallets {\\n        Treasury,\\n        RewardPool,\\n        LiquidityPair,\\n        Stabilizer,\\n        Charity,\\n        Vault,\\n        RedeemContract,\\n        DEXRouter\\n    }\\n\\n\\n/// @notice these tiers correspond to the configurable percentage from the diamond storage\\n    enum TaxTiers {\\n        Tier0NoPayment,\\n        Tier1HugeTax,\\n        Tier2MediumTax,\\n        Tier3SmallTax,\\n        Tier4NoTax\\n    }\\n\\n/**\\n * @notice DefoTokenLimitConfig DEFO ERC20 Token transfer limiter, this is for the 1000 DEFO per 24h sale limitation, can be changes with setTransferLimit\\n * @param saleLimitPeriod initially 1 day\\n * @param saleLimitAmount initially 1000 tokens\\n*/\\n    struct DefoTokenLimitConfig {\\n        uint256 saleLimitPeriod;\\n        uint256 saleLimitAmount;\\n        bool limitByReward;\\n    }\\n\\n/**\\n * @notice Main Protocol Configuration structure\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set, including no minting\\n     * @param incomeDistributionOnMint distribution of the payment among tokens in percent rates, all values use percentage multiplier (see percent helper), here addresses are from the Addresses\\n     * @param maintenancePeriod a period in seconds for maintenance fee accrual, initially one month\\n     * @param rewardPeriod a period in seconds for generating yield gem rewards, initially one week\\n     * @param mintCountResetPeriod a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs.\\n     * @param taxScaleSinceLastClaimPeriod a period in seconds for a tax scale to work out, initially one week\\n     * @param taxRates tax rates in percent (with percent multiplier, see percent helper contract), initially 30%, 30%, 15%, 0\\n     * @param charityContributionRate charity rate (w multiplier as all percent values in the project), initially 5%\\n     * @param vaultWithdrawalRate fee paid to withdraw amount from the vault back to the earned rewards, initially 10%\\n     * @param taperRate taper rate, initially 20%\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set\\n     * @param mintLimitWindow a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs, see GemTypeConfig.maxMintsPerLimitWindow\\n     */\\n\\n    struct ProtocolConfig {\\n        IERC20[PAYMENT_TOKENS] paymentTokens;\\n        address[WALLETS] wallets;\\n        uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] incomeDistributionOnMint;\\n        // time periods\\n        uint32 maintenancePeriod;\\n        uint32 rewardPeriod;\\n        uint32 taxScaleSinceLastClaimPeriod;\\n        // taxes and contributions\\n        uint256[TAX_TIERS] taxRates;\\n        uint256 charityContributionRate;\\n        uint256 vaultWithdrawalTaxRate;\\n        uint256 taperRate;\\n        // locks\\n        bool mintLock;\\n        bool transferLock;\\n        // mint limit period for coutner reset\\n        uint32 mintLimitWindow;\\n        DefoTokenLimitConfig defoTokenLimitConfig;\\n    }\\n\\n/**\\n * @notice A struct containing configuration details for gemType\\n     * @param maintenanceFee Maintenance fee in Dai for the node type, amount in wei per month\\n     * @param rewardAmountDefo Reward in DEFO for the node type, amount in wei per week\\n     * @param price Price in DEFO and DAI (in wei), respectively, according to the PaymentTokens enum\\n     * @param taperRewardsThresholdDefo Taper threshold, in wei, decreasing rate every given amount of rewards in DEFO\\n     * @param maxMintsPerLimitWindow number of gems, mint limit for a node type, see ProtocolConfig.mintLimitWindow\\n     */\\n    struct GemTypeConfig {\\n        uint256 maintenanceFeeDai;\\n        uint256 rewardAmountDefo;\\n        uint256[PAYMENT_TOKENS] price;\\n        uint256 taperRewardsThresholdDefo;\\n        uint256 maxMintsPerLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct containing current mutable status for gemType\\n     * @param mintCount counter incrementing by one on every mint, during mintCountResetPeriod; after mintCountResetPeriod with no mints, reset to 0\\n     * @param endOfMintLimitWindow a moment to reset the mintCount counter to zero, set the new endOfMintLimitWindow and start over\\n     */\\n    struct GemTypeMintWindow {\\n        uint256 mintCount;\\n        uint32 endOfMintLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct describing current DEFO Token limiter input\\n * @param tokensSold DEFO tokens sold per limit window, \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfLastSale time of last sale\\n     */\\n    struct DEFOTokenLimitWindow {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfLastSale;\\n    }\\n\\n/**\\n * @notice A struct describing DEFO Token limit per weekly rewards\\n * @param tokensSold DEFO tokens sold per reward period window starting from the first sale \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfWindowStart time of first sale in the window\\n     */\\n    struct DEFOTokenLimitPerRewards {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfWindowStart;\\n    }\\n\\n    enum Booster {\\n        None,\\n        Delta,\\n        Omega\\n    }\\n\\n/**\\n * @notice A struct describing financial state, provides the complete state for user, gem, or protocol total.\\n * @notice It gives the current exact balance of the Vault, Rewards, and Charity.\\n * @param claimedGross rewards amount previously claimed for all time, gross amount - before tax and charity\\n * @param claimedNet rewards claimed and to user, net amount after tax and charity\\n * @param stakedGross amount removed from rewards to stake, charity not yet deducted\\n * @param stakedNet amount put to the vault - charity has been deducted\\n * @param unStakedGross  amount removed from the vault, pre withdraw tax and charity\\n * @param unStakedGrossUpped  amount removed from the vault gross-upped with charity to equal to the stakedGross amount\\n * @param unStakedNet  amount returned to the earned rewards, post withdraw tax and charity\\n * @param donated sent to charity\\n * @param claimTaxPaid claim tax deducted - 30%, 15%, 15%\\n * @param vaultTaxPaid vault withdrawal tax deducted\\n     */\\n    struct Fi {\\n        uint256 claimedGross;\\n        uint256 claimedNet;\\n        uint256 stakedGross;\\n        uint256 stakedNet;\\n        uint256 unStakedGross;\\n        uint256 unStakedGrossUp;\\n        uint256 unStakedNet;\\n        uint256 donated;\\n        uint256 claimTaxPaid;\\n        uint256 vaultTaxPaid;\\n    }\\n\\n/**\\n * @notice current state of a gem, a gem is an instance with consistent yield and fee rates specified by the pair (gemType, booster)\\n * @param gemType node type, initially it's  0 -> Ruby , 1 -> Sapphire, 2 -> Diamond, and boosters\\n * @param booster node Booster 0 -> None , 1 -> Delta , 2 -> Omega\\n * @param mintTime timestamp of the mint time\\n * @param lastRewardWithdrawalTime timestamp of last reward claim OR stake. Same as mintTime if not yet claimed.\\n * @param lastMaintenanceTime timestamp of the last maintenance (could be a date in the future in case of the upfront payment)\\n * @param presold flag that this gem was bought on presale, used to avoid double minting\\n*/\\n    struct Gem {\\n        uint8 gemTypeId;\\n        Booster booster;\\n        uint32 mintTime;\\n        uint32 lastRewardWithdrawalTime;\\n        uint32 lastMaintenanceTime;\\n        Fi fi;\\n        bool presold;\\n        uint256 maintenanceFeePaid;\\n    }\\n\\n/**\\n*   @notice Main Contract Storage utilizing App Storage pattern for Diamond Proxy data organization\\n*   @param config main configuration, basically everything except gemType specific\\n*   @param gemTypes supported gem types with their details, gemTypeId is the index of the array\\n*   @param gems mapping indexed by tokenId, where tokenId is in the nft.allTokens\\n*   @param gemTypesMintWindows windows for limiting yield gem mints per gem type\\n*   @param defoTokenLimitWindow window for limiting DEFO Token sale\\n*   @param nft ERC721 standard related storage\\n*   @param total cumulated amounts for all operations\\n*   @param usersFi financial info per each user\\n*   @param usersNextGemBooster used for presale, number (uint256) of boosters (Booster) with a type (uint8) left for a user (address)\\n*/\\n    struct AppStorage {\\n        // configuration\\n        ProtocolConfig config;\\n        GemTypeConfig[] gemTypes;\\n        // current state\\n        GemTypeMintWindow[] gemTypesMintWindows;\\n        DEFOTokenLimitWindow defoTokenLimitWindow;\\n        mapping(uint256 => Gem) gems;\\n        ERC721Storage nft;\\n        // Cumulations\\n        Fi total;\\n        // User data, users list is s.nft.owners, size s.nft.allTokens.length (managed by ERC721Enumerable)\\n        mapping(address => Fi) usersFi;\\n        mapping(address => mapping(uint8 => mapping(Booster => uint256))) usersNextGemBooster;\\n        DEFOTokenLimitPerRewards defoTokenLimitPerRewards;\\n    }\\n\",\"keccak256\":\"0x6e190a17cbf3eeb538dc06d66057b3a8515f47009cc0e3e9bea168c9c70e8936\",\"license\":\"GPL-3.0\"},\"contracts/facets/RewardsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\nimport \\\"../interfaces/IRewards.sol\\\";\\nimport \\\"../interfaces/IDEXRouter02.sol\\\";\\nimport \\\"../base-facet/BaseFacet.sol\\\";\\nimport \\\"../libraries/LibDonations.sol\\\";\\nimport \\\"../libraries/LibMaintainer.sol\\\";\\nimport \\\"../libraries/PercentHelper.sol\\\";\\nimport \\\"../libraries/BoosterHelper.sol\\\";\\nimport \\\"../libraries/PeriodicHelper.sol\\\";\\nimport \\\"../libraries/TimeHelper.sol\\\";\\nimport \\\"../libraries/TaxHelper.sol\\\";\\nimport \\\"../libraries/FiHelper.sol\\\";\\n\\n/** @title  ERC721Facet EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\\n*/\\ncontract RewardsFacet is BaseFacet, IRewards {\\n    using FiHelper for Fi;\\n    using BoosterHelper for Booster;\\n\\n    /* ====================== Modifiers ====================== */\\n    modifier onlyClaimable(uint256 _tokenId) {\\n        require(isClaimable(_tokenId), \\\"Not claimable\\\");\\n        _;\\n    }\\n\\n    /* ============ External and Public Functions ============ */\\n    function claimReward(uint256 _tokenId) public onlyGemHolder(_tokenId) onlyClaimable(_tokenId) {\\n        _claimRewardAmount(_tokenId, getRewardAmount(_tokenId));\\n    }\\n\\n    function batchClaimReward(uint256[] calldata _tokenids) external {\\n        for (uint256 index = 0; index < _tokenids.length; index++) {\\n            claimReward(_tokenids[index]);\\n        }\\n    }\\n\\n    function stakeReward(uint256 _tokenId, uint256 _amount) onlyGemHolder(_tokenId) exists(_tokenId) public {\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        address[WALLETS] storage wallets = s.config.wallets;\\n        address user = _msgSender();\\n        Fi memory op;\\n\\n        require(_amount > 0, \\\"Zero rewards for a gem\\\");\\n        uint256 rewardGross = getRewardAmount(_tokenId);\\n        require(_amount <= rewardGross, \\\"Not enough rewards\\\");\\n\\n        op.donated = PercentHelper.rate(_amount, s.config.charityContributionRate);\\n        op.stakedGross = _amount;\\n        op.stakedNet = _amount - op.donated;\\n\\n        _sellDefoAndDonate(op.donated);\\n        emit LibDonations.Donated(user, op.donated);\\n\\n\\n        defo.transferFrom(\\n            wallets[uint(Wallets.RewardPool)],\\n            wallets[uint(Wallets.Vault)],\\n            op.stakedNet);\\n        emit Staked(user, op.stakedGross, op.stakedNet);\\n\\n        op.updateStorage(_tokenId, user);\\n    }\\n\\n    function stakeAndClaim(uint256 _tokenId, uint256 _percent) public onlyGemHolder(_tokenId) onlyClaimable(_tokenId) {\\n        uint256 reward = getRewardAmount(_tokenId);\\n        uint256 rewardToStake = PercentHelper.rate(reward, _percent);\\n        stakeReward(_tokenId, rewardToStake);\\n        claimReward(_tokenId);\\n    }\\n\\n\\n    function batchStakeReward(uint256[] calldata _tokenIds, uint256[] calldata _amounts) external {\\n        require(_tokenIds.length == _amounts.length, \\\"DEFORewards:_tokendIds-_amounts-inconsistent\\\");\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            stakeReward(_tokenIds[i], _amounts[i]);\\n        }\\n    }\\n\\n    function batchStakeAndClaim(uint256[] calldata _tokenIds, uint256 _percent) external {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            stakeAndClaim(_tokenIds[i], _percent);\\n        }\\n    }\\n\\n    function getRewardAmount(uint256 _tokenId) public exists(_tokenId) view returns (uint256) {\\n        uint256 rewardToDate = _getCumulatedRewardAmountGross(_tokenId);\\n        rewardToDate += s.gems[_tokenId].fi.unStakedNet;\\n        rewardToDate -= s.gems[_tokenId].fi.claimedGross;\\n        rewardToDate -= s.gems[_tokenId].fi.stakedGross;\\n        return rewardToDate;\\n    }\\n\\n    function isClaimable(uint256 _tokenId) public view returns (bool) {\\n        return (\\n        TimeHelper.hasPassedFromOrNotHappenedYet(s.gems[_tokenId].lastRewardWithdrawalTime, s.config.rewardPeriod) &&\\n        LibMaintainer._getPendingMaintenanceFee(_tokenId) == 0 &&\\n        getRewardAmount(_tokenId) != 0);\\n    }\\n\\n    function getCumulatedReward() external view returns (uint256) {\\n        address user = _msgSender();\\n        uint256[] memory gemIds = _getGemIds(user);\\n        uint256 reward = 0;\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            reward += _getCumulatedRewardAmountGross(gemIds[i]);\\n        }\\n        return reward;\\n    }\\n\\n    function getCumulatedRewardAllUsers() external view returns (uint256 allForAllTotalReward_) {\\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\\n            allForAllTotalReward_ += _getCumulatedRewardAmountGross(tokenId);\\n        }\\n    }\\n\\n\\n    function getStakedGross() external view returns (uint256) {\\n        return s.usersFi[_msgSender()].stakedGross - s.usersFi[_msgSender()].unStakedGrossUp;\\n    }\\n\\n    function getStakedGrossAllUsers() external view returns (uint256) {\\n        return s.total.stakedGross - s.total.unStakedGrossUp;\\n    }\\n\\n    function getTaxTier(uint256 _tokenId) public view returns (TaxTiers) {\\n        return TaxHelper.getTaxTier(uint32(block.timestamp) - s.gems[_tokenId].lastRewardWithdrawalTime);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _claimRewardAmount(uint256 _tokenId, uint256 _amount) private {\\n        Gem storage gem = s.gems[_tokenId];\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        address[WALLETS] storage wallets = s.config.wallets;\\n\\n        require(_amount > 0, \\\"No amount to claim\\\");\\n\\n        Fi memory op;\\n        op.claimedGross = _amount;\\n\\n        TaxTiers taxTier = getTaxTier(_tokenId);\\n        op.claimTaxPaid = PercentHelper.rate(op.claimedGross, s.config.taxRates[uint256(taxTier)]);\\n        op.donated = PercentHelper.rate(op.claimedGross, s.config.charityContributionRate);\\n        op.claimedNet = op.claimedGross - op.claimTaxPaid - op.donated;\\n\\n        address user = _msgSender();\\n        _sellDefoAndDonate(op.donated);\\n        emit LibDonations.Donated(user, op.donated);\\n\\n        defo.transferFrom(\\n            wallets[uint(Wallets.RewardPool)],\\n            user,\\n            op.claimedNet);\\n        gem.lastRewardWithdrawalTime = uint32(block.timestamp);\\n        emit Claimed(user, op.claimedGross, op.claimedNet);\\n\\n        op.updateStorage(_tokenId, user);\\n    }\\n\\n\\n    function _sellDefoAndDonate(uint256 _donationAmountDefo) private {\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        address[WALLETS] storage wallets = s.config.wallets;\\n\\n        defo.transferFrom(\\n            wallets[uint(Wallets.RewardPool)],\\n            address(this),\\n            _donationAmountDefo);\\n\\n        address[] memory path1;\\n        path1 = new address[](2);\\n        path1[0] = address(s.config.paymentTokens[uint(PaymentTokens.Defo)]);\\n        path1[1] = address(s.config.paymentTokens[uint(PaymentTokens.Dai)]);\\n        IDEXRouter02(wallets[uint(Wallets.DEXRouter)]).swapExactTokensForTokens(\\n            _donationAmountDefo,\\n            1,\\n            path1,\\n            wallets[uint(Wallets.Charity)],\\n            block.timestamp);\\n    }\\n\\n\\n    function _getCumulatedRewardAmountGross(uint256 _tokenId) internal view returns (uint256) {\\n        Gem memory gem = s.gems[_tokenId];\\n        GemTypeConfig memory gemType = s.gemTypes[gem.gemTypeId];\\n        uint256 boostedRewardAmount = gem.booster.boostRewardsRate(gemType.rewardAmountDefo);\\n        uint256 totalReward = PeriodicHelper.calculateTaperedReward(\\n            block.timestamp - gem.mintTime, //period to calculate\\n            gemType.taperRewardsThresholdDefo,\\n            s.config.taperRate,\\n            boostedRewardAmount,\\n            s.config.rewardPeriod);\\n        return totalReward;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6db3719b677ead76ba63604a26d90a3105af62403f58134f09edad9e5c9079b8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDEXRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\ninterface IDEXRouter02 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x7a0a222867ade851bef69811b328ed8229138c92a268e5677a535fdd071756a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/** @title  IYieldGem EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice Rewards Interface, operation with rewards: taxation, charity, claiming and putting to the vault\\n*/\\ninterface IRewards {\\n    event Claimed(address indexed user, uint256 amountGross, uint256 amountNet);\\n    event Staked(address indexed user, uint256 amountGross, uint256 amountNet);\\n\\n    function claimReward(uint256 _tokenId) external;\\n\\n    function batchClaimReward(uint256[] calldata _tokenids) external;\\n\\n    ///todo decide whether move this to the vault facet or not - (to keep all staking/unstaking in one place), or to leave it here (this is a facet working with rewards  which can be either claimed or staked)\\n    function stakeReward(uint256 _tokenId, uint256 _amount) external;\\n\\n    /**\\n*   @notice This is used for the Vault Strategy, it puts the percent of all rewards to the vault and claims the rest\\n    *   @param _tokenId unique NFT gem id\\n    *   @param _percent percent of what to put into the vault, as usual uses PRECISION_MULTIPLIER (which is 100 by defualt, e.g. 500 for 5%)\\n    */\\n    function stakeAndClaim(uint256 _tokenId, uint256 _percent) external;\\n\\n    function batchStakeReward(uint256[] calldata _tokenIds, uint256[] calldata _amounts) external;\\n\\n    function batchStakeAndClaim(uint256[] calldata _tokenIds, uint256 _percent) external;\\n\\n    /**\\n    *   @notice reward earned by the sender to the moment ready to be claimed or put to vault\\n    *   @param _tokenId unique NFT gem id\\n    *   @return pre-tax unclaimed reward in DEFO,- before deducting tax or charity, ready to be claimed or put to vault\\n    */\\n    function getRewardAmount(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n*   @notice checks if rewards can be claimed or not\\n    *   @param _tokenId unique NFT gem id\\n    *   @return true or false, checks for the pending maintenance and time passed since last claim\\n    */\\n    function isClaimable(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n    *   @notice amount of pre-taxed total reward earned by the sender for all time\\n    *   @return amount in DEFO (in wei precision)\\n    */\\n    function getCumulatedReward() external view returns (uint256);\\n\\n    /**\\n    *   @notice amount of pre-taxed total reward earned by all the users for all time\\n    *   @return amount in DEFO (in wei precision)\\n    */\\n    function getCumulatedRewardAllUsers() external view returns (uint256);\\n\\n\\n    /**\\n    *   @notice amount of pre-taxed reward that are currently in the vault for the sender, so if put and then taken from the vault, it's not the return of the function\\n    *   @return total amount in DEFO (in wei precision)\\n    */\\n    function getStakedGross() external view returns (uint256);\\n\\n    /**\\n    *   @notice amount of pre-taxed reward that are currently in the vault for all users, it's not equal to the after-tax amount in the vault\\n    *   @return total amount in DEFO (in wei precision)\\n    */\\n    function getStakedGrossAllUsers() external view returns (uint256);\\n\\n    /**\\n    *   @notice gets tax tier for a gem\\n    *   @param _tokenId unique NFT gem id\\n    *   @return current tax tier of the gem might be configurable, now it's a number in the range starting from 0 when 0 means nothing is payed out since there's no rewards in the first week, 4 is no tax, 1,2,3 - % in between (currently 30,30,15)\\n    */\\n    function getTaxTier(uint256 _tokenId) external view returns (TaxTiers);\\n\\n\\n}\\n\",\"keccak256\":\"0x9846f18f4a4a152ad462801af7a58eae0cb35751450714e580de33237b8b0faf\",\"license\":\"GPL-3.0\"},\"contracts/libraries/BoosterHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport {Booster} from \\\"../data-types/IDataTypes.sol\\\";\\nimport \\\"./PercentHelper.sol\\\";\\n\\n/// @notice Library to boost rates and fees\\n/// @author Decentralized Foundation\\n///todo utilize percenthelper\\nlibrary BoosterHelper {\\n    /// @notice boosting rewards rate (which is an amount per second), 50% for omega, 25% for delta\\n    function boostRewardsRate(Booster booster, uint256 rate) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            //50% more\\n            return rate * 15000 / 10000;\\n        } else if (booster == Booster.Delta) {\\n            //25% more\\n            return rate * 12500 / 10000;\\n        } else return rate;\\n    }\\n\\n    /// @notice reducing fees, 50% for omega, 25% reduction for delta\\n    function reduceMaintenanceFee(Booster booster, uint256 fee) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            return fee / 2;\\n        } else if (booster == Booster.Delta) {\\n            return fee * 7500 / 10000;\\n        } else return fee;\\n    }\\n\\n    function reduceVaultWithdrawalFee(Booster booster, uint256 fee) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            return fee * 1000 / 10000;\\n        } else if (booster == Booster.Delta) {\\n            return fee / 2;\\n        } else return fee;\\n    }\\n}\\n\",\"keccak256\":\"0xee7e3041146e7c8cf718966e77889b0bd8f631488dfc50bb7796e8b0292c3730\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FiHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/**\\n * @notice Library for Fi financial operations structure\\n * @author Decentralized Foundation Team\\n */\\n\\nlibrary FiHelper {\\n\\n    function updateStorage(Fi memory _add, uint256 _tokenId, address _user) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        Gem storage gem = s.gems[_tokenId];\\n\\n\\n        ///todo refactor financial consisitency checks into a separate function\\n        //        require(\\n        //            (_add.claimedGross - _add.claimTaxPaid - _add.donated == _add.claimedNet) &&\\n        //            (_add.unStakedGross - _add.vaultTaxPaid - _add.donated == _add.unStakedNet) &&\\n        //            (_add.stakedGross - _add.donated == _add.stakedNetstakedNet)\\n        //        , \\\"wrong financial operation structure\\\");\\n\\n        fiAdd(s.total, _add);\\n        fiAdd(gem.fi, _add);\\n        fiAdd(s.usersFi[_user], _add);\\n    }\\n\\n    function updateStorage(Fi memory _add, address _user) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        fiAdd(s.total, _add);\\n        fiAdd(s.usersFi[_user], _add);\\n    }\\n\\n    function fiAdd(Fi storage _initial, Fi memory _add) internal {\\n        _initial.claimedGross += _add.claimedGross;\\n        _initial.claimedNet += _add.claimedNet;\\n        _initial.stakedGross += _add.stakedGross;\\n        _initial.stakedNet += _add.stakedNet;\\n        _initial.unStakedGross += _add.unStakedGross;\\n        _initial.unStakedGrossUp += _add.unStakedGrossUp;\\n        _initial.unStakedNet += _add.unStakedNet;\\n        _initial.donated += _add.donated;\\n        _initial.claimTaxPaid += _add.claimTaxPaid;\\n        _initial.vaultTaxPaid += _add.vaultTaxPaid;\\n    }\\n\\n    function fiSubtract(Fi storage _initial, Fi memory _add) internal {\\n        _initial.claimedGross -= _add.claimedGross;\\n        _initial.claimedNet -= _add.claimedNet;\\n        _initial.stakedGross -= _add.stakedGross;\\n        _initial.stakedNet -= _add.stakedNet;\\n        _initial.unStakedGross -= _add.unStakedGross;\\n        _initial.unStakedGrossUp -= _add.unStakedGrossUp;\\n        _initial.unStakedNet -= _add.unStakedNet;\\n        _initial.donated -= _add.donated;\\n        _initial.claimTaxPaid -= _add.claimTaxPaid;\\n        _initial.vaultTaxPaid -= _add.vaultTaxPaid;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x30b98d43ee16ebc120bb25ebf47eb62087a717c8f6155d4470407cde6d6a57b8\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/** @title  LibAppStorage EIP-2535 Diamond Facet Storage\\n  * @author Decentralized Foundation Team\\n  * @notice This diamond storage library is inherited by all facets and imported in libraries\\n*/\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf2e84cec0bd10a28b47d23a086c1d77096efac4f3b3d6f1c132ebbe814c8b1d5\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibDonations.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n// helper for limit daily mints\\nlibrary LibDonations {\\n    event Donated(address indexed user, uint256 amount);\\n}\\n\",\"keccak256\":\"0xffec6a5e5edf3407bff6f08539b45c493f00d6bf32d10e1efdd12a28a3e7f757\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibMaintainer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\nimport \\\"./PercentHelper.sol\\\";\\nimport \\\"./BoosterHelper.sol\\\";\\nimport \\\"./PeriodicHelper.sol\\\";\\n\\n// helper for limit daily mints\\nlibrary LibMaintainer {\\n    function _getPendingMaintenanceFee(uint256 _tokenId) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        Gem storage gem = s.gems[_tokenId];\\n\\n        // time period checks - if it's not necessary or too early\\n        if (gem.lastMaintenanceTime >= block.timestamp)\\n            return 0;\\n        uint32 feePaymentPeriod = uint32(block.timestamp) - gem.mintTime;\\n        //\\\"Too soon, maintenance fee has not been yet accrued\\\");\\n        if (feePaymentPeriod <= s.config.maintenancePeriod)\\n            return 0;\\n        // amount calculation\\n        uint256 discountedFeeDai = BoosterHelper.reduceMaintenanceFee(gem.booster, s.gemTypes[gem.gemTypeId].maintenanceFeeDai);\\n        uint256 feeAmount = PeriodicHelper.calculatePeriodic(discountedFeeDai, gem.mintTime, s.config.maintenancePeriod);\\n        return feeAmount - gem.maintenanceFeePaid;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4cb8652a33498cd45135c46cde6d0fc98c39aee23dc6160c464575fa59679fac\",\"license\":\"GPL-3.0\"},\"contracts/libraries/PercentHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n\\n/**\\n * @notice Library for percentage integer math, note PERCENTAGE_PRECISION_MULTIPLIER when configuring the protocol\\n * @author Decentralized Foundation Team\\n * @dev PERCENTAGE_PRECISION_MULTIPLIER*100 = 10000 greater than real percent, so 20% is represented as 2000, meaning 0.2\\n */\\n\\nlibrary PercentHelper {\\n    uint256 constant PERCENTAGE_PRECISION_MULTIPLIER = 100;\\n    uint256 constant HUNDRED_PERCENT = 100 * PERCENTAGE_PRECISION_MULTIPLIER;\\n\\n    /**\\n     * @dev simply a ratio of the given value, e.g. if tax is 30% and value if 100 the function gives 30\\n     * @param value Value to get ratio from\\n     * @param tax Percent to apply\\n     */\\n    ///todo make pure once got rid of the console.log\\n    function rate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (value * tax) / HUNDRED_PERCENT : 0;\\n    }\\n\\n    /**\\n    * @dev simple gross-up, gives back gross for net value, if charity is 5%, then gross up of 95 gives 100\\n     * @param netValue Net value to gross up\\n     * @param tax Percent that was applied\\n     */\\n    function grossUp(uint256 netValue, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (netValue * HUNDRED_PERCENT) / (HUNDRED_PERCENT - tax) : 0;\\n    }\\n\\n\\n    /// @dev received inverted percent for taper calc, if ratio is 20%, then 1/(1-20%) = 25%\\n    function invertedRate(uint256 value, uint256 ratio) internal pure returns (uint256) {\\n        return value * HUNDRED_PERCENT / (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function oneHundredLessPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function minusHundredPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (ratio - HUNDRED_PERCENT);\\n    }\\n\\n\\n    function reversePercent(uint256 ratio) internal pure returns (uint256) {\\n        return PERCENTAGE_PRECISION_MULTIPLIER / ratio;\\n    }\\n\\n    function percentPower(uint256 value, uint256 ratio, uint pow) internal pure returns (uint256) {\\n        return value * PERCENTAGE_PRECISION_MULTIPLIER ** pow / ratio ** pow;\\n    }\\n\\n\\n    /// @dev simply value less given percentage, e.g. if tax is 30% the functio gives 70 for 100\\n    function lessRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value - rate(value, tax);\\n    }\\n\\n    function plusRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value + rate(value, tax);\\n    }\\n}\\n\",\"keccak256\":\"0x70d9a8e3cf2aad9102eda57cb8d7efacca2f96f89d50aef7c6088f522c4763ae\",\"license\":\"GPL-3.0\"},\"contracts/libraries/PeriodicHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./PercentHelper.sol\\\";\\nimport \\\"./BoosterHelper.sol\\\";\\n\\n/// @notice Library for reward calculations\\n/// @author Decentralized Foundation\\nlibrary PeriodicHelper {\\n    using PercentHelper for uint256;\\n\\n    /// @dev calculates rewards with a second precision to a given date, not prorated to date\\n    function calculatePeriodicToDate(\\n        uint256 ratePerPeriod,\\n        uint32 lastEventTime,\\n        uint32 toDate,\\n        uint32 payOrDeductPeriod\\n    ) internal pure returns (uint) {\\n        return (toDate > lastEventTime) ? ((toDate - lastEventTime) / payOrDeductPeriod) * ratePerPeriod : 0;\\n    }\\n\\n    /// @dev calculates rewards with a second precision, not prorated to date\\n    function calculatePeriodic(\\n        uint256 ratePerPeriod,\\n        uint32 lastEventTime,\\n        uint32 payOrDeductPeriod\\n    ) internal view returns (uint) {\\n\\n        return calculatePeriodicToDate(ratePerPeriod, lastEventTime, uint32(block.timestamp), payOrDeductPeriod);\\n    }\\n\\n\\n\\n    // @notice Calculated Tapered Reward starting from the mint time. To get the reward call this function and subtract already paid from it.\\n    // @return taperedReward, updatedRewardRate\\n    function calculateTaperedReward(\\n        uint timePeriod, //block.timestamp - mintTime\\n        uint256 taperThreshold, //120 for diamond\\n        uint256 taperPercent, //80% usually, NOTE this is 80% but not 20%\\n        uint ratePerPeriod, //5 for diamond, pass already boosted rate if boost is applicable\\n        uint payOrDeductPeriod //in seconds, initially it's 1 week\\n    ) internal pure returns (uint256 taperedReward) {\\n        uint256 taperedPercent = taperPercent.oneHundredLessPercent();\\n        // Basically it's a geometric progression of the timestamps b_n = b_1*q_(n-1),\\n        // For simplicity startTime is zero, so timePeriod should be block.timestamp - startTime\\n        // where q = 1/taperedPercent, b_1 =  taperThreshold/ratePerPeriod\\n        // So that b_0 = taperThreshold/ratePerPeriod (which is 120/5= 24 weeks for the first taper from the startTime)\\n        // b_1 = taperThreshold/(ratePerPeriod*taperedPercent^1)  (which is 120/(5*0.8)= 30 weeks from the previous point to get 120 $DEFO by the tapered rate of 4)\\n        // b_2 = taperThreshold/(ratePerPeriod*taperedPercent^2)\\n        // ....\\n        // b_n = taperThreshold/(ratePerPeriod  *taperedPercent^n)\\n        // b_(n+1) = taperThreshold/(ratePerPeriod*taperedPercent^(n+1))\\n        // So that SUM_n_from_1_to_n(b_n)<=timePeriod, but SUM_n_from_1_to_(n+1)(b_n)>timePeriod\\n        // Actual points on the timeline are S_i which are sums of the taper intervals b_i\\n        //\\n        // 1. At first, lets' find n and S_n\\n        // Sum of geometric progression is Sn = b_1 * (q^n-1)/(q-1)\\n        // So we just loop to find while Sn<=timePeriod, so that Sn = taperThreshold/ratePerPeriod * (1/taperedPercent^n-1)/(1/taperedPercent -1)\\n        //\\n        // for example, for diamond gem: it's 120/5*(1/0.8**(N-1)-1)/(1/0.8-1)\\n        //\\n        // 2. Once we found n and S_n, the amount to pay would be taperThreshold*n+(timePeriod - S_n)*ratePerPeriod*taperedPercent^n\\n        // for example. if we got 100 weeks, n =3 and the formula is 120*3+(100-91.5)*5*0.8**3 = 381.76\\n        // We calculate the finalAmount and deduct what was paid already to calculate the payment.\\n        uint finalAmount;\\n        uint sN = 0;\\n        uint sNp1 = 0;\\n        //S_(n+1)\\n        uint n = 0;\\n        do {\\n            //this is the formula, but the percents are with precision multiplier\\n            //sN = taperThreshold/ratePerPeriod * (1/taperedPercent**n-1)/(1/taperedPercent -1);\\n            sN = sNp1;\\n            sNp1 = taperThreshold / ratePerPeriod *\\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT ** n / taperedPercent ** n - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER) /\\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT / taperedPercent - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER);\\n            n++;\\n        }\\n        while (payOrDeductPeriod * sNp1 <= timePeriod);\\n        n = n - 2;\\n        //convert sN to Seconds, that's just for the logs to show in weeks\\n        sN *= payOrDeductPeriod;\\n        //        uint bN = payOrDeductPeriod * taperThreshold / (ratePerPeriod * taperedPercent ** n);\\n        // The whole process makes sense if the current time is later than the 1st taper event\\n        uint finalRate;\\n        if (sN != 0 && timePeriod > sN) {\\n            finalRate = ratePerPeriod * taperedPercent ** (n) / PercentHelper.HUNDRED_PERCENT ** (n);\\n            finalAmount = taperThreshold * n + ((timePeriod - sN) / payOrDeductPeriod) * finalRate;\\n        }\\n        else {\\n            finalRate = ratePerPeriod;\\n            finalAmount = timePeriod / payOrDeductPeriod * ratePerPeriod;\\n        }\\n        return finalAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xf4a075af12a13cf32cd59469bcd6274204d7cb575cd1bf177bf447eabcbaf2ab\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TaxHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./PercentHelper.sol\\\";\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/// @notice Library for withdrawal tax operations\\nlibrary TaxHelper {\\n    /// @dev gets an index to the taxTable\\n    /// @param _timeFromLastRewardWithdrawal time in seconds passed from the last claim or stake\\n    /// @return taxTier_ tax tier, can be a configurable mapping, now it's 0- 100% (rewards have not accrued yet), 1- 30%, 2-30%, 3- 15%, 4-0%.\\n    function getTaxTier(uint256 _timeFromLastRewardWithdrawal) internal view returns (TaxTiers taxTier_) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint32 scale = s.config.taxScaleSinceLastClaimPeriod;\\n\\n        taxTier_ = TaxTiers.Tier4NoTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 4) taxTier_ = TaxTiers.Tier3SmallTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 3) taxTier_ = TaxTiers.Tier2MediumTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 2) taxTier_ = TaxTiers.Tier1HugeTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 1) taxTier_ = TaxTiers.Tier0NoPayment;\\n    }\\n\\n    /// @dev gets an index to taxRates from config\\n    /// @param _lastRewardWithdrawalTimestamp time in seconds of the last claim or stake to vault\\n    /// @return timestamp of the next tax tier change\\n    function wenNextTaxTier(uint32 _lastRewardWithdrawalTimestamp) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint32 scale = s.config.taxScaleSinceLastClaimPeriod;\\n\\n        if (_lastRewardWithdrawalTimestamp > uint32(block.timestamp)) {\\n            return 0;\\n        }\\n        uint256 _timeFromLastRewardWithdrawal = uint32(block.timestamp) - _lastRewardWithdrawalTimestamp;\\n        if (_timeFromLastRewardWithdrawal > scale * 4)\\n            return 0;\\n        else\\n            return _lastRewardWithdrawalTimestamp + scale;\\n    }\\n\\n    /// function retrieves tax rate for given tax tier\\n    function getTaxRate(TaxTiers _taxTier) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.config.taxRates[uint256(_taxTier)];\\n    }\\n}\\n\",\"keccak256\":\"0x34878351c0e713530b4762b7139f603504a40267093da4f92b0621f9fc14c3c4\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TimeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/// @notice Operations with time periods and durations\\nlibrary TimeHelper {\\n    function hasPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 lockPeriod) internal view returns (bool) {\\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent > lockPeriod);\\n    }\\n\\n    function notPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 freePeriod) internal view returns (bool) {\\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent < freePeriod);\\n    }\\n}\\n\",\"keccak256\":\"0x7f6ce8b464efa3f9a47d7fcaed8830e2890e160e6bac07e7c38171aa48460e3a\",\"license\":\"GPL-3.0\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611dfd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063a4ff6c481161008c578063b816b65d11610066578063b816b65d14610194578063c760da04146101a7578063c84993af146101ba578063d8e1214f146101cd57600080fd5b8063a4ff6c4814610166578063ae169a5014610179578063b68a0ff61461018c57600080fd5b806306547abd146100d45780630a5626db146100fd5780634d0c509e1461011357806383b4c8651461012857806389610a091461013b57806394c0734b1461015e575b600080fd5b6100e76100e2366004611880565b6101d5565b6040516100f491906118af565b60405180910390f35b610105610210565b6040519081526020016100f4565b610126610121366004611923565b610249565b005b61012661013636600461196f565b61028e565b61014e610149366004611880565b610355565b60405190151581526020016100f4565b6101056103b3565b6101266101743660046119db565b6103ca565b610126610187366004611880565b6104b1565b610105610579565b6101266101a23660046119db565b6105e8565b6101266101b53660046119fd565b6108a2565b6101056101c8366004611880565b6108e0565b61010561095c565b60008181526021602052604081205461020a906101ff90600160301b900463ffffffff1642611a55565b63ffffffff166109ca565b92915050565b6000805b602c548110156102455761022781610a5f565b6102319083611a7a565b91508061023d81611a92565b915050610214565b5090565b60005b828110156102885761027684848381811061026957610269611aab565b90506020020135836103ca565b8061028081611a92565b91505061024c565b50505050565b8281146102f75760405162461bcd60e51b815260206004820152602c60248201527f4445464f526577617264733a5f746f6b656e644964732d5f616d6f756e74732d60448201526b1a5b98dbdb9cda5cdd195b9d60a21b60648201526084015b60405180910390fd5b60005b8381101561034e5761033c85858381811061031757610317611aab565b9050602002013584848481811061033057610330611aab565b905060200201356105e8565b8061034681611a92565b9150506102fa565b5050505050565b6000818152602160205260408120546010546103899163ffffffff600160301b909104811691640100000000900416610cdb565b801561039b575061039982610cfa565b155b801561020a57506103ab826108e0565b151592915050565b6034546031546000916103c591611ac1565b905090565b816103d3610df7565b6000828152602560205260409020546001600160a01b039081169116146104355760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ee565b8261043f81610355565b61047b5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b60448201526064016102ee565b6000610486856108e0565b905060006104948286610e53565b90506104a086826105e8565b6104a9866104b1565b505050505050565b806104ba610df7565b6000828152602560205260409020546001600160a01b0390811691161461051c5760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ee565b8161052681610355565b6105625760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b60448201526064016102ee565b6105748361056f856108e0565b610e82565b505050565b600080610584610df7565b90506000610591826110d5565b90506000805b82518110156105e0576105c28382815181106105b5576105b5611aab565b6020026020010151610a5f565b6105cc9083611a7a565b9150806105d881611a92565b915050610597565b509392505050565b816105f1610df7565b6000828152602560205260409020546001600160a01b039081169116146106535760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ee565b8261065d816111fa565b6001546001600160a01b031660026000610675610df7565b905061067f61182d565b600087116106cf5760405162461bcd60e51b815260206004820152601660248201527f5a65726f207265776172647320666f7220612067656d0000000000000000000060448201526064016102ee565b60006106da896108e0565b9050808811156107215760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f756768207265776172647360701b60448201526064016102ee565b60165461072f908990610e53565b60e08301819052604083018990526107479089611ac1565b606083015260e082015161075a90611261565b826001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438360e0015160405161079991815260200190565b60405180910390a26001600160a01b0385166323b872dd85600101546001600160a01b03168660050154606086015160405160e085901b6001600160e01b03191681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561081c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108409190611ad8565b506040808301516060840151825191825260208201526001600160a01b038516917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a2610897828a856113fe565b505050505050505050565b60005b81811015610574576108ce8383838181106108c2576108c2611aab565b905060200201356104b1565b806108d881611a92565b9150506108a5565b6000816108ec816111fa565b60006108f784610a5f565b6000858152602160205260409020600701549091506109169082611a7a565b6000858152602160205260409020600101549091506109359082611ac1565b6000858152602160205260409020600301549091506109549082611ac1565b949350505050565b6000603981610969610df7565b6001600160a01b03166001600160a01b03168152602001908152602001600020600501546000603901600061099c610df7565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201546103c59190611ac1565b60105460049060009068010000000000000000900463ffffffff166109ef8184611afa565b63ffffffff16841015610a0157600392505b610a0c816003611afa565b63ffffffff16841015610a1e57600292505b610a29816002611afa565b63ffffffff16841015610a3b57600192505b610a46816001611afa565b63ffffffff16841015610a5857600092505b5050919050565b60008181526021602090815260408083208151610100808201909352815460ff80821683528695929492850192909104166002811115610aa157610aa1611899565b6002811115610ab257610ab2611899565b81526020016000820160029054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160069054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600a9054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160018201604051806101400160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250508152602001600b820160009054906101000a900460ff16151515158152602001600c820154815250509050600080601d01826000015160ff1681548110610be657610be6611aab565b90600052602060002090600602016040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015610c4f576020028201915b815481526020019060010190808311610c3b575b505050505081526020016004820154815260200160058201548152505090506000610c94826020015184602001516002811115610c8e57610c8e611899565b90611448565b90506000610cd1846040015163ffffffff1642610cb19190611ac1565b60608501516018546010548690640100000000900463ffffffff166114b2565b9695505050505050565b600042831180610cf3575081610cf18442611ac1565b115b9392505050565b60008181526021602052604081208054829190426a010000000000000000000090910463ffffffff1610610d32575060009392505050565b8054600090610d4d9062010000900463ffffffff1642611a55565b601084015490915063ffffffff90811690821611610d7057506000949350505050565b8154601d84018054600092610db29260ff6101008304811693919216908110610d9b57610d9b611aab565b906000526020600020906006020160000154611641565b83546010860154919250600091610dda91849163ffffffff620100009092048216911661168f565b905083600c015481610dec9190611ac1565b979650505050505050565b6000303303610e4d57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610e509050565b50335b90565b6000808211610e63576000610cf3565b610e6e606480611b26565b610e788385611b26565b610cf39190611b5b565b60008281526021602052604090206001546001600160a01b0316600283610ee05760405162461bcd60e51b81526020600482015260126024820152714e6f20616d6f756e7420746f20636c61696d60701b60448201526064016102ee565b610ee861182d565b8481526000610ef6876101d5565b8251909150610f2a906011836004811115610f1357610f13611899565b60058110610f2357610f23611aab565b0154610e53565b6101008301528151601654610f3f9190610e53565b60e083018190526101008301518351610f589190611ac1565b610f629190611ac1565b60208301526000610f71610df7565b9050610f808360e00151611261565b806001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438460e00151604051610fbf91815260200190565b60405180910390a26001600160a01b0385166323b872dd8560010154602086015160405160e084901b6001600160e01b03191681526001600160a01b039283166004820152918516602483015260448201526064016020604051808303816000875af1158015611033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110579190611ad8565b50855469ffffffff0000000000001916600160301b4263ffffffff1602178655825160208085015160408051938452918301526001600160a01b038316917f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a910160405180910390a26110cb8389836113fe565b5050505050505050565b6001600160a01b0381166000908152602660205260408120546060918167ffffffffffffffff81111561110a5761110a611b6f565b604051908082528060200260200182016040528015611133578160200160208202803683370190505b50905060005b828110156105e0576001600160a01b0385166000908152602a60209081526040808320848452909152902054611186816000908152602560205260409020546001600160a01b0316151590565b6111c95760405162461bcd60e51b8152602060048201526014602482015273412067656d20646f65736e27742065786973747360601b60448201526064016102ee565b808383815181106111dc576111dc611aab565b602090810291909101015250806111f281611a92565b915050611139565b6000818152602560205260409020546001600160a01b031661125e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e4964206973206e6f742076616c69640000000060448201526064016102ee565b50565b600080600101546001600160a01b031690506002816323b872dd826001015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152306024820152604481018690526064016020604051808303816000875af11580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f79190611ad8565b506040805160028082526060808301845292602083019080368337505060015482519293506001600160a01b03169183915060009061133857611338611aab565b6001600160a01b03928316602091820292909201015260005482519116908290600190811061136957611369611aab565b6001600160a01b03928316602091820292909201015260078301546004808501546040516338ed173960e01b8152928416936338ed1739936113b7938a936001938993911691429101611b85565b6000604051808303816000875af11580156113d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261034e9190810190611bf6565b6000828152602160205260408120611417602f8661169d565b611424816001018661169d565b6001600160a01b0383166000908152603983016020526040902061034e908661169d565b6000600283600281111561145e5761145e611899565b036114835761271061147283613a98611b26565b61147c9190611b5b565b905061020a565b600183600281111561149757611497611899565b036114ab57612710611472836130d4611b26565b508061020a565b6000806114be856117ca565b905060008080805b8192506064856064806114d99190611b26565b6114e4906064611b26565b6114ee9190611b5b565b6114f89190611ac1565b60646115048388611d98565b83611510606480611b26565b61151a9190611d98565b611525906064611b26565b61152f9190611b5b565b6115399190611ac1565b6115438a8d611b5b565b61154d9190611b26565b6115579190611b5b565b91508061156381611a92565b91508b90506115728389611b26565b11156114c657611583600282611ac1565b905061158f8784611b26565b9250600083158015906115a15750838c115b1561161757816115b2606480611b26565b6115bc9190611d98565b6115c68388611d98565b6115d0908b611b26565b6115da9190611b5b565b905080886115e8868f611ac1565b6115f29190611b5b565b6115fc9190611b26565b611606838d611b26565b6116109190611a7a565b9450611631565b508780611624898e611b5b565b61162e9190611b26565b94505b50929a9950505050505050505050565b6000600283600281111561165757611657611899565b036116675761147c600283611b5b565b600183600281111561167b5761167b611899565b036114ab5761271061147283611d4c611b26565b6000610954848442856117e2565b8051825483906000906116b1908490611a7a565b909155505060208101516001830180546000906116cf908490611a7a565b909155505060408101516002830180546000906116ed908490611a7a565b9091555050606081015160038301805460009061170b908490611a7a565b90915550506080810151600483018054600090611729908490611a7a565b909155505060a0810151600583018054600090611747908490611a7a565b909155505060c0810151600683018054600090611765908490611a7a565b909155505060e0810151600783018054600090611783908490611a7a565b90915550506101008101516008830180546000906117a2908490611a7a565b90915550506101208101516009830180546000906117c1908490611a7a565b90915550505050565b6000816117d8606480611b26565b61020a9190611ac1565b60008363ffffffff168363ffffffff16116117fe576000611824565b848261180a8686611a55565b6118149190611da4565b63ffffffff166118249190611b26565b95945050505050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006020828403121561189257600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60208101600583106118d157634e487b7160e01b600052602160045260246000fd5b91905290565b60008083601f8401126118e957600080fd5b50813567ffffffffffffffff81111561190157600080fd5b6020830191508360208260051b850101111561191c57600080fd5b9250929050565b60008060006040848603121561193857600080fd5b833567ffffffffffffffff81111561194f57600080fd5b61195b868287016118d7565b909790965060209590950135949350505050565b6000806000806040858703121561198557600080fd5b843567ffffffffffffffff8082111561199d57600080fd5b6119a9888389016118d7565b909650945060208701359150808211156119c257600080fd5b506119cf878288016118d7565b95989497509550505050565b600080604083850312156119ee57600080fd5b50508035926020909101359150565b60008060208385031215611a1057600080fd5b823567ffffffffffffffff811115611a2757600080fd5b611a33858286016118d7565b90969095509350505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015611a7257611a72611a3f565b039392505050565b60008219821115611a8d57611a8d611a3f565b500190565b600060018201611aa457611aa4611a3f565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600082821015611ad357611ad3611a3f565b500390565b600060208284031215611aea57600080fd5b81518015158114610cf357600080fd5b600063ffffffff80831681851681830481118215151615611b1d57611b1d611a3f565b02949350505050565b6000816000190483118215151615611b4057611b40611a3f565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611b6a57611b6a611b45565b500490565b634e487b7160e01b600052604160045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611bd55784516001600160a01b031683529383019391830191600101611bb0565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215611c0957600080fd5b825167ffffffffffffffff80821115611c2157600080fd5b818501915085601f830112611c3557600080fd5b815181811115611c4757611c47611b6f565b8060051b604051601f19603f83011681018181108582111715611c6c57611c6c611b6f565b604052918252848201925083810185019188831115611c8a57600080fd5b938501935b82851015611ca857845184529385019392850192611c8f565b98975050505050505050565b600181815b80851115611cef578160001904821115611cd557611cd5611a3f565b80851615611ce257918102915b93841c9390800290611cb9565b509250929050565b600082611d065750600161020a565b81611d135750600061020a565b8160018114611d295760028114611d3357611d4f565b600191505061020a565b60ff841115611d4457611d44611a3f565b50506001821b61020a565b5060208310610133831016604e8410600b8410161715611d72575081810a61020a565b611d7c8383611cb4565b8060001904821115611d9057611d90611a3f565b029392505050565b6000610cf38383611cf7565b600063ffffffff80841680611dbb57611dbb611b45565b9216919091049291505056fea26469706673582212201927e7242a5b36165833b2888ecc1a72b32aea2a93625be5ad0e62338c12a0fd64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063a4ff6c481161008c578063b816b65d11610066578063b816b65d14610194578063c760da04146101a7578063c84993af146101ba578063d8e1214f146101cd57600080fd5b8063a4ff6c4814610166578063ae169a5014610179578063b68a0ff61461018c57600080fd5b806306547abd146100d45780630a5626db146100fd5780634d0c509e1461011357806383b4c8651461012857806389610a091461013b57806394c0734b1461015e575b600080fd5b6100e76100e2366004611880565b6101d5565b6040516100f491906118af565b60405180910390f35b610105610210565b6040519081526020016100f4565b610126610121366004611923565b610249565b005b61012661013636600461196f565b61028e565b61014e610149366004611880565b610355565b60405190151581526020016100f4565b6101056103b3565b6101266101743660046119db565b6103ca565b610126610187366004611880565b6104b1565b610105610579565b6101266101a23660046119db565b6105e8565b6101266101b53660046119fd565b6108a2565b6101056101c8366004611880565b6108e0565b61010561095c565b60008181526021602052604081205461020a906101ff90600160301b900463ffffffff1642611a55565b63ffffffff166109ca565b92915050565b6000805b602c548110156102455761022781610a5f565b6102319083611a7a565b91508061023d81611a92565b915050610214565b5090565b60005b828110156102885761027684848381811061026957610269611aab565b90506020020135836103ca565b8061028081611a92565b91505061024c565b50505050565b8281146102f75760405162461bcd60e51b815260206004820152602c60248201527f4445464f526577617264733a5f746f6b656e644964732d5f616d6f756e74732d60448201526b1a5b98dbdb9cda5cdd195b9d60a21b60648201526084015b60405180910390fd5b60005b8381101561034e5761033c85858381811061031757610317611aab565b9050602002013584848481811061033057610330611aab565b905060200201356105e8565b8061034681611a92565b9150506102fa565b5050505050565b6000818152602160205260408120546010546103899163ffffffff600160301b909104811691640100000000900416610cdb565b801561039b575061039982610cfa565b155b801561020a57506103ab826108e0565b151592915050565b6034546031546000916103c591611ac1565b905090565b816103d3610df7565b6000828152602560205260409020546001600160a01b039081169116146104355760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ee565b8261043f81610355565b61047b5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b60448201526064016102ee565b6000610486856108e0565b905060006104948286610e53565b90506104a086826105e8565b6104a9866104b1565b505050505050565b806104ba610df7565b6000828152602560205260409020546001600160a01b0390811691161461051c5760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ee565b8161052681610355565b6105625760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b60448201526064016102ee565b6105748361056f856108e0565b610e82565b505050565b600080610584610df7565b90506000610591826110d5565b90506000805b82518110156105e0576105c28382815181106105b5576105b5611aab565b6020026020010151610a5f565b6105cc9083611a7a565b9150806105d881611a92565b915050610597565b509392505050565b816105f1610df7565b6000828152602560205260409020546001600160a01b039081169116146106535760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b60448201526064016102ee565b8261065d816111fa565b6001546001600160a01b031660026000610675610df7565b905061067f61182d565b600087116106cf5760405162461bcd60e51b815260206004820152601660248201527f5a65726f207265776172647320666f7220612067656d0000000000000000000060448201526064016102ee565b60006106da896108e0565b9050808811156107215760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f756768207265776172647360701b60448201526064016102ee565b60165461072f908990610e53565b60e08301819052604083018990526107479089611ac1565b606083015260e082015161075a90611261565b826001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438360e0015160405161079991815260200190565b60405180910390a26001600160a01b0385166323b872dd85600101546001600160a01b03168660050154606086015160405160e085901b6001600160e01b03191681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561081c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108409190611ad8565b506040808301516060840151825191825260208201526001600160a01b038516917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a2610897828a856113fe565b505050505050505050565b60005b81811015610574576108ce8383838181106108c2576108c2611aab565b905060200201356104b1565b806108d881611a92565b9150506108a5565b6000816108ec816111fa565b60006108f784610a5f565b6000858152602160205260409020600701549091506109169082611a7a565b6000858152602160205260409020600101549091506109359082611ac1565b6000858152602160205260409020600301549091506109549082611ac1565b949350505050565b6000603981610969610df7565b6001600160a01b03166001600160a01b03168152602001908152602001600020600501546000603901600061099c610df7565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201546103c59190611ac1565b60105460049060009068010000000000000000900463ffffffff166109ef8184611afa565b63ffffffff16841015610a0157600392505b610a0c816003611afa565b63ffffffff16841015610a1e57600292505b610a29816002611afa565b63ffffffff16841015610a3b57600192505b610a46816001611afa565b63ffffffff16841015610a5857600092505b5050919050565b60008181526021602090815260408083208151610100808201909352815460ff80821683528695929492850192909104166002811115610aa157610aa1611899565b6002811115610ab257610ab2611899565b81526020016000820160029054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160069054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600a9054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160018201604051806101400160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250508152602001600b820160009054906101000a900460ff16151515158152602001600c820154815250509050600080601d01826000015160ff1681548110610be657610be6611aab565b90600052602060002090600602016040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015610c4f576020028201915b815481526020019060010190808311610c3b575b505050505081526020016004820154815260200160058201548152505090506000610c94826020015184602001516002811115610c8e57610c8e611899565b90611448565b90506000610cd1846040015163ffffffff1642610cb19190611ac1565b60608501516018546010548690640100000000900463ffffffff166114b2565b9695505050505050565b600042831180610cf3575081610cf18442611ac1565b115b9392505050565b60008181526021602052604081208054829190426a010000000000000000000090910463ffffffff1610610d32575060009392505050565b8054600090610d4d9062010000900463ffffffff1642611a55565b601084015490915063ffffffff90811690821611610d7057506000949350505050565b8154601d84018054600092610db29260ff6101008304811693919216908110610d9b57610d9b611aab565b906000526020600020906006020160000154611641565b83546010860154919250600091610dda91849163ffffffff620100009092048216911661168f565b905083600c015481610dec9190611ac1565b979650505050505050565b6000303303610e4d57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610e509050565b50335b90565b6000808211610e63576000610cf3565b610e6e606480611b26565b610e788385611b26565b610cf39190611b5b565b60008281526021602052604090206001546001600160a01b0316600283610ee05760405162461bcd60e51b81526020600482015260126024820152714e6f20616d6f756e7420746f20636c61696d60701b60448201526064016102ee565b610ee861182d565b8481526000610ef6876101d5565b8251909150610f2a906011836004811115610f1357610f13611899565b60058110610f2357610f23611aab565b0154610e53565b6101008301528151601654610f3f9190610e53565b60e083018190526101008301518351610f589190611ac1565b610f629190611ac1565b60208301526000610f71610df7565b9050610f808360e00151611261565b806001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438460e00151604051610fbf91815260200190565b60405180910390a26001600160a01b0385166323b872dd8560010154602086015160405160e084901b6001600160e01b03191681526001600160a01b039283166004820152918516602483015260448201526064016020604051808303816000875af1158015611033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110579190611ad8565b50855469ffffffff0000000000001916600160301b4263ffffffff1602178655825160208085015160408051938452918301526001600160a01b038316917f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a910160405180910390a26110cb8389836113fe565b5050505050505050565b6001600160a01b0381166000908152602660205260408120546060918167ffffffffffffffff81111561110a5761110a611b6f565b604051908082528060200260200182016040528015611133578160200160208202803683370190505b50905060005b828110156105e0576001600160a01b0385166000908152602a60209081526040808320848452909152902054611186816000908152602560205260409020546001600160a01b0316151590565b6111c95760405162461bcd60e51b8152602060048201526014602482015273412067656d20646f65736e27742065786973747360601b60448201526064016102ee565b808383815181106111dc576111dc611aab565b602090810291909101015250806111f281611a92565b915050611139565b6000818152602560205260409020546001600160a01b031661125e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e4964206973206e6f742076616c69640000000060448201526064016102ee565b50565b600080600101546001600160a01b031690506002816323b872dd826001015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152306024820152604481018690526064016020604051808303816000875af11580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f79190611ad8565b506040805160028082526060808301845292602083019080368337505060015482519293506001600160a01b03169183915060009061133857611338611aab565b6001600160a01b03928316602091820292909201015260005482519116908290600190811061136957611369611aab565b6001600160a01b03928316602091820292909201015260078301546004808501546040516338ed173960e01b8152928416936338ed1739936113b7938a936001938993911691429101611b85565b6000604051808303816000875af11580156113d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261034e9190810190611bf6565b6000828152602160205260408120611417602f8661169d565b611424816001018661169d565b6001600160a01b0383166000908152603983016020526040902061034e908661169d565b6000600283600281111561145e5761145e611899565b036114835761271061147283613a98611b26565b61147c9190611b5b565b905061020a565b600183600281111561149757611497611899565b036114ab57612710611472836130d4611b26565b508061020a565b6000806114be856117ca565b905060008080805b8192506064856064806114d99190611b26565b6114e4906064611b26565b6114ee9190611b5b565b6114f89190611ac1565b60646115048388611d98565b83611510606480611b26565b61151a9190611d98565b611525906064611b26565b61152f9190611b5b565b6115399190611ac1565b6115438a8d611b5b565b61154d9190611b26565b6115579190611b5b565b91508061156381611a92565b91508b90506115728389611b26565b11156114c657611583600282611ac1565b905061158f8784611b26565b9250600083158015906115a15750838c115b1561161757816115b2606480611b26565b6115bc9190611d98565b6115c68388611d98565b6115d0908b611b26565b6115da9190611b5b565b905080886115e8868f611ac1565b6115f29190611b5b565b6115fc9190611b26565b611606838d611b26565b6116109190611a7a565b9450611631565b508780611624898e611b5b565b61162e9190611b26565b94505b50929a9950505050505050505050565b6000600283600281111561165757611657611899565b036116675761147c600283611b5b565b600183600281111561167b5761167b611899565b036114ab5761271061147283611d4c611b26565b6000610954848442856117e2565b8051825483906000906116b1908490611a7a565b909155505060208101516001830180546000906116cf908490611a7a565b909155505060408101516002830180546000906116ed908490611a7a565b9091555050606081015160038301805460009061170b908490611a7a565b90915550506080810151600483018054600090611729908490611a7a565b909155505060a0810151600583018054600090611747908490611a7a565b909155505060c0810151600683018054600090611765908490611a7a565b909155505060e0810151600783018054600090611783908490611a7a565b90915550506101008101516008830180546000906117a2908490611a7a565b90915550506101208101516009830180546000906117c1908490611a7a565b90915550505050565b6000816117d8606480611b26565b61020a9190611ac1565b60008363ffffffff168363ffffffff16116117fe576000611824565b848261180a8686611a55565b6118149190611da4565b63ffffffff166118249190611b26565b95945050505050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006020828403121561189257600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60208101600583106118d157634e487b7160e01b600052602160045260246000fd5b91905290565b60008083601f8401126118e957600080fd5b50813567ffffffffffffffff81111561190157600080fd5b6020830191508360208260051b850101111561191c57600080fd5b9250929050565b60008060006040848603121561193857600080fd5b833567ffffffffffffffff81111561194f57600080fd5b61195b868287016118d7565b909790965060209590950135949350505050565b6000806000806040858703121561198557600080fd5b843567ffffffffffffffff8082111561199d57600080fd5b6119a9888389016118d7565b909650945060208701359150808211156119c257600080fd5b506119cf878288016118d7565b95989497509550505050565b600080604083850312156119ee57600080fd5b50508035926020909101359150565b60008060208385031215611a1057600080fd5b823567ffffffffffffffff811115611a2757600080fd5b611a33858286016118d7565b90969095509350505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015611a7257611a72611a3f565b039392505050565b60008219821115611a8d57611a8d611a3f565b500190565b600060018201611aa457611aa4611a3f565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600082821015611ad357611ad3611a3f565b500390565b600060208284031215611aea57600080fd5b81518015158114610cf357600080fd5b600063ffffffff80831681851681830481118215151615611b1d57611b1d611a3f565b02949350505050565b6000816000190483118215151615611b4057611b40611a3f565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611b6a57611b6a611b45565b500490565b634e487b7160e01b600052604160045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611bd55784516001600160a01b031683529383019391830191600101611bb0565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215611c0957600080fd5b825167ffffffffffffffff80821115611c2157600080fd5b818501915085601f830112611c3557600080fd5b815181811115611c4757611c47611b6f565b8060051b604051601f19603f83011681018181108582111715611c6c57611c6c611b6f565b604052918252848201925083810185019188831115611c8a57600080fd5b938501935b82851015611ca857845184529385019392850192611c8f565b98975050505050505050565b600181815b80851115611cef578160001904821115611cd557611cd5611a3f565b80851615611ce257918102915b93841c9390800290611cb9565b509250929050565b600082611d065750600161020a565b81611d135750600061020a565b8160018114611d295760028114611d3357611d4f565b600191505061020a565b60ff841115611d4457611d44611a3f565b50506001821b61020a565b5060208310610133831016604e8410600b8410161715611d72575081810a61020a565b611d7c8383611cb4565b8060001904821115611d9057611d90611a3f565b029392505050565b6000610cf38383611cf7565b600063ffffffff80841680611dbb57611dbb611b45565b9216919091049291505056fea26469706673582212201927e7242a5b36165833b2888ecc1a72b32aea2a93625be5ad0e62338c12a0fd64736f6c634300080f0033",
  "devdoc": {
    "author": "Decentralized Foundation Team",
    "kind": "dev",
    "methods": {
      "getCumulatedReward()": {
        "returns": {
          "_0": "amount in DEFO (in wei precision)"
        }
      },
      "getCumulatedRewardAllUsers()": {
        "returns": {
          "allForAllTotalReward_": "amount in DEFO (in wei precision)"
        }
      },
      "getRewardAmount(uint256)": {
        "params": {
          "_tokenId": "unique NFT gem id"
        },
        "returns": {
          "_0": "pre-tax unclaimed reward in DEFO,- before deducting tax or charity, ready to be claimed or put to vault"
        }
      },
      "getStakedGross()": {
        "returns": {
          "_0": "total amount in DEFO (in wei precision)"
        }
      },
      "getStakedGrossAllUsers()": {
        "returns": {
          "_0": "total amount in DEFO (in wei precision)"
        }
      },
      "getTaxTier(uint256)": {
        "params": {
          "_tokenId": "unique NFT gem id"
        },
        "returns": {
          "_0": "current tax tier of the gem might be configurable, now it's a number in the range starting from 0 when 0 means nothing is payed out since there's no rewards in the first week, 4 is no tax, 1,2,3 - % in between (currently 30,30,15)"
        }
      },
      "isClaimable(uint256)": {
        "params": {
          "_tokenId": "unique NFT gem id"
        },
        "returns": {
          "_0": "true or false, checks for the pending maintenance and time passed since last claim"
        }
      },
      "stakeAndClaim(uint256,uint256)": {
        "params": {
          "_percent": "percent of what to put into the vault, as usual uses PRECISION_MULTIPLIER (which is 100 by defualt, e.g. 500 for 5%)",
          "_tokenId": "unique NFT gem id"
        }
      }
    },
    "title": "ERC721Facet EIP-2535 Diamond Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCumulatedReward()": {
        "notice": "amount of pre-taxed total reward earned by the sender for all time"
      },
      "getCumulatedRewardAllUsers()": {
        "notice": "amount of pre-taxed total reward earned by all the users for all time"
      },
      "getRewardAmount(uint256)": {
        "notice": "reward earned by the sender to the moment ready to be claimed or put to vault"
      },
      "getStakedGross()": {
        "notice": "amount of pre-taxed reward that are currently in the vault for the sender, so if put and then taken from the vault, it's not the return of the function"
      },
      "getStakedGrossAllUsers()": {
        "notice": "amount of pre-taxed reward that are currently in the vault for all users, it's not equal to the after-tax amount in the vault"
      },
      "getTaxTier(uint256)": {
        "notice": "gets tax tier for a gem"
      },
      "isClaimable(uint256)": {
        "notice": "checks if rewards can be claimed or not"
      },
      "stakeAndClaim(uint256,uint256)": {
        "notice": "This is used for the Vault Strategy, it puts the percent of all rewards to the vault and claims the rest"
      },
      "stakeReward(uint256,uint256)": {
        "notice": "todo decide whether move this to the vault facet or not - (to keep all staking/unstaking in one place), or to leave it here (this is a facet working with rewards  which can be either claimed or staked)"
      }
    },
    "notice": "The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4283,
        "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4540_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)8_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[8]",
        "numberOfBytes": "256"
      },
      "t_array(t_array(t_uint256)3_storage)2_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][2]",
        "numberOfBytes": "192"
      },
      "t_array(t_contract(IERC20)737)2_storage": {
        "base": "t_contract(IERC20)737",
        "encoding": "inplace",
        "label": "contract IERC20[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(GemTypeConfig)4430_storage)dyn_storage": {
        "base": "t_struct(GemTypeConfig)4430_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GemTypeMintWindow)4435_storage)dyn_storage": {
        "base": "t_struct(GemTypeMintWindow)4435_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeMintWindow[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)737": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Booster)4457": {
        "encoding": "inplace",
        "label": "enum Booster",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4457,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => mapping(enum Booster => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_mapping(t_enum(Booster)4457,t_uint256))"
      },
      "t_mapping(t_address,t_struct(Fi)4478_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Fi)",
        "numberOfBytes": "32",
        "value": "t_struct(Fi)4478_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Booster)4457,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Booster)4457",
        "label": "mapping(enum Booster => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Gem)4497_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gem)",
        "numberOfBytes": "32",
        "value": "t_struct(Gem)4497_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_mapping(t_enum(Booster)4457,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(enum Booster => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Booster)4457,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4540_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4500,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "config",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ProtocolConfig)4417_storage"
          },
          {
            "astId": 4504,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gemTypes",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_struct(GemTypeConfig)4430_storage)dyn_storage"
          },
          {
            "astId": 4508,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gemTypesMintWindows",
            "offset": 0,
            "slot": "30",
            "type": "t_array(t_struct(GemTypeMintWindow)4435_storage)dyn_storage"
          },
          {
            "astId": 4511,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "defoTokenLimitWindow",
            "offset": 0,
            "slot": "31",
            "type": "t_struct(DEFOTokenLimitWindow)4444_storage"
          },
          {
            "astId": 4516,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gems",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_uint256,t_struct(Gem)4497_storage)"
          },
          {
            "astId": 4519,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "nft",
            "offset": 0,
            "slot": "34",
            "type": "t_struct(ERC721Storage)4351_storage"
          },
          {
            "astId": 4522,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "total",
            "offset": 0,
            "slot": "47",
            "type": "t_struct(Fi)4478_storage"
          },
          {
            "astId": 4527,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "usersFi",
            "offset": 0,
            "slot": "57",
            "type": "t_mapping(t_address,t_struct(Fi)4478_storage)"
          },
          {
            "astId": 4536,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "usersNextGemBooster",
            "offset": 0,
            "slot": "58",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4457,t_uint256)))"
          },
          {
            "astId": 4539,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "defoTokenLimitPerRewards",
            "offset": 0,
            "slot": "59",
            "type": "t_struct(DEFOTokenLimitPerRewards)4453_storage"
          }
        ],
        "numberOfBytes": "1952"
      },
      "t_struct(Counter)2737_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2736,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DEFOTokenLimitPerRewards)4453_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitPerRewards",
        "members": [
          {
            "astId": 4448,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4452,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "timeOfWindowStart",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DEFOTokenLimitWindow)4444_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitWindow",
        "members": [
          {
            "astId": 4439,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4443,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "timeOfLastSale",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefoTokenLimitConfig)4376_storage": {
        "encoding": "inplace",
        "label": "struct DefoTokenLimitConfig",
        "members": [
          {
            "astId": 4371,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "saleLimitPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4373,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "saleLimitAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4375,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "limitByReward",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ERC721Storage)4351_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage",
        "members": [
          {
            "astId": 4306,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4308,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4311,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokenIdTracker",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Counter)2737_storage"
          },
          {
            "astId": 4315,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "owners",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4319,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "balances",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4323,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokenApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4329,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "operatorApprovals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 4331,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4337,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "ownedTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 4341,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "ownedTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4344,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "allTokens",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4348,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "allTokensIndex",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4350,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "init",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Fi)4478_storage": {
        "encoding": "inplace",
        "label": "struct Fi",
        "members": [
          {
            "astId": 4459,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "claimedGross",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4461,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "claimedNet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4463,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "stakedGross",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4465,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "stakedNet",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4467,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "unStakedGross",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4469,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "unStakedGrossUp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4471,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "unStakedNet",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4473,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "donated",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4475,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "claimTaxPaid",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4477,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "vaultTaxPaid",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Gem)4497_storage": {
        "encoding": "inplace",
        "label": "struct Gem",
        "members": [
          {
            "astId": 4480,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gemTypeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4483,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "booster",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Booster)4457"
          },
          {
            "astId": 4485,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintTime",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4487,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "lastRewardWithdrawalTime",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4489,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "lastMaintenanceTime",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4492,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "fi",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Fi)4478_storage"
          },
          {
            "astId": 4494,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "presold",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 4496,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maintenanceFeePaid",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(GemTypeConfig)4430_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeConfig",
        "members": [
          {
            "astId": 4419,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maintenanceFeeDai",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4421,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "rewardAmountDefo",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4425,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 4427,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taperRewardsThresholdDefo",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4429,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maxMintsPerLimitWindow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(GemTypeMintWindow)4435_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeMintWindow",
        "members": [
          {
            "astId": 4432,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4434,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "endOfMintLimitWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProtocolConfig)4417_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolConfig",
        "members": [
          {
            "astId": 4381,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "paymentTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20)737)2_storage"
          },
          {
            "astId": 4385,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "wallets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)8_storage"
          },
          {
            "astId": 4391,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "incomeDistributionOnMint",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_array(t_uint256)3_storage)2_storage"
          },
          {
            "astId": 4393,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maintenancePeriod",
            "offset": 0,
            "slot": "16",
            "type": "t_uint32"
          },
          {
            "astId": 4395,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "rewardPeriod",
            "offset": 4,
            "slot": "16",
            "type": "t_uint32"
          },
          {
            "astId": 4397,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taxScaleSinceLastClaimPeriod",
            "offset": 8,
            "slot": "16",
            "type": "t_uint32"
          },
          {
            "astId": 4401,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taxRates",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_uint256)5_storage"
          },
          {
            "astId": 4403,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "charityContributionRate",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 4405,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "vaultWithdrawalTaxRate",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 4407,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taperRate",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256"
          },
          {
            "astId": 4409,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintLock",
            "offset": 0,
            "slot": "25",
            "type": "t_bool"
          },
          {
            "astId": 4411,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "transferLock",
            "offset": 1,
            "slot": "25",
            "type": "t_bool"
          },
          {
            "astId": 4413,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintLimitWindow",
            "offset": 2,
            "slot": "25",
            "type": "t_uint32"
          },
          {
            "astId": 4416,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "defoTokenLimitConfig",
            "offset": 0,
            "slot": "26",
            "type": "t_struct(DefoTokenLimitConfig)4376_storage"
          }
        ],
        "numberOfBytes": "928"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}