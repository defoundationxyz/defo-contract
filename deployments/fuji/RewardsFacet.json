{
  "address": "0xeF364A61e9B7020BBCE3aaD31D8DbBE334e492b2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGross",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountNet",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGross",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountNet",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenids",
          "type": "uint256[]"
        }
      ],
      "name": "batchClaimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "batchStakeAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchStakeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumulatedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumulatedRewardAllUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allForAllTotalReward_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyP2DaiValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyP2RotValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getP2DaiValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getP2RotValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedGross",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedGrossAllUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTaxTier",
      "outputs": [
        {
          "internalType": "enum TaxTiers",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isClaimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "p2ClaimDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "p2PutIntoVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "stakeAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x128c792be6f42cca2980fe9ad89e9f478bb0e0818b6a951c89f9bf9f68042605",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x05309918A451156C2cE41f3C8dF89672ce83e944",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2230582",
    "logsBloom": "0x
    "blockHash": "0x4a62675c920757ace8f7419debc04815041a1c273fbfeba124fade19711fd7ef",
    "transactionHash": "0x128c792be6f42cca2980fe9ad89e9f478bb0e0818b6a951c89f9bf9f68042605",
    "logs": [],
    "blockNumber": 18651879,
    "cumulativeGasUsed": "2230582",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 17,
  "solcInputHash": "ab03a7914713068f281d5d00d9f2729a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGross\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNet\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGross\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNet\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenids\",\"type\":\"uint256[]\"}],\"name\":\"batchClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"batchStakeAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulatedRewardAllUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allForAllTotalReward_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyP2DaiValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyP2RotValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getP2DaiValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getP2RotValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedGross\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedGrossAllUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTaxTier\",\"outputs\":[{\"internalType\":\"enum TaxTiers\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p2ClaimDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p2PutIntoVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"stakeAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Decentralized Foundation Team\",\"kind\":\"dev\",\"methods\":{\"getCumulatedReward()\":{\"returns\":{\"_0\":\"amount in DEFO (in wei precision)\"}},\"getCumulatedRewardAllUsers()\":{\"returns\":{\"allForAllTotalReward_\":\"amount in DEFO (in wei precision)\"}},\"getRewardAmount(uint256)\":{\"params\":{\"_tokenId\":\"unique NFT gem id\"},\"returns\":{\"_0\":\"pre-tax unclaimed reward in DEFO,- before deducting tax or charity, ready to be claimed or put to vault\"}},\"getStakedGross()\":{\"returns\":{\"_0\":\"total amount in DEFO (in wei precision)\"}},\"getStakedGrossAllUsers()\":{\"returns\":{\"_0\":\"total amount in DEFO (in wei precision)\"}},\"getTaxTier(uint256)\":{\"params\":{\"_tokenId\":\"unique NFT gem id\"},\"returns\":{\"_0\":\"current tax tier of the gem might be configurable, now it's a number in the range starting from 0 when 0 means nothing is payed out since there's no rewards in the first week, 4 is no tax, 1,2,3 - % in between (currently 30,30,15)\"}},\"isClaimable(uint256)\":{\"params\":{\"_tokenId\":\"unique NFT gem id\"},\"returns\":{\"_0\":\"true or false, checks for the pending maintenance and time passed since last claim\"}},\"stakeAndClaim(uint256,uint256)\":{\"params\":{\"_percent\":\"percent of what to put into the vault, as usual uses PRECISION_MULTIPLIER (which is 100 by defualt, e.g. 500 for 5%)\",\"_tokenId\":\"unique NFT gem id\"}}},\"title\":\"ERC721Facet EIP-2535 Diamond Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCumulatedReward()\":{\"notice\":\"amount of pre-taxed total reward earned by the sender for all time\"},\"getCumulatedRewardAllUsers()\":{\"notice\":\"amount of pre-taxed total reward earned by all the users for all time\"},\"getRewardAmount(uint256)\":{\"notice\":\"reward earned by the sender to the moment ready to be claimed or put to vault\"},\"getStakedGross()\":{\"notice\":\"amount of pre-taxed reward that are currently in the vault for the sender, so if put and then taken from the vault, it's not the return of the function\"},\"getStakedGrossAllUsers()\":{\"notice\":\"amount of pre-taxed reward that are currently in the vault for all users, it's not equal to the after-tax amount in the vault\"},\"getTaxTier(uint256)\":{\"notice\":\"gets tax tier for a gem\"},\"isClaimable(uint256)\":{\"notice\":\"checks if rewards can be claimed or not\"},\"stakeAndClaim(uint256,uint256)\":{\"notice\":\"This is used for the Vault Strategy, it puts the percent of all rewards to the vault and claims the rest\"},\"stakeReward(uint256,uint256)\":{\"notice\":\"todo decide whether move this to the vault facet or not - (to keep all staking/unstaking in one place), or to leave it here (this is a facet working with rewards  which can be either claimed or staked)\"}},\"notice\":\"The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/RewardsFacet.sol\":\"RewardsFacet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/base-facet/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n/**\\n * @title  BaseFacet\\n * @author Decentralized Foundation Team\\n * @notice BaseFacet is a base contract all facets to inherit, includes cross-facet utils and  common reusable functions for DEFO Diamond\\n */\\ncontract BaseFacet is Storage {\\n\\n    /* ====================== Modifiers ====================== */\\n\\n    modifier exists(uint256 _tokenId) {\\n        _requireExists(_tokenId);\\n        _;\\n    }\\n\\n    modifier onlyGemHolder(uint256 _tokenId) {\\n        require(s.nft.owners[_tokenId] == _msgSender(), \\\"You don't own this gem\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n    modifier nonZeroAddress(address _owner) {\\n        require(_owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        _;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _msgSender() internal override view returns (address sender_) {\\n        if (Context._msgSender() == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function _getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function _requireExists(uint256 _tokenId) internal view {\\n        require(_exists(_tokenId), \\\"ERC721: tokenId is not valid\\\");\\n    }\\n\\n    function _exists(uint256 _tokenId) internal view returns (bool) {\\n        return (s.nft.owners[_tokenId] != address(0));\\n    }\\n\\n    ///todo ensure passing memory array here to the public functions is pretty optimal\\n    function _getGemIds(address _user) internal view returns (uint256[] memory) {\\n        uint256 numberOfGems = s.nft.balances[_user];\\n        uint256[] memory gemIds = new uint256[](numberOfGems);\\n        for (uint256 i = 0; i < numberOfGems; i++) {\\n            uint256 gemId = s.nft.ownedTokens[_user][i];\\n            require(_exists(gemId), \\\"A gem doesn't exists\\\");\\n            gemIds[i] = gemId;\\n        }\\n        return gemIds;\\n    }\\n\\n    function _getAllUsers() internal view returns (address[] memory users_) {\\n        users_ = new address[](s.nft.allTokens.length);\\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\\n            users_[tokenId] = s.nft.owners[tokenId];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5ee18d83372dec082d66a9c61a88c6b5c034a741118da8be0524f9f1ed4f4b13\",\"license\":\"GPL-3.0\"},\"contracts/base-facet/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {AppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0x66f07eea1ae3a0fbf40fbf070d67bed29b4a0a2dfbb689f58292d28b5065418a\",\"license\":\"GPL-3.0\"},\"contracts/data-types/IDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n/**\\n*   @dev The only source for all the data structures used in the protocol storage\\n*   @dev This includes general config, gem type config, and mutable data\\n*/\\n\\n/// @dev number of payment tokens to enumerate the error, initially it's Defo and Dai,\\n/// @dev see PaymentTokens enum\\nuint256 constant PAYMENT_TOKENS = 2;\\n\\n/// @dev number of income recievers on yield gem mint\\nuint256 constant PAYMENT_RECEIVERS = 3;\\n\\n/// @dev total wallets on the protocol, see Wallets enum\\nuint256 constant WALLETS = 7;\\n\\n/// @dev total number of supported tax tiers\\nuint256 constant TAX_TIERS = 5;\\n\\n/**\\n*   @notice a struct for data compliance with erc721 standard\\n*   @param name Token name\\n*   @param symbol Token symbol\\n*   @param owners Mapping from token ID to owner address\\n*   @param balances Mapping owner address to token count\\n*   @param tokenApprovals Mapping from token ID to approved address\\n*   @param operatorApprovals Mapping from owner to operator approvals\\n*   @param ownedTokens Mapping from owner to list of owned token IDs\\n*   @param ownedTokensIndex Mapping from token ID to index of the owner tokens list\\n*   @param allTokens Array with all token ids, used for enumeration\\n*   @param allTokensIndex Mapping from token id to position in the allTokens array\\n*/\\n    struct ERC721Storage {\\n        string name;\\n        string symbol;\\n        Counters.Counter tokenIdTracker;\\n        mapping(uint256 => address) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n        string baseURI;\\n        mapping(address => mapping(uint256 => uint256)) ownedTokens;\\n        mapping(uint256 => uint256) ownedTokensIndex;\\n        uint256[] allTokens;\\n        mapping(uint256 => uint256) allTokensIndex;\\n        bool init;\\n    }\\n\\n\\n/// @notice token enum to index arrays of rates and addresses, the convention is that Dai is at place 0, Defo is at 1\\n/// @dev the order is extremely important once deployed\\n    enum PaymentTokens {\\n        Dai,\\n        Defo\\n    }\\n\\n/// @notice protocol wallets for easy enumeration,\\n/// @dev the order is extremely important once deployed, see configuration scripts\\n    enum Wallets {\\n        Treasury,\\n        RewardPool,\\n        LiquidityPair,\\n        Stabilizer,\\n        Charity,\\n        Vault,\\n        RedeemContract\\n    }\\n\\n\\n/// @notice these tiers correspond to the configurable percentage from the diamond storage\\n    enum TaxTiers {\\n        Tier0NoPayment,\\n        Tier1HugeTax,\\n        Tier2MediumTax,\\n        Tier3SmallTax,\\n        Tier4NoTax\\n    }\\n\\n/**\\n * @notice DefoTokenLimitConfig DEFO ERC20 Token transfer limiter, this is for the 1000 DEFO per 24h sale limitation, can be changes with setTransferLimit\\n * @param saleLimitPeriod initially 1 day\\n * @param saleLimitAmount initially 1000 tokens\\n*/\\n    struct DefoTokenLimitConfig {\\n        uint256 saleLimitPeriod;\\n        uint256 saleLimitAmount;\\n        bool limitByReward;\\n    }\\n\\n/**\\n * @notice Main Protocol Configuration structure\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set, including no minting\\n     * @param incomeDistributionOnMint distribution of the payment among tokens in percent rates, all values use percentage multiplier (see percent helper), here addresses are from the Addresses\\n     * @param maintenancePeriod a period in seconds for maintenance fee accrual, initially one month\\n     * @param rewardPeriod a period in seconds for generating yield gem rewards, initially one week\\n     * @param mintCountResetPeriod a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs.\\n     * @param taxScaleSinceLastClaimPeriod a period in seconds for a tax scale to work out, initially one week\\n     * @param taxRates tax rates in percent (with percent multiplier, see percent helper contract), initially 30%, 30%, 15%, 0\\n     * @param charityContributionRate charity rate (w multiplier as all percent values in the project), initially 5%\\n     * @param vaultWithdrawalRate fee paid to withdraw amount from the vault back to the earned rewards, initially 10%\\n     * @param taperRate taper rate, initially 20%\\n     * @param mintLock no mint for all gems, no minting if set\\n     * @param transferLock no transfer if set\\n     * @param mintLimitWindow a period in seconds to wait until last mint to reset mint count for a gem type, initially 12 hrs, see GemTypeConfig.maxMintsPerLimitWindow\\n     */\\n\\n    struct ProtocolConfig {\\n        IERC20[PAYMENT_TOKENS] paymentTokens;\\n        address[WALLETS] wallets;\\n        uint256[PAYMENT_RECEIVERS][PAYMENT_TOKENS] incomeDistributionOnMint;\\n        // time periods\\n        uint32 maintenancePeriod;\\n        uint32 rewardPeriod;\\n        uint32 taxScaleSinceLastClaimPeriod;\\n        // taxes and contributions\\n        uint256[TAX_TIERS] taxRates;\\n        uint256 charityContributionRate;\\n        uint256 vaultWithdrawalTaxRate;\\n        uint256 taperRate;\\n        // locks\\n        bool mintLock;\\n        bool transferLock;\\n        // mint limit period for coutner reset\\n        uint32 mintLimitWindow;\\n        DefoTokenLimitConfig defoTokenLimitConfig;\\n    }\\n\\n/**\\n * @notice A struct containing configuration details for gemType\\n     * @param maintenanceFee Maintenance fee in Dai for the node type, amount in wei per month\\n     * @param rewardAmountDefo Reward in DEFO for the node type, amount in wei per week\\n     * @param price Price in DEFO and DAI (in wei), respectively, according to the PaymentTokens enum\\n     * @param taperRewardsThresholdDefo Taper threshold, in wei, decreasing rate every given amount of rewards in DEFO\\n     * @param maxMintsPerLimitWindow number of gems, mint limit for a node type, see ProtocolConfig.mintLimitWindow\\n     */\\n    struct GemTypeConfig {\\n        uint256 maintenanceFeeDai;\\n        uint256 rewardAmountDefo;\\n        uint256[PAYMENT_TOKENS] price;\\n        uint256 taperRewardsThresholdDefo;\\n        uint256 maxMintsPerLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct containing current mutable status for gemType\\n     * @param mintCount counter incrementing by one on every mint, during       mintCountResetPeriod; after mintCountResetPeriod with no mints, reset to 0\\n     * @param endOfMintLimitWindow a moment to reset the mintCount counter to zero, set the new endOfMintLimitWindow and start over\\n     */\\n    struct GemTypeMintWindow {\\n        uint256 mintCount;\\n        uint32 endOfMintLimitWindow;\\n    }\\n\\n/**\\n * @notice A struct describing current DEFO Token limiter input\\n * @param tokensSold DEFO tokens sold per limit window, \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfLastSale time of last sale\\n     */\\n    struct DEFOTokenLimitWindow {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfLastSale;\\n    }\\n\\n/**\\n * @notice A struct describing DEFO Token limit per weekly rewards\\n * @param tokensSold DEFO tokens sold per reward period window starting from the first sale \\\"sold\\\" = \\\"transferred to liquidity pair except the mint\\\"\\n * @param timeOfWindowStart time of first sale in the window\\n     */\\n    struct DEFOTokenLimitPerRewards {\\n        mapping(address => uint256) tokensSold;\\n        mapping(address => uint256) timeOfWindowStart;\\n    }\\n\\n    enum Booster {\\n        None,\\n        Delta,\\n        Omega\\n    }\\n\\n/**\\n * @notice A struct describing financial state, provides the complete state for user, gem, or protocol total.\\n * @notice It gives the current exact balance of the Vault, Rewards, and Charity.\\n * @param claimedGross rewards amount previously claimed for all time, gross amount - before tax and charity\\n * @param claimedNet rewards claimed and to user, net amount after tax and charity\\n * @param stakedGross amount removed from rewards to stake, charity not yet deducted\\n * @param stakedNet amount put to the vault - charity has been deducted\\n * @param unStakedGross  amount removed from the vault, pre withdraw tax and charity\\n * @param unStakedGrossUpped  amount removed from the vault gross-upped with charity to equal to the stakedGross amount\\n * @param unStakedNet  amount returned to the earned rewards, post withdraw tax and charity\\n * @param donated sent to charity\\n * @param claimTaxPaid claim tax deducted - 30%, 15%, 15%\\n * @param vaultTaxPaid vault withdrawal tax deducted\\n     */\\n    struct Fi {\\n        uint256 claimedGross;\\n        uint256 claimedNet;\\n        uint256 stakedGross;\\n        uint256 stakedNet;\\n        uint256 unStakedGross;\\n        uint256 unStakedGrossUp;\\n        uint256 unStakedNet;\\n        uint256 donated;\\n        uint256 claimTaxPaid;\\n        uint256 vaultTaxPaid;\\n    }\\n\\n/**\\n * @notice current state of a gem, a gem is an instance with consistent yield and fee rates specified by the pair (gemType, booster)\\n * @param gemType node type, initially it's  0 -> Ruby , 1 -> Sapphire, 2 -> Diamond, and boosters\\n * @param booster node Booster 0 -> None , 1 -> Delta , 2 -> Omega\\n * @param mintTime timestamp of the mint time\\n * @param lastRewardWithdrawalTime timestamp of last reward claim OR stake. Same as mintTime if not yet claimed.\\n * @param lastMaintenanceTime timestamp of the last maintenance (could be a date in the future in case of the upfront payment)\\n * @param presold flag that this gem was bought on presale, used to avoid double minting\\n*/\\n    struct Gem {\\n        uint8 gemTypeId;\\n        Booster booster;\\n        uint32 mintTime;\\n        uint32 lastRewardWithdrawalTime;\\n        uint32 lastMaintenanceTime;\\n        Fi fi;\\n        bool presold;\\n        uint256 maintenanceFeePaid;\\n    }\\n\\n\\n    struct MaintenanceFeeReductionRecord {\\n        uint256 timeOfReduction;\\n        uint256 maintenanceReductionPercent;\\n    }\\n\\n/**\\n*   @notice Main Contract Storage utilizing App Storage pattern for Diamond Proxy data organization\\n*   @param config main configuration, basically everything except gemType specific\\n*   @param gemTypes supported gem types with their details, gemTypeId is the index of the array\\n*   @param gems mapping indexed by tokenId, where tokenId is in the nft.allTokens\\n*   @param gemTypesMintWindows windows for limiting yield gem mints per gem type\\n*   @param defoTokenLimitWindow window for limiting DEFO Token sale\\n*   @param nft ERC721 standard related storage\\n*   @param total cumulated amounts for all operations\\n*   @param usersFi financial info per each user\\n*   @param usersNextGemBooster used for presale, number (uint256) of boosters (Booster) with a type (uint8) left for a user (address)\\n*/\\n    struct AppStorage {\\n        // configuration\\n        ProtocolConfig config;\\n        GemTypeConfig[] gemTypes;\\n        // current state\\n        GemTypeMintWindow[] gemTypesMintWindows;\\n        DEFOTokenLimitWindow defoTokenLimitWindow;\\n        mapping(uint256 => Gem) gems;\\n        ERC721Storage nft;\\n        // Cumulations\\n        Fi total;\\n        // User data, users list is s.nft.owners, size s.nft.allTokens.length (managed by ERC721Enumerable)\\n        mapping(address => Fi) usersFi;\\n        mapping(address => mapping(uint8 => mapping(Booster => uint256))) usersNextGemBooster;\\n        DEFOTokenLimitPerRewards defoTokenLimitPerRewards;\\n        address routerWallet;\\n        GemTypeConfig[] gemTypes2;\\n        MaintenanceFeeReductionRecord[] maintenanceFeeReductionTable;\\n        mapping(address => uint256) phase2DepositedToVault;\\n        mapping(address => uint256) phase2DaiReceived;\\n        uint256 p2CutOverTime;\\n        uint256 daiToDistribute;\\n        uint256 totalROT;\\n    }\\n\",\"keccak256\":\"0xd071fcd187113383ed74fdd659a37d6692dbf075f7c09dafb8d97ab75220d7f0\",\"license\":\"GPL-3.0\"},\"contracts/facets/RewardsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\nimport \\\"../interfaces/IRewards.sol\\\";\\nimport \\\"../interfaces/IDEXRouter02.sol\\\";\\nimport \\\"../base-facet/BaseFacet.sol\\\";\\nimport \\\"../libraries/LibDonations.sol\\\";\\nimport \\\"../libraries/LibMaintainer.sol\\\";\\nimport \\\"../libraries/PercentHelper.sol\\\";\\nimport \\\"../libraries/BoosterHelper.sol\\\";\\nimport \\\"../libraries/PeriodicHelper.sol\\\";\\nimport \\\"../libraries/TimeHelper.sol\\\";\\nimport \\\"../libraries/TaxHelper.sol\\\";\\nimport \\\"../libraries/FiHelper.sol\\\";\\n\\n/** @title  ERC721Facet EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable\\n*/\\ncontract RewardsFacet is BaseFacet, IRewards {\\n    using FiHelper for Fi;\\n    using BoosterHelper for Booster;\\n\\n    /* ====================== Modifiers ====================== */\\n    modifier onlyClaimable(uint256 _tokenId) {\\n        require(isClaimable(_tokenId), \\\"Not claimable\\\");\\n        _;\\n    }\\n\\n    modifier onlyP1Users() {\\n        address user = _msgSender();\\n        require(s.phase2DepositedToVault[user] == 0, \\\"ROT already deposited to the vault\\\");\\n        require(s.phase2DaiReceived[user] == 0, \\\"ROT already claimed\\\");\\n        _;\\n    }\\n\\n    modifier transitionP2Started() {\\n        require(s.p2CutOverTime > 0, \\\"Transition to Phase 2 has not started yet\\\");\\n        _;\\n    }\\n\\n    /* ============ External and Public Functions ============ */\\n    function claimReward(uint256 _tokenId) public onlyGemHolder(_tokenId) onlyClaimable(_tokenId) onlyP1Users {\\n        _claimRewardAmount(_tokenId, getRewardAmount(_tokenId));\\n    }\\n\\n    function batchClaimReward(uint256[] calldata _tokenids) external onlyP1Users {\\n        for (uint256 index = 0; index < _tokenids.length; index++) {\\n            claimReward(_tokenids[index]);\\n        }\\n    }\\n\\n    function stakeReward(uint256 _tokenId, uint256 _amount) onlyGemHolder(_tokenId) exists(_tokenId) onlyP1Users public {\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        address[WALLETS] storage wallets = s.config.wallets;\\n        address user = _msgSender();\\n        Fi memory op;\\n\\n        require(_amount > 0, \\\"Zero rewards for a gem\\\");\\n        uint256 rewardGross = getRewardAmount(_tokenId);\\n        require(_amount <= rewardGross, \\\"Not enough rewards\\\");\\n\\n        op.donated = PercentHelper.rate(_amount, s.config.charityContributionRate);\\n        op.stakedGross = _amount;\\n        op.stakedNet = _amount - op.donated;\\n\\n        _sellDefoAndDonate(op.donated);\\n        emit LibDonations.Donated(user, op.donated);\\n\\n\\n        defo.transferFrom(\\n            wallets[uint(Wallets.RewardPool)],\\n            wallets[uint(Wallets.Vault)],\\n            op.stakedNet);\\n        emit Staked(user, op.stakedGross, op.stakedNet);\\n\\n        op.updateStorage(_tokenId, user);\\n    }\\n\\n    function stakeAndClaim(uint256 _tokenId, uint256 _percent) public onlyGemHolder(_tokenId) onlyClaimable(_tokenId) onlyP1Users {\\n        uint256 reward = getRewardAmount(_tokenId);\\n        uint256 rewardToStake = PercentHelper.rate(reward, _percent);\\n        stakeReward(_tokenId, rewardToStake);\\n        claimReward(_tokenId);\\n    }\\n\\n\\n    function batchStakeReward(uint256[] calldata _tokenIds, uint256[] calldata _amounts) external onlyP1Users {\\n        require(_tokenIds.length == _amounts.length, \\\"DEFORewards:_tokendIds-_amounts-inconsistent\\\");\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            stakeReward(_tokenIds[i], _amounts[i]);\\n        }\\n    }\\n\\n    function batchStakeAndClaim(uint256[] calldata _tokenIds, uint256 _percent) external onlyP1Users {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            stakeAndClaim(_tokenIds[i], _percent);\\n        }\\n    }\\n\\n    function p2PutIntoVault() external onlyP1Users transitionP2Started {\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        address[WALLETS] storage wallets = s.config.wallets;\\n        address user = _msgSender();\\n        uint256 amount = getP2RotValue(user);\\n        defo.transferFrom(wallets[uint(Wallets.RewardPool)], wallets[uint(Wallets.Vault)], amount);\\n        s.phase2DepositedToVault[user] = amount;\\n    }\\n\\n    function p2ClaimDai() external onlyP1Users transitionP2Started {\\n        address user = _msgSender();\\n        uint256 daiToClaim = getP2DaiValue(user);\\n        s.phase2DaiReceived[user] = daiToClaim;\\n        IERC20 dai = s.config.paymentTokens[uint(PaymentTokens.Dai)];\\n        dai.transferFrom(s.config.wallets[uint(Wallets.Stabilizer)], user, daiToClaim);\\n    }\\n\\n    function getRewardAmount(uint256 _tokenId) public exists(_tokenId) view returns (uint256) {\\n        uint256 rewardToDate = _getCumulatedRewardAmountGross(_tokenId);\\n        rewardToDate += s.gems[_tokenId].fi.unStakedNet;\\n        rewardToDate -= s.gems[_tokenId].fi.claimedGross;\\n        rewardToDate -= s.gems[_tokenId].fi.stakedGross;\\n        return rewardToDate;\\n    }\\n\\n    function isClaimable(uint256 _tokenId) public view returns (bool) {\\n        return (\\n        TimeHelper.hasPassedFromOrNotHappenedYet(s.gems[_tokenId].lastRewardWithdrawalTime, s.config.rewardPeriod) &&\\n        LibMaintainer._getPendingMaintenanceFee(_tokenId) == 0 &&\\n        getRewardAmount(_tokenId) != 0);\\n    }\\n\\n    function getCumulatedReward() external view returns (uint256) {\\n        address user = _msgSender();\\n        uint256[] memory gemIds = _getGemIds(user);\\n        uint256 reward = 0;\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            reward += _getCumulatedRewardAmountGross(gemIds[i]);\\n        }\\n        return reward;\\n    }\\n\\n    function getCumulatedRewardAllUsers() external view returns (uint256 allForAllTotalReward_) {\\n        for (uint256 tokenId = 0; tokenId < s.nft.allTokens.length; tokenId++) {\\n            allForAllTotalReward_ += _getCumulatedRewardAmountGross(tokenId);\\n        }\\n    }\\n\\n\\n    function getStakedGross() external view returns (uint256) {\\n        return s.usersFi[_msgSender()].stakedGross - s.usersFi[_msgSender()].unStakedGrossUp;\\n    }\\n\\n    function getStakedGrossAllUsers() external view returns (uint256) {\\n        return s.total.stakedGross - s.total.unStakedGrossUp;\\n    }\\n\\n    function getTaxTier(uint256 _tokenId) public view returns (TaxTiers) {\\n        return TaxHelper.getTaxTier(uint32(block.timestamp) - s.gems[_tokenId].lastRewardWithdrawalTime);\\n    }\\n\\n\\n    function getP2RotValue(address user) public view returns (uint256){\\n        uint256[] memory gemIds = _getGemIds(user);\\n        uint256 rotValue = 0;\\n        uint256 rewardToDate = 0;\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            uint256 gemType = s.gems[gemIds[i]].gemTypeId;\\n            rotValue += s.gemTypes2[gemType].price[1];\\n            rewardToDate += _getCumulatedRewardAmountGross(gemIds[i]);\\n\\n        }\\n        return rotValue > rewardToDate ? rotValue - rewardToDate : 0;\\n    }\\n\\n    function getMyP2RotValue() external view returns (uint256){\\n        address user = _msgSender();\\n        return getP2RotValue(user);\\n    }\\n\\n    function getP2DaiValue(address user) public view returns (uint256){\\n        uint256 rotValue = getP2RotValue(user);\\n        return s.totalROT > 0 ? s.daiToDistribute * rotValue / s.totalROT : 0;\\n    }\\n\\n\\n    function getMyP2DaiValue() external view returns (uint256){\\n        address user = _msgSender();\\n        return getP2DaiValue(user);\\n    }\\n\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _claimRewardAmount(uint256 _tokenId, uint256 _amount) private {\\n        Gem storage gem = s.gems[_tokenId];\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        address[WALLETS] storage wallets = s.config.wallets;\\n\\n        require(_amount > 0, \\\"No amount to claim\\\");\\n\\n        Fi memory op;\\n        op.claimedGross = _amount;\\n\\n        TaxTiers taxTier = getTaxTier(_tokenId);\\n        op.claimTaxPaid = PercentHelper.rate(op.claimedGross, s.config.taxRates[uint256(taxTier)]);\\n        op.donated = PercentHelper.rate(op.claimedGross, s.config.charityContributionRate);\\n        op.claimedNet = op.claimedGross - op.claimTaxPaid - op.donated;\\n\\n        address user = _msgSender();\\n        _sellDefoAndDonate(op.donated);\\n        emit LibDonations.Donated(user, op.donated);\\n\\n        defo.transferFrom(\\n            wallets[uint(Wallets.RewardPool)],\\n            user,\\n            op.claimedNet);\\n        gem.lastRewardWithdrawalTime = uint32(block.timestamp);\\n        emit Claimed(user, op.claimedGross, op.claimedNet);\\n\\n        op.updateStorage(_tokenId, user);\\n    }\\n\\n\\n    function _sellDefoAndDonate(uint256 _donationAmountDefo) private {\\n        IERC20 defo = s.config.paymentTokens[uint(PaymentTokens.Defo)];\\n        address[WALLETS] storage wallets = s.config.wallets;\\n\\n        defo.transferFrom(\\n            wallets[uint(Wallets.RewardPool)],\\n            address(this),\\n            _donationAmountDefo);\\n\\n        address[] memory path1;\\n        path1 = new address[](2);\\n        path1[0] = address(s.config.paymentTokens[uint(PaymentTokens.Defo)]);\\n        path1[1] = address(s.config.paymentTokens[uint(PaymentTokens.Dai)]);\\n        IDEXRouter02(s.routerWallet).swapExactTokensForTokens(\\n            _donationAmountDefo,\\n            1,\\n            path1,\\n            wallets[uint(Wallets.Charity)],\\n            block.timestamp);\\n    }\\n\\n\\n    function _getCumulatedRewardAmountGross(uint256 _tokenId) internal view returns (uint256) {\\n        Gem memory gem = s.gems[_tokenId];\\n        GemTypeConfig memory gemType = s.gemTypes2[gem.gemTypeId];\\n        uint256 boostedRewardAmount = gem.booster.boostRewardsRate(gemType.rewardAmountDefo);\\n        uint256 toDate = s.p2CutOverTime > 0 ? s.p2CutOverTime : block.timestamp;\\n        if (toDate < gem.mintTime) {\\n            return 0;\\n        }\\n        uint256 totalReward = PeriodicHelper.calculateTaperedReward(\\n            toDate - gem.mintTime, //period to calculate\\n            gemType.taperRewardsThresholdDefo,\\n            s.config.taperRate,\\n            boostedRewardAmount,\\n            s.config.rewardPeriod);\\n        return totalReward;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdbb802181c3a5074b34cd19cbc934c5c2747639f36760966dde67aa33561681a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDEXRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\ninterface IDEXRouter02 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x7a0a222867ade851bef69811b328ed8229138c92a268e5677a535fdd071756a2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/** @title  IYieldGem EIP-2535 Diamond Facet\\n  * @author Decentralized Foundation Team\\n  * @notice Rewards Interface, operation with rewards: taxation, charity, claiming and putting to the vault\\n*/\\ninterface IRewards {\\n    event Claimed(address indexed user, uint256 amountGross, uint256 amountNet);\\n    event Staked(address indexed user, uint256 amountGross, uint256 amountNet);\\n\\n    function claimReward(uint256 _tokenId) external;\\n\\n    function batchClaimReward(uint256[] calldata _tokenids) external;\\n\\n    ///todo decide whether move this to the vault facet or not - (to keep all staking/unstaking in one place), or to leave it here (this is a facet working with rewards  which can be either claimed or staked)\\n    function stakeReward(uint256 _tokenId, uint256 _amount) external;\\n\\n    /**\\n*   @notice This is used for the Vault Strategy, it puts the percent of all rewards to the vault and claims the rest\\n    *   @param _tokenId unique NFT gem id\\n    *   @param _percent percent of what to put into the vault, as usual uses PRECISION_MULTIPLIER (which is 100 by defualt, e.g. 500 for 5%)\\n    */\\n    function stakeAndClaim(uint256 _tokenId, uint256 _percent) external;\\n\\n    function batchStakeReward(uint256[] calldata _tokenIds, uint256[] calldata _amounts) external;\\n\\n    function batchStakeAndClaim(uint256[] calldata _tokenIds, uint256 _percent) external;\\n\\n    /**\\n*   @notice reward earned by the sender to the moment ready to be claimed or put to vault\\n    *   @param _tokenId unique NFT gem id\\n    *   @return pre-tax unclaimed reward in DEFO,- before deducting tax or charity, ready to be claimed or put to vault\\n    */\\n    function getRewardAmount(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n*   @notice checks if rewards can be claimed or not\\n    *   @param _tokenId unique NFT gem id\\n    *   @return true or false, checks for the pending maintenance and time passed since last claim\\n    */\\n    function isClaimable(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n    *   @notice amount of pre-taxed total reward earned by the sender for all time\\n    *   @return amount in DEFO (in wei precision)\\n    */\\n    function getCumulatedReward() external view returns (uint256);\\n\\n    /**\\n    *   @notice amount of pre-taxed total reward earned by all the users for all time\\n    *   @return amount in DEFO (in wei precision)\\n    */\\n    function getCumulatedRewardAllUsers() external view returns (uint256);\\n\\n\\n    /**\\n    *   @notice amount of pre-taxed reward that are currently in the vault for the sender, so if put and then taken from the vault, it's not the return of the function\\n    *   @return total amount in DEFO (in wei precision)\\n    */\\n    function getStakedGross() external view returns (uint256);\\n\\n    /**\\n    *   @notice amount of pre-taxed reward that are currently in the vault for all users, it's not equal to the after-tax amount in the vault\\n    *   @return total amount in DEFO (in wei precision)\\n    */\\n    function getStakedGrossAllUsers() external view returns (uint256);\\n\\n    /**\\n    *   @notice gets tax tier for a gem\\n    *   @param _tokenId unique NFT gem id\\n    *   @return current tax tier of the gem might be configurable, now it's a number in the range starting from 0 when 0 means nothing is payed out since there's no rewards in the first week, 4 is no tax, 1,2,3 - % in between (currently 30,30,15)\\n    */\\n    function getTaxTier(uint256 _tokenId) external view returns (TaxTiers);\\n\\n\\n}\\n\",\"keccak256\":\"0x27cc915fb9656244386ffced4b1ccc290ecce16609d214243c748ab427c85cff\",\"license\":\"GPL-3.0\"},\"contracts/libraries/BoosterHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport {Booster} from \\\"../data-types/IDataTypes.sol\\\";\\nimport \\\"./PercentHelper.sol\\\";\\n\\n/// @notice Library to boost rates and fees\\n/// @author Decentralized Foundation\\n///todo utilize percenthelper\\nlibrary BoosterHelper {\\n    /// @notice boosting rewards rate (which is an amount per second), 50% for omega, 25% for delta\\n    function boostRewardsRate(Booster booster, uint256 rate) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            //50% more\\n            return rate * 15000 / 10000;\\n        } else if (booster == Booster.Delta) {\\n            //25% more\\n            return rate * 12500 / 10000;\\n        } else return rate;\\n    }\\n\\n    /// @notice reducing fees, 50% for omega, 25% reduction for delta\\n    function reduceMaintenanceFee(Booster booster, uint256 fee) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            return fee / 2;\\n        } else if (booster == Booster.Delta) {\\n            return fee * 7500 / 10000;\\n        } else return fee;\\n    }\\n\\n    function reduceVaultWithdrawalFee(Booster booster, uint256 fee) internal pure returns (uint256) {\\n        if (booster == Booster.Omega) {\\n            return fee * 1000 / 10000;\\n        } else if (booster == Booster.Delta) {\\n            return fee / 2;\\n        } else return fee;\\n    }\\n}\\n\",\"keccak256\":\"0xee7e3041146e7c8cf718966e77889b0bd8f631488dfc50bb7796e8b0292c3730\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FiHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/**\\n * @notice Library for Fi financial operations structure\\n * @author Decentralized Foundation Team\\n */\\n\\nlibrary FiHelper {\\n\\n    function updateStorage(Fi memory _add, uint256 _tokenId, address _user) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        Gem storage gem = s.gems[_tokenId];\\n\\n\\n        ///todo refactor financial consisitency checks into a separate function\\n        //        require(\\n        //            (_add.claimedGross - _add.claimTaxPaid - _add.donated == _add.claimedNet) &&\\n        //            (_add.unStakedGross - _add.vaultTaxPaid - _add.donated == _add.unStakedNet) &&\\n        //            (_add.stakedGross - _add.donated == _add.stakedNetstakedNet)\\n        //        , \\\"wrong financial operation structure\\\");\\n\\n        fiAdd(s.total, _add);\\n        fiAdd(gem.fi, _add);\\n        fiAdd(s.usersFi[_user], _add);\\n    }\\n\\n    function updateStorage(Fi memory _add, address _user) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        fiAdd(s.total, _add);\\n        fiAdd(s.usersFi[_user], _add);\\n    }\\n\\n    function fiAdd(Fi storage _initial, Fi memory _add) internal {\\n        _initial.claimedGross += _add.claimedGross;\\n        _initial.claimedNet += _add.claimedNet;\\n        _initial.stakedGross += _add.stakedGross;\\n        _initial.stakedNet += _add.stakedNet;\\n        _initial.unStakedGross += _add.unStakedGross;\\n        _initial.unStakedGrossUp += _add.unStakedGrossUp;\\n        _initial.unStakedNet += _add.unStakedNet;\\n        _initial.donated += _add.donated;\\n        _initial.claimTaxPaid += _add.claimTaxPaid;\\n        _initial.vaultTaxPaid += _add.vaultTaxPaid;\\n    }\\n\\n    function fiSubtract(Fi storage _initial, Fi memory _add) internal {\\n        _initial.claimedGross -= _add.claimedGross;\\n        _initial.claimedNet -= _add.claimedNet;\\n        _initial.stakedGross -= _add.stakedGross;\\n        _initial.stakedNet -= _add.stakedNet;\\n        _initial.unStakedGross -= _add.unStakedGross;\\n        _initial.unStakedGrossUp -= _add.unStakedGrossUp;\\n        _initial.unStakedNet -= _add.unStakedNet;\\n        _initial.donated -= _add.donated;\\n        _initial.claimTaxPaid -= _add.claimTaxPaid;\\n        _initial.vaultTaxPaid -= _add.vaultTaxPaid;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x30b98d43ee16ebc120bb25ebf47eb62087a717c8f6155d4470407cde6d6a57b8\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/** @title  LibAppStorage EIP-2535 Diamond Facet Storage\\n  * @author Decentralized Foundation Team\\n  * @notice This diamond storage library is inherited by all facets and imported in libraries\\n*/\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf2e84cec0bd10a28b47d23a086c1d77096efac4f3b3d6f1c132ebbe814c8b1d5\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibDonations.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n// helper for limit daily mints\\nlibrary LibDonations {\\n    event Donated(address indexed user, uint256 amount);\\n}\\n\",\"keccak256\":\"0xffec6a5e5edf3407bff6f08539b45c493f00d6bf32d10e1efdd12a28a3e7f757\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibMaintainer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\nimport \\\"./PercentHelper.sol\\\";\\nimport \\\"./BoosterHelper.sol\\\";\\nimport \\\"./PeriodicHelper.sol\\\";\\n\\n// helper for limit daily mints\\nlibrary LibMaintainer {\\n    function _getPendingMaintenanceFee(uint256 _tokenId) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        Gem storage gem = s.gems[_tokenId];\\n\\n        // time period checks - if it's not necessary or too early\\n        if (gem.lastMaintenanceTime >= block.timestamp)\\n            return 0;\\n        uint32 feePaymentPeriod = uint32(block.timestamp) - gem.mintTime;\\n        //\\\"Too soon, maintenance fee has not been yet accrued\\\");\\n        if (feePaymentPeriod <= s.config.maintenancePeriod)\\n            return 0;\\n        // amount calculation\\n        uint256 discountedFeeDai = BoosterHelper.reduceMaintenanceFee(gem.booster, s.gemTypes2[gem.gemTypeId].maintenanceFeeDai);\\n        uint256 feeAmount = PeriodicHelper.calculatePeriodicWithReductionTable(discountedFeeDai, s.maintenanceFeeReductionTable, gem.mintTime, s.config.maintenancePeriod);\\n        //        uint256 feeAmount = PeriodicHelper.calculatePeriodic(discountedFeeDai, gem.mintTime, s.config.maintenancePeriod);\\n        return feeAmount - gem.maintenanceFeePaid;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x50036e52234cda2c7ae98e6fffe6e0e4aad08afa3fe564cc86ab7fbf8ffde3e8\",\"license\":\"GPL-3.0\"},\"contracts/libraries/PercentHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n\\n/**\\n * @notice Library for percentage integer math, note PERCENTAGE_PRECISION_MULTIPLIER when configuring the protocol\\n * @author Decentralized Foundation Team\\n * @dev PERCENTAGE_PRECISION_MULTIPLIER*100 = 10000 greater than real percent, so 20% is represented as 2000, meaning 0.2\\n */\\n\\nlibrary PercentHelper {\\n    uint256 constant PERCENTAGE_PRECISION_MULTIPLIER = 100;\\n    uint256 constant HUNDRED_PERCENT = 100 * PERCENTAGE_PRECISION_MULTIPLIER;\\n\\n    /**\\n     * @dev simply a ratio of the given value, e.g. if tax is 30% and value if 100 the function gives 30\\n     * @param value Value to get ratio from\\n     * @param tax Percent to apply\\n     */\\n    ///todo make pure once got rid of the console.log\\n    function rate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (value * tax) / HUNDRED_PERCENT : 0;\\n    }\\n\\n    /**\\n    * @dev simple gross-up, gives back gross for net value, if charity is 5%, then gross up of 95 gives 100\\n     * @param netValue Net value to gross up\\n     * @param tax Percent that was applied\\n     */\\n    function grossUp(uint256 netValue, uint256 tax) internal pure returns (uint256) {\\n        return tax > 0 ? (netValue * HUNDRED_PERCENT) / (HUNDRED_PERCENT - tax) : 0;\\n    }\\n\\n\\n    /// @dev received inverted percent for taper calc, if ratio is 20%, then 1/(1-20%) = 25%\\n    function invertedRate(uint256 value, uint256 ratio) internal pure returns (uint256) {\\n        return value * HUNDRED_PERCENT / (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function oneHundredLessPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (HUNDRED_PERCENT - ratio);\\n    }\\n\\n    function minusHundredPercent(uint256 ratio) internal pure returns (uint256) {\\n        return (ratio - HUNDRED_PERCENT);\\n    }\\n\\n\\n    function reversePercent(uint256 ratio) internal pure returns (uint256) {\\n        return PERCENTAGE_PRECISION_MULTIPLIER / ratio;\\n    }\\n\\n    function percentPower(uint256 value, uint256 ratio, uint pow) internal pure returns (uint256) {\\n        return value * PERCENTAGE_PRECISION_MULTIPLIER ** pow / ratio ** pow;\\n    }\\n\\n\\n    /// @dev simply value less given percentage, e.g. if tax is 30% the functio gives 70 for 100\\n    function lessRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value - rate(value, tax);\\n    }\\n\\n    function plusRate(uint256 value, uint256 tax) internal pure returns (uint256) {\\n        return value + rate(value, tax);\\n    }\\n}\\n\",\"keccak256\":\"0x70d9a8e3cf2aad9102eda57cb8d7efacca2f96f89d50aef7c6088f522c4763ae\",\"license\":\"GPL-3.0\"},\"contracts/libraries/PeriodicHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./PercentHelper.sol\\\";\\nimport \\\"./BoosterHelper.sol\\\";\\nimport \\\"../data-types/IDataTypes.sol\\\";\\n\\n/// @notice Library for reward calculations\\n/// @author Decentralized Foundation\\nlibrary PeriodicHelper {\\n    using PercentHelper for uint256;\\n\\n    /// @dev calculates rewards with a second precision to a given date, not prorated to date\\n    function calculatePeriodicToDate(\\n        uint256 ratePerPeriod,\\n        uint32 lastEventTime,\\n        uint32 toDate,\\n        uint32 payOrDeductPeriod\\n    ) internal pure returns (uint) {\\n        return (toDate > lastEventTime) ? ((toDate - lastEventTime) / payOrDeductPeriod) * ratePerPeriod : 0;\\n    }\\n\\n    /// @dev calculates rewards with a second precision, not prorated to date\\n    function calculatePeriodic(\\n        uint256 ratePerPeriod,\\n        uint32 lastEventTime,\\n        uint32 payOrDeductPeriod\\n    ) internal view returns (uint) {\\n\\n        return calculatePeriodicToDate(ratePerPeriod, lastEventTime, uint32(block.timestamp), payOrDeductPeriod);\\n    }\\n\\n    /// @dev calculates rewards with a second precision, not prorated to date\\n    function calculatePeriodicWithReductionTable(\\n        uint256 ratePerPeriod,\\n        MaintenanceFeeReductionRecord[] storage reduction,\\n        uint32 lastEventTime,\\n        uint32 payOrDeductPeriod\\n    ) internal view returns (uint) {\\n        uint i = 0;\\n        uint amount = 0;\\n        uint32 toDate = lastEventTime + payOrDeductPeriod;\\n        while (toDate < uint32(block.timestamp)) {\\n            while (i < reduction.length && reduction[i].timeOfReduction < toDate) {\\n                i++;\\n            }\\n            i--;\\n            uint rate = ratePerPeriod.rate(reduction[i].maintenanceReductionPercent);\\n            amount += rate;\\n            toDate += payOrDeductPeriod;\\n        }\\n        return amount;\\n    }\\n\\n    // @notice Calculated Tapered Reward starting from the mint time. To get the reward call this function and subtract already paid from it.\\n    // @return taperedReward, updatedRewardRate\\n    function calculateTaperedReward(\\n        uint timePeriod, //block.timestamp - mintTime\\n        uint256 taperThreshold, //120 for diamond\\n        uint256 taperPercent, //80% usually, NOTE this is 80% but not 20%\\n        uint ratePerPeriod, //5 for diamond, pass already boosted rate if boost is applicable\\n        uint payOrDeductPeriod //in seconds, initially it's 1 week\\n    ) internal pure returns (uint256 taperedReward) {\\n        uint256 taperedPercent = taperPercent.oneHundredLessPercent();\\n        // Basically it's a geometric progression of the timestamps b_n = b_1*q_(n-1),\\n        // For simplicity startTime is zero, so timePeriod should be block.timestamp - startTime\\n        // where q = 1/taperedPercent, b_1 =  taperThreshold/ratePerPeriod\\n        // So that b_0 = taperThreshold/ratePerPeriod (which is 120/5= 24 weeks for the first taper from the startTime)\\n        // b_1 = taperThreshold/(ratePerPeriod*taperedPercent^1)  (which is 120/(5*0.8)= 30 weeks from the previous point to get 120 $DEFO by the tapered rate of 4)\\n        // b_2 = taperThreshold/(ratePerPeriod*taperedPercent^2)\\n        // ....\\n        // b_n = taperThreshold/(ratePerPeriod  *taperedPercent^n)\\n        // b_(n+1) = taperThreshold/(ratePerPeriod*taperedPercent^(n+1))\\n        // So that SUM_n_from_1_to_n(b_n)<=timePeriod, but SUM_n_from_1_to_(n+1)(b_n)>timePeriod\\n        // Actual points on the timeline are S_i which are sums of the taper intervals b_i\\n        //\\n        // 1. At first, lets' find n and S_n\\n        // Sum of geometric progression is Sn = b_1 * (q^n-1)/(q-1)\\n        // So we just loop to find while Sn<=timePeriod, so that Sn = taperThreshold/ratePerPeriod * (1/taperedPercent^n-1)/(1/taperedPercent -1)\\n        //\\n        // for example, for diamond gem: it's 120/5*(1/0.8**(N-1)-1)/(1/0.8-1)\\n        //\\n        // 2. Once we found n and S_n, the amount to pay would be taperThreshold*n+(timePeriod - S_n)*ratePerPeriod*taperedPercent^n\\n        // for example. if we got 100 weeks, n =3 and the formula is 120*3+(100-91.5)*5*0.8**3 = 381.76\\n        // We calculate the finalAmount and deduct what was paid already to calculate the payment.\\n        uint finalAmount;\\n        uint sN = 0;\\n        uint sNp1 = 0;\\n        //S_(n+1)\\n        uint n = 0;\\n        do {\\n            //this is the formula, but the percents are with precision multiplier\\n            //sN = taperThreshold/ratePerPeriod * (1/taperedPercent**n-1)/(1/taperedPercent -1);\\n            sN = sNp1;\\n            sNp1 = taperThreshold / ratePerPeriod *\\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT ** n / taperedPercent ** n - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER) /\\n            (PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER * PercentHelper.HUNDRED_PERCENT / taperedPercent - PercentHelper.PERCENTAGE_PRECISION_MULTIPLIER);\\n            n++;\\n        }\\n        while (payOrDeductPeriod * sNp1 <= timePeriod);\\n        n = n - 2;\\n        //convert sN to Seconds, that's just for the logs to show in weeks\\n        sN *= payOrDeductPeriod;\\n        //        uint bN = payOrDeductPeriod * taperThreshold / (ratePerPeriod * taperedPercent ** n);\\n        // The whole process makes sense if the current time is later than the 1st taper event\\n        uint finalRate;\\n        if (sN != 0 && timePeriod > sN) {\\n            finalRate = ratePerPeriod * taperedPercent ** (n) / PercentHelper.HUNDRED_PERCENT ** (n);\\n            finalAmount = taperThreshold * n + ((timePeriod - sN) / payOrDeductPeriod) * finalRate;\\n        }\\n        else {\\n            finalRate = ratePerPeriod;\\n            finalAmount = timePeriod / payOrDeductPeriod * ratePerPeriod;\\n        }\\n        return finalAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x776046cac205e2f4b87d3cbbb54107105fd43babcd7c6f0f4d0e0e33beab4081\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TaxHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./PercentHelper.sol\\\";\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/// @notice Library for withdrawal tax operations\\nlibrary TaxHelper {\\n    /// @dev gets an index to the taxTable\\n    /// @param _timeFromLastRewardWithdrawal time in seconds passed from the last claim or stake\\n    /// @return taxTier_ tax tier, can be a configurable mapping, now it's 0- 100% (rewards have not accrued yet), 1- 30%, 2-30%, 3- 15%, 4-0%.\\n    function getTaxTier(uint256 _timeFromLastRewardWithdrawal) internal view returns (TaxTiers taxTier_) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint32 scale = s.config.taxScaleSinceLastClaimPeriod;\\n\\n        taxTier_ = TaxTiers.Tier4NoTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 4) taxTier_ = TaxTiers.Tier3SmallTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 3) taxTier_ = TaxTiers.Tier2MediumTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 2) taxTier_ = TaxTiers.Tier1HugeTax;\\n        if (_timeFromLastRewardWithdrawal < scale * 1) taxTier_ = TaxTiers.Tier0NoPayment;\\n    }\\n\\n    /// @dev gets an index to taxRates from config\\n    /// @param _lastRewardWithdrawalTimestamp time in seconds of the last claim or stake to vault\\n    /// @return timestamp of the next tax tier change\\n    function wenNextTaxTier(uint32 _lastRewardWithdrawalTimestamp) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint32 scale = s.config.taxScaleSinceLastClaimPeriod;\\n\\n        if (_lastRewardWithdrawalTimestamp > uint32(block.timestamp)) {\\n            return 0;\\n        }\\n        uint256 _timeFromLastRewardWithdrawal = uint32(block.timestamp) - _lastRewardWithdrawalTimestamp;\\n        if (_timeFromLastRewardWithdrawal > scale * 4)\\n            return 0;\\n        else\\n            return _lastRewardWithdrawalTimestamp + scale;\\n    }\\n\\n    /// function retrieves tax rate for given tax tier\\n    function getTaxRate(TaxTiers _taxTier) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.config.taxRates[uint256(_taxTier)];\\n    }\\n}\\n\",\"keccak256\":\"0x34878351c0e713530b4762b7139f603504a40267093da4f92b0621f9fc14c3c4\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TimeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/// @notice Operations with time periods and durations\\nlibrary TimeHelper {\\n    function hasPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 lockPeriod) internal view returns (bool) {\\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent > lockPeriod);\\n    }\\n\\n    function notPassedFromOrNotHappenedYet(uint256 timeEvent, uint256 freePeriod) internal view returns (bool) {\\n        return (timeEvent > block.timestamp || block.timestamp - timeEvent < freePeriod);\\n    }\\n}\\n\",\"keccak256\":\"0x7f6ce8b464efa3f9a47d7fcaed8830e2890e160e6bac07e7c38171aa48460e3a\",\"license\":\"GPL-3.0\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612753806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806394c0734b116100ad578063be9dbb1511610071578063be9dbb151461022f578063c760da0414610237578063c84993af1461024a578063d8e1214f1461025d578063ea9e8a191461026557600080fd5b806394c0734b146101e6578063a4ff6c48146101ee578063ae169a5014610201578063b68a0ff614610214578063b816b65d1461021c57600080fd5b8063608eccc3116100f4578063608eccc314610182578063647e4f821461019557806364eff7651461019d57806383b4c865146101b057806389610a09146101c357600080fd5b806306547abd146101265780630a5626db1461014f5780633efbce8b146101655780634d0c509e1461016d575b600080fd5b6101396101343660046120e1565b61026d565b6040516101469190612110565b60405180910390f35b6101576102a7565b604051908152602001610146565b6101576102e0565b61018061017b366004612184565b6102fc565b005b6101576101903660046121d0565b6103c4565b6101806104c7565b6101576101ab3660046121d0565b610628565b6101806101be3660046121f9565b610667565b6101d66101d13660046120e1565b6107a3565b6040519015158152602001610146565b610157610800565b6101806101fc366004612265565b610817565b61018061020f3660046120e1565b610978565b610157610aba565b61018061022a366004612265565b610b1c565b610157610e50565b610180610245366004612287565b610e66565b6101576102583660046120e1565b610f1d565b610157610f96565b610180611004565b60008181526020805260408120546102a19061029690600160301b900463ffffffff16426122df565b63ffffffff1661117d565b92915050565b6000805b602b548110156102dc576102be81611212565b6102c89083612304565b9150806102d48161231c565b9150506102ab565b5090565b6000806102eb6114c5565b90506102f681610628565b91505090565b60006103066114c5565b6001600160a01b0381166000908152603f6020526040902054909150156103485760405162461bcd60e51b815260040161033f90612335565b60405180910390fd5b6001600160a01b0381166000908152604060208190529020541561037e5760405162461bcd60e51b815260040161033f90612377565b60005b838110156103bd576103ab85858381811061039e5761039e6123a4565b9050602002013584610817565b806103b58161231c565b915050610381565b5050505050565b6000806103d083611521565b905060008060005b83518110156104a55760008060200160008684815181106103fb576103fb6123a4565b602090810291909101810151825281019190915260400160002054603d805460ff90921692509082908110610432576104326123a4565b9060005260206000209060060201600201600160028110610455576104556123a4565b01546104619085612304565b9350610485858381518110610478576104786123a4565b6020026020010151611212565b61048f9084612304565b925050808061049d9061231c565b9150506103d8565b508082116104b45760006104be565b6104be81836123ba565b95945050505050565b60006104d16114c5565b6001600160a01b0381166000908152603f60205260409020549091501561050a5760405162461bcd60e51b815260040161033f90612335565b6001600160a01b038116600090815260406020819052902054156105405760405162461bcd60e51b815260040161033f90612377565b60415461055f5760405162461bcd60e51b815260040161033f906123d1565b60006105696114c5565b9050600061057682610628565b6001600160a01b0383166000908152604060208190528120829055909150808001546001600160a01b03169050806323b872dd60026003015460405160e083901b6001600160e01b03191681526001600160a01b0391821660048201529086166024820152604481018590526064016020604051808303816000875af1158015610604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bd919061241a565b600080610634836103c4565b604354909150610645576000610660565b60435460425461065690839061243c565b610660919061245b565b9392505050565b60006106716114c5565b6001600160a01b0381166000908152603f6020526040902054909150156106aa5760405162461bcd60e51b815260040161033f90612335565b6001600160a01b038116600090815260406020819052902054156106e05760405162461bcd60e51b815260040161033f90612377565b8382146107445760405162461bcd60e51b815260206004820152602c60248201527f4445464f526577617264733a5f746f6b656e644964732d5f616d6f756e74732d60448201526b1a5b98dbdb9cda5cdd195b9d60a21b606482015260840161033f565b60005b8481101561079b57610789868683818110610764576107646123a4565b9050602002013585858481811061077d5761077d6123a4565b90506020020135610b1c565b806107938161231c565b915050610747565b505050505050565b6000818152602080526040812054600f546107d69163ffffffff600160301b909104811691640100000000900416611646565b80156107e857506107e682611664565b155b80156102a157506107f882610f1d565b151592915050565b603354603054600091610812916123ba565b905090565b816108206114c5565b6000828152602460205260409020546001600160a01b039081169116146108825760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b604482015260640161033f565b8261088c816107a3565b6108c85760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b604482015260640161033f565b60006108d26114c5565b6001600160a01b0381166000908152603f60205260409020549091501561090b5760405162461bcd60e51b815260040161033f90612335565b6001600160a01b038116600090815260406020819052902054156109415760405162461bcd60e51b815260040161033f90612377565b600061094c86610f1d565b9050600061095a828761175a565b90506109668782610b1c565b61096f87610978565b50505050505050565b806109816114c5565b6000828152602460205260409020546001600160a01b039081169116146109e35760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b604482015260640161033f565b816109ed816107a3565b610a295760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b604482015260640161033f565b6000610a336114c5565b6001600160a01b0381166000908152603f602052604090205490915015610a6c5760405162461bcd60e51b815260040161033f90612335565b6001600160a01b03811660009081526040602081905290205415610aa25760405162461bcd60e51b815260040161033f90612377565b610ab484610aaf86610f1d565b61177f565b50505050565b600080610ac56114c5565b90506000610ad282611521565b90506000805b8251811015610b1457610af6838281518110610478576104786123a4565b610b009083612304565b915080610b0c8161231c565b915050610ad8565b509392505050565b81610b256114c5565b6000828152602460205260409020546001600160a01b03908116911614610b875760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b604482015260640161033f565b82610b91816119d1565b6000610b9b6114c5565b6001600160a01b0381166000908152603f602052604090205490915015610bd45760405162461bcd60e51b815260040161033f90612335565b6001600160a01b03811660009081526040602081905290205415610c0a5760405162461bcd60e51b815260040161033f90612377565b6001546001600160a01b031660026000610c226114c5565b9050610c2c61208e565b60008811610c7c5760405162461bcd60e51b815260206004820152601660248201527f5a65726f207265776172647320666f7220612067656d00000000000000000000604482015260640161033f565b6000610c878a610f1d565b905080891115610cce5760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f756768207265776172647360701b604482015260640161033f565b601554610cdc908a9061175a565b60e08301819052604083018a9052610cf4908a6123ba565b606083015260e0820151610d0790611a38565b826001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438360e00151604051610d4691815260200190565b60405180910390a26001600160a01b0385166323b872dd85600101546001600160a01b03168660050154606086015160405160e085901b6001600160e01b03191681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded919061241a565b506040808301516060840151825191825260208201526001600160a01b038516917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a2610e44828b85611bd3565b50505050505050505050565b600080610e5b6114c5565b90506102f6816103c4565b6000610e706114c5565b6001600160a01b0381166000908152603f602052604090205490915015610ea95760405162461bcd60e51b815260040161033f90612335565b6001600160a01b03811660009081526040602081905290205415610edf5760405162461bcd60e51b815260040161033f90612377565b60005b82811015610ab457610f0b848483818110610eff57610eff6123a4565b90506020020135610978565b80610f158161231c565b915050610ee2565b600081610f29816119d1565b6000610f3484611212565b6000858152602080526040902060070154909150610f529082612304565b6000858152602080526040902060010154909150610f7090826123ba565b6000858152602080526040902060030154909150610f8e90826123ba565b949350505050565b6000603881610fa36114c5565b6001600160a01b03166001600160a01b031681526020019081526020016000206005015460006038016000610fd66114c5565b6001600160a01b03166001600160a01b031681526020019081526020016000206002015461081291906123ba565b600061100e6114c5565b6001600160a01b0381166000908152603f6020526040902054909150156110475760405162461bcd60e51b815260040161033f90612335565b6001600160a01b0381166000908152604060208190529020541561107d5760405162461bcd60e51b815260040161033f90612377565b60415461109c5760405162461bcd60e51b815260040161033f906123d1565b6001546001600160a01b0316600260006110b46114c5565b905060006110c1826103c4565b90506001600160a01b0384166323b872dd84600101546001600160a01b0316856005015460405160e084901b6001600160e01b03191681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af1158015611139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115d919061241a565b506001600160a01b039091166000908152603f6020526040902055505050565b600f5460049060009068010000000000000000900463ffffffff166111a2818461247d565b63ffffffff168410156111b457600392505b6111bf81600361247d565b63ffffffff168410156111d157600292505b6111dc81600261247d565b63ffffffff168410156111ee57600192505b6111f981600161247d565b63ffffffff1684101561120b57600092505b5050919050565b6000818152602080805260408083208151610100808201909352815460ff80821683528695929492850192909104166002811115611252576112526120fa565b6002811115611263576112636120fa565b81526020016000820160029054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160069054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600a9054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160018201604051806101400160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250508152602001600b820160009054906101000a900460ff16151515158152602001600c820154815250509050600080603d01826000015160ff1681548110611397576113976123a4565b90600052602060002090600602016040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015611400576020028201915b8154815260200190600101908083116113ec575b50505050508152602001600482015481526020016005820154815250509050600061144582602001518460200151600281111561143f5761143f6120fa565b90611c1c565b90506000806000604101541161145b574261145f565b6041545b9050836040015163ffffffff1681101561147f5750600095945050505050565b60006114ba856040015163ffffffff168361149a91906123ba565b6060860151601754600f548790640100000000900463ffffffff16611c86565b979650505050505050565b600030330361151b57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b0316915061151e9050565b50335b90565b6001600160a01b0381166000908152602560205260408120546060918167ffffffffffffffff811115611556576115566124a9565b60405190808252806020026020018201604052801561157f578160200160208202803683370190505b50905060005b82811015610b14576001600160a01b03851660009081526029602090815260408083208484529091529020546115d2816000908152602460205260409020546001600160a01b0316151590565b6116155760405162461bcd60e51b8152602060048201526014602482015273412067656d20646f65736e27742065786973747360601b604482015260640161033f565b80838381518110611628576116286123a4565b6020908102919091010152508061163e8161231c565b915050611585565b60004283118061066057508161165c84426123ba565b119392505050565b600081815260208052604081208054829190426a010000000000000000000090910463ffffffff161061169b575060009392505050565b80546000906116b69062010000900463ffffffff16426122df565b600f84015490915063ffffffff908116908216116116d957506000949350505050565b8154603d8401805460009261171b9260ff6101008304811693919216908110611704576117046123a4565b906000526020600020906006020160000154611e15565b8354600f860154919250600091611748918491603e89019163ffffffff6201000090910481169116611e63565b905083600c0154816114ba91906123ba565b600080821161176a576000610660565b61177560648061243c565b610656838561243c565b600082815260208052604090206001546001600160a01b03166002836117dc5760405162461bcd60e51b81526020600482015260126024820152714e6f20616d6f756e7420746f20636c61696d60701b604482015260640161033f565b6117e461208e565b84815260006117f28761026d565b825190915061182690601083600481111561180f5761180f6120fa565b6005811061181f5761181f6123a4565b015461175a565b610100830152815160155461183b919061175a565b60e08301819052610100830151835161185491906123ba565b61185e91906123ba565b6020830152600061186d6114c5565b905061187c8360e00151611a38565b806001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438460e001516040516118bb91815260200190565b60405180910390a26001600160a01b0385166323b872dd8560010154602086015160405160e084901b6001600160e01b03191681526001600160a01b039283166004820152918516602483015260448201526064016020604051808303816000875af115801561192f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611953919061241a565b50855469ffffffff0000000000001916600160301b4263ffffffff1602178655825160208085015160408051938452918301526001600160a01b038316917f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a910160405180910390a26119c7838983611bd3565b5050505050505050565b6000818152602460205260409020546001600160a01b0316611a355760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e4964206973206e6f742076616c696400000000604482015260640161033f565b50565b600080600101546001600160a01b031690506002816323b872dd826001015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152306024820152604481018690526064016020604051808303816000875af1158015611aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ace919061241a565b506040805160028082526060808301845292602083019080368337505060015482519293506001600160a01b031691839150600090611b0f57611b0f6123a4565b6001600160a01b039283166020918202929092010152600054825191169082906001908110611b4057611b406123a4565b6001600160a01b039283166020918202929092010152603c546004808501546040516338ed173960e01b8152928416936338ed173993611b8c938a9360019389939116914291016124bf565b6000604051808303816000875af1158015611bab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103bd9190810190612530565b60008281526020805260408120611beb602e86611f49565b611bf88160010186611f49565b6001600160a01b038316600090815260388301602052604090206103bd9086611f49565b60006002836002811115611c3257611c326120fa565b03611c5757612710611c4683613a9861243c565b611c50919061245b565b90506102a1565b6001836002811115611c6b57611c6b6120fa565b03611c7f57612710611c46836130d461243c565b50806102a1565b600080611c9285612076565b905060008080805b819250606485606480611cad919061243c565b611cb890606461243c565b611cc2919061245b565b611ccc91906123ba565b6064611cd883886126d2565b83611ce460648061243c565b611cee91906126d2565b611cf990606461243c565b611d03919061245b565b611d0d91906123ba565b611d178a8d61245b565b611d21919061243c565b611d2b919061245b565b915080611d378161231c565b91508b9050611d46838961243c565b1115611c9a57611d576002826123ba565b9050611d63878461243c565b925060008315801590611d755750838c115b15611deb5781611d8660648061243c565b611d9091906126d2565b611d9a83886126d2565b611da4908b61243c565b611dae919061245b565b90508088611dbc868f6123ba565b611dc6919061245b565b611dd0919061243c565b611dda838d61243c565b611de49190612304565b9450611e05565b508780611df8898e61245b565b611e02919061243c565b94505b50929a9950505050505050505050565b60006002836002811115611e2b57611e2b6120fa565b03611e3b57611c5060028361245b565b6001836002811115611e4f57611e4f6120fa565b03611c7f57612710611c4683611d4c61243c565b6000808080611e7285876126de565b90505b4263ffffffff168163ffffffff161015611f3e575b865483108015611ec257508063ffffffff16878481548110611eae57611eae6123a4565b906000526020600020906002020160000154105b15611ed95782611ed18161231c565b935050611e8a565b82611ee381612706565b9350506000611f1e888581548110611efd57611efd6123a4565b9060005260206000209060020201600101548a61175a90919063ffffffff16565b9050611f2a8184612304565b9250611f3686836126de565b915050611e75565b509695505050505050565b805182548390600090611f5d908490612304565b90915550506020810151600183018054600090611f7b908490612304565b90915550506040810151600283018054600090611f99908490612304565b90915550506060810151600383018054600090611fb7908490612304565b90915550506080810151600483018054600090611fd5908490612304565b909155505060a0810151600583018054600090611ff3908490612304565b909155505060c0810151600683018054600090612011908490612304565b909155505060e081015160078301805460009061202f908490612304565b909155505061010081015160088301805460009061204e908490612304565b909155505061012081015160098301805460009061206d908490612304565b90915550505050565b60008161208460648061243c565b6102a191906123ba565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156120f357600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016005831061213257634e487b7160e01b600052602160045260246000fd5b91905290565b60008083601f84011261214a57600080fd5b50813567ffffffffffffffff81111561216257600080fd5b6020830191508360208260051b850101111561217d57600080fd5b9250929050565b60008060006040848603121561219957600080fd5b833567ffffffffffffffff8111156121b057600080fd5b6121bc86828701612138565b909790965060209590950135949350505050565b6000602082840312156121e257600080fd5b81356001600160a01b038116811461066057600080fd5b6000806000806040858703121561220f57600080fd5b843567ffffffffffffffff8082111561222757600080fd5b61223388838901612138565b9096509450602087013591508082111561224c57600080fd5b5061225987828801612138565b95989497509550505050565b6000806040838503121561227857600080fd5b50508035926020909101359150565b6000806020838503121561229a57600080fd5b823567ffffffffffffffff8111156122b157600080fd5b6122bd85828601612138565b90969095509350505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff838116908316818110156122fc576122fc6122c9565b039392505050565b60008219821115612317576123176122c9565b500190565b60006001820161232e5761232e6122c9565b5060010190565b60208082526022908201527f524f5420616c7265616479206465706f736974656420746f20746865207661756040820152611b1d60f21b606082015260800190565b6020808252601390820152721493d508185b1c9958591e4818db185a5b5959606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000828210156123cc576123cc6122c9565b500390565b60208082526029908201527f5472616e736974696f6e20746f205068617365203220686173206e6f74207374604082015268185c9d1959081e595d60ba1b606082015260800190565b60006020828403121561242c57600080fd5b8151801515811461066057600080fd5b6000816000190483118215151615612456576124566122c9565b500290565b60008261247857634e487b7160e01b600052601260045260246000fd5b500490565b600063ffffffff808316818516818304811182151516156124a0576124a06122c9565b02949350505050565b634e487b7160e01b600052604160045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561250f5784516001600160a01b0316835293830193918301916001016124ea565b50506001600160a01b03969096166060850152505050608001529392505050565b6000602080838503121561254357600080fd5b825167ffffffffffffffff8082111561255b57600080fd5b818501915085601f83011261256f57600080fd5b815181811115612581576125816124a9565b8060051b604051601f19603f830116810181811085821117156125a6576125a66124a9565b6040529182528482019250838101850191888311156125c457600080fd5b938501935b828510156125e2578451845293850193928501926125c9565b98975050505050505050565b600181815b8085111561262957816000190482111561260f5761260f6122c9565b8085161561261c57918102915b93841c93908002906125f3565b509250929050565b600082612640575060016102a1565b8161264d575060006102a1565b8160018114612663576002811461266d57612689565b60019150506102a1565b60ff84111561267e5761267e6122c9565b50506001821b6102a1565b5060208310610133831016604e8410600b84101617156126ac575081810a6102a1565b6126b683836125ee565b80600019048211156126ca576126ca6122c9565b029392505050565b60006106608383612631565b600063ffffffff8083168185168083038211156126fd576126fd6122c9565b01949350505050565b600081612715576127156122c9565b50600019019056fea2646970667358221220bdb743e197a7e34e77d6bfa40fa6454141476995e120dee3dbcaab20b850f45664736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806394c0734b116100ad578063be9dbb1511610071578063be9dbb151461022f578063c760da0414610237578063c84993af1461024a578063d8e1214f1461025d578063ea9e8a191461026557600080fd5b806394c0734b146101e6578063a4ff6c48146101ee578063ae169a5014610201578063b68a0ff614610214578063b816b65d1461021c57600080fd5b8063608eccc3116100f4578063608eccc314610182578063647e4f821461019557806364eff7651461019d57806383b4c865146101b057806389610a09146101c357600080fd5b806306547abd146101265780630a5626db1461014f5780633efbce8b146101655780634d0c509e1461016d575b600080fd5b6101396101343660046120e1565b61026d565b6040516101469190612110565b60405180910390f35b6101576102a7565b604051908152602001610146565b6101576102e0565b61018061017b366004612184565b6102fc565b005b6101576101903660046121d0565b6103c4565b6101806104c7565b6101576101ab3660046121d0565b610628565b6101806101be3660046121f9565b610667565b6101d66101d13660046120e1565b6107a3565b6040519015158152602001610146565b610157610800565b6101806101fc366004612265565b610817565b61018061020f3660046120e1565b610978565b610157610aba565b61018061022a366004612265565b610b1c565b610157610e50565b610180610245366004612287565b610e66565b6101576102583660046120e1565b610f1d565b610157610f96565b610180611004565b60008181526020805260408120546102a19061029690600160301b900463ffffffff16426122df565b63ffffffff1661117d565b92915050565b6000805b602b548110156102dc576102be81611212565b6102c89083612304565b9150806102d48161231c565b9150506102ab565b5090565b6000806102eb6114c5565b90506102f681610628565b91505090565b60006103066114c5565b6001600160a01b0381166000908152603f6020526040902054909150156103485760405162461bcd60e51b815260040161033f90612335565b60405180910390fd5b6001600160a01b0381166000908152604060208190529020541561037e5760405162461bcd60e51b815260040161033f90612377565b60005b838110156103bd576103ab85858381811061039e5761039e6123a4565b9050602002013584610817565b806103b58161231c565b915050610381565b5050505050565b6000806103d083611521565b905060008060005b83518110156104a55760008060200160008684815181106103fb576103fb6123a4565b602090810291909101810151825281019190915260400160002054603d805460ff90921692509082908110610432576104326123a4565b9060005260206000209060060201600201600160028110610455576104556123a4565b01546104619085612304565b9350610485858381518110610478576104786123a4565b6020026020010151611212565b61048f9084612304565b925050808061049d9061231c565b9150506103d8565b508082116104b45760006104be565b6104be81836123ba565b95945050505050565b60006104d16114c5565b6001600160a01b0381166000908152603f60205260409020549091501561050a5760405162461bcd60e51b815260040161033f90612335565b6001600160a01b038116600090815260406020819052902054156105405760405162461bcd60e51b815260040161033f90612377565b60415461055f5760405162461bcd60e51b815260040161033f906123d1565b60006105696114c5565b9050600061057682610628565b6001600160a01b0383166000908152604060208190528120829055909150808001546001600160a01b03169050806323b872dd60026003015460405160e083901b6001600160e01b03191681526001600160a01b0391821660048201529086166024820152604481018590526064016020604051808303816000875af1158015610604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bd919061241a565b600080610634836103c4565b604354909150610645576000610660565b60435460425461065690839061243c565b610660919061245b565b9392505050565b60006106716114c5565b6001600160a01b0381166000908152603f6020526040902054909150156106aa5760405162461bcd60e51b815260040161033f90612335565b6001600160a01b038116600090815260406020819052902054156106e05760405162461bcd60e51b815260040161033f90612377565b8382146107445760405162461bcd60e51b815260206004820152602c60248201527f4445464f526577617264733a5f746f6b656e644964732d5f616d6f756e74732d60448201526b1a5b98dbdb9cda5cdd195b9d60a21b606482015260840161033f565b60005b8481101561079b57610789868683818110610764576107646123a4565b9050602002013585858481811061077d5761077d6123a4565b90506020020135610b1c565b806107938161231c565b915050610747565b505050505050565b6000818152602080526040812054600f546107d69163ffffffff600160301b909104811691640100000000900416611646565b80156107e857506107e682611664565b155b80156102a157506107f882610f1d565b151592915050565b603354603054600091610812916123ba565b905090565b816108206114c5565b6000828152602460205260409020546001600160a01b039081169116146108825760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b604482015260640161033f565b8261088c816107a3565b6108c85760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b604482015260640161033f565b60006108d26114c5565b6001600160a01b0381166000908152603f60205260409020549091501561090b5760405162461bcd60e51b815260040161033f90612335565b6001600160a01b038116600090815260406020819052902054156109415760405162461bcd60e51b815260040161033f90612377565b600061094c86610f1d565b9050600061095a828761175a565b90506109668782610b1c565b61096f87610978565b50505050505050565b806109816114c5565b6000828152602460205260409020546001600160a01b039081169116146109e35760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b604482015260640161033f565b816109ed816107a3565b610a295760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420636c61696d61626c6560981b604482015260640161033f565b6000610a336114c5565b6001600160a01b0381166000908152603f602052604090205490915015610a6c5760405162461bcd60e51b815260040161033f90612335565b6001600160a01b03811660009081526040602081905290205415610aa25760405162461bcd60e51b815260040161033f90612377565b610ab484610aaf86610f1d565b61177f565b50505050565b600080610ac56114c5565b90506000610ad282611521565b90506000805b8251811015610b1457610af6838281518110610478576104786123a4565b610b009083612304565b915080610b0c8161231c565b915050610ad8565b509392505050565b81610b256114c5565b6000828152602460205260409020546001600160a01b03908116911614610b875760405162461bcd60e51b8152602060048201526016602482015275596f7520646f6e2774206f776e20746869732067656d60501b604482015260640161033f565b82610b91816119d1565b6000610b9b6114c5565b6001600160a01b0381166000908152603f602052604090205490915015610bd45760405162461bcd60e51b815260040161033f90612335565b6001600160a01b03811660009081526040602081905290205415610c0a5760405162461bcd60e51b815260040161033f90612377565b6001546001600160a01b031660026000610c226114c5565b9050610c2c61208e565b60008811610c7c5760405162461bcd60e51b815260206004820152601660248201527f5a65726f207265776172647320666f7220612067656d00000000000000000000604482015260640161033f565b6000610c878a610f1d565b905080891115610cce5760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f756768207265776172647360701b604482015260640161033f565b601554610cdc908a9061175a565b60e08301819052604083018a9052610cf4908a6123ba565b606083015260e0820151610d0790611a38565b826001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438360e00151604051610d4691815260200190565b60405180910390a26001600160a01b0385166323b872dd85600101546001600160a01b03168660050154606086015160405160e085901b6001600160e01b03191681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded919061241a565b506040808301516060840151825191825260208201526001600160a01b038516917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a2610e44828b85611bd3565b50505050505050505050565b600080610e5b6114c5565b90506102f6816103c4565b6000610e706114c5565b6001600160a01b0381166000908152603f602052604090205490915015610ea95760405162461bcd60e51b815260040161033f90612335565b6001600160a01b03811660009081526040602081905290205415610edf5760405162461bcd60e51b815260040161033f90612377565b60005b82811015610ab457610f0b848483818110610eff57610eff6123a4565b90506020020135610978565b80610f158161231c565b915050610ee2565b600081610f29816119d1565b6000610f3484611212565b6000858152602080526040902060070154909150610f529082612304565b6000858152602080526040902060010154909150610f7090826123ba565b6000858152602080526040902060030154909150610f8e90826123ba565b949350505050565b6000603881610fa36114c5565b6001600160a01b03166001600160a01b031681526020019081526020016000206005015460006038016000610fd66114c5565b6001600160a01b03166001600160a01b031681526020019081526020016000206002015461081291906123ba565b600061100e6114c5565b6001600160a01b0381166000908152603f6020526040902054909150156110475760405162461bcd60e51b815260040161033f90612335565b6001600160a01b0381166000908152604060208190529020541561107d5760405162461bcd60e51b815260040161033f90612377565b60415461109c5760405162461bcd60e51b815260040161033f906123d1565b6001546001600160a01b0316600260006110b46114c5565b905060006110c1826103c4565b90506001600160a01b0384166323b872dd84600101546001600160a01b0316856005015460405160e084901b6001600160e01b03191681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af1158015611139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115d919061241a565b506001600160a01b039091166000908152603f6020526040902055505050565b600f5460049060009068010000000000000000900463ffffffff166111a2818461247d565b63ffffffff168410156111b457600392505b6111bf81600361247d565b63ffffffff168410156111d157600292505b6111dc81600261247d565b63ffffffff168410156111ee57600192505b6111f981600161247d565b63ffffffff1684101561120b57600092505b5050919050565b6000818152602080805260408083208151610100808201909352815460ff80821683528695929492850192909104166002811115611252576112526120fa565b6002811115611263576112636120fa565b81526020016000820160029054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160069054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600a9054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160018201604051806101400160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250508152602001600b820160009054906101000a900460ff16151515158152602001600c820154815250509050600080603d01826000015160ff1681548110611397576113976123a4565b90600052602060002090600602016040518060a0016040529081600082015481526020016001820154815260200160028201600280602002604051908101604052809291908260028015611400576020028201915b8154815260200190600101908083116113ec575b50505050508152602001600482015481526020016005820154815250509050600061144582602001518460200151600281111561143f5761143f6120fa565b90611c1c565b90506000806000604101541161145b574261145f565b6041545b9050836040015163ffffffff1681101561147f5750600095945050505050565b60006114ba856040015163ffffffff168361149a91906123ba565b6060860151601754600f548790640100000000900463ffffffff16611c86565b979650505050505050565b600030330361151b57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b0316915061151e9050565b50335b90565b6001600160a01b0381166000908152602560205260408120546060918167ffffffffffffffff811115611556576115566124a9565b60405190808252806020026020018201604052801561157f578160200160208202803683370190505b50905060005b82811015610b14576001600160a01b03851660009081526029602090815260408083208484529091529020546115d2816000908152602460205260409020546001600160a01b0316151590565b6116155760405162461bcd60e51b8152602060048201526014602482015273412067656d20646f65736e27742065786973747360601b604482015260640161033f565b80838381518110611628576116286123a4565b6020908102919091010152508061163e8161231c565b915050611585565b60004283118061066057508161165c84426123ba565b119392505050565b600081815260208052604081208054829190426a010000000000000000000090910463ffffffff161061169b575060009392505050565b80546000906116b69062010000900463ffffffff16426122df565b600f84015490915063ffffffff908116908216116116d957506000949350505050565b8154603d8401805460009261171b9260ff6101008304811693919216908110611704576117046123a4565b906000526020600020906006020160000154611e15565b8354600f860154919250600091611748918491603e89019163ffffffff6201000090910481169116611e63565b905083600c0154816114ba91906123ba565b600080821161176a576000610660565b61177560648061243c565b610656838561243c565b600082815260208052604090206001546001600160a01b03166002836117dc5760405162461bcd60e51b81526020600482015260126024820152714e6f20616d6f756e7420746f20636c61696d60701b604482015260640161033f565b6117e461208e565b84815260006117f28761026d565b825190915061182690601083600481111561180f5761180f6120fa565b6005811061181f5761181f6123a4565b015461175a565b610100830152815160155461183b919061175a565b60e08301819052610100830151835161185491906123ba565b61185e91906123ba565b6020830152600061186d6114c5565b905061187c8360e00151611a38565b806001600160a01b03167f2a01595cddf097c90216094025db714da3f4e5bd8877b56ba86a24ecead8e5438460e001516040516118bb91815260200190565b60405180910390a26001600160a01b0385166323b872dd8560010154602086015160405160e084901b6001600160e01b03191681526001600160a01b039283166004820152918516602483015260448201526064016020604051808303816000875af115801561192f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611953919061241a565b50855469ffffffff0000000000001916600160301b4263ffffffff1602178655825160208085015160408051938452918301526001600160a01b038316917f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a910160405180910390a26119c7838983611bd3565b5050505050505050565b6000818152602460205260409020546001600160a01b0316611a355760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e4964206973206e6f742076616c696400000000604482015260640161033f565b50565b600080600101546001600160a01b031690506002816323b872dd826001015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152306024820152604481018690526064016020604051808303816000875af1158015611aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ace919061241a565b506040805160028082526060808301845292602083019080368337505060015482519293506001600160a01b031691839150600090611b0f57611b0f6123a4565b6001600160a01b039283166020918202929092010152600054825191169082906001908110611b4057611b406123a4565b6001600160a01b039283166020918202929092010152603c546004808501546040516338ed173960e01b8152928416936338ed173993611b8c938a9360019389939116914291016124bf565b6000604051808303816000875af1158015611bab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103bd9190810190612530565b60008281526020805260408120611beb602e86611f49565b611bf88160010186611f49565b6001600160a01b038316600090815260388301602052604090206103bd9086611f49565b60006002836002811115611c3257611c326120fa565b03611c5757612710611c4683613a9861243c565b611c50919061245b565b90506102a1565b6001836002811115611c6b57611c6b6120fa565b03611c7f57612710611c46836130d461243c565b50806102a1565b600080611c9285612076565b905060008080805b819250606485606480611cad919061243c565b611cb890606461243c565b611cc2919061245b565b611ccc91906123ba565b6064611cd883886126d2565b83611ce460648061243c565b611cee91906126d2565b611cf990606461243c565b611d03919061245b565b611d0d91906123ba565b611d178a8d61245b565b611d21919061243c565b611d2b919061245b565b915080611d378161231c565b91508b9050611d46838961243c565b1115611c9a57611d576002826123ba565b9050611d63878461243c565b925060008315801590611d755750838c115b15611deb5781611d8660648061243c565b611d9091906126d2565b611d9a83886126d2565b611da4908b61243c565b611dae919061245b565b90508088611dbc868f6123ba565b611dc6919061245b565b611dd0919061243c565b611dda838d61243c565b611de49190612304565b9450611e05565b508780611df8898e61245b565b611e02919061243c565b94505b50929a9950505050505050505050565b60006002836002811115611e2b57611e2b6120fa565b03611e3b57611c5060028361245b565b6001836002811115611e4f57611e4f6120fa565b03611c7f57612710611c4683611d4c61243c565b6000808080611e7285876126de565b90505b4263ffffffff168163ffffffff161015611f3e575b865483108015611ec257508063ffffffff16878481548110611eae57611eae6123a4565b906000526020600020906002020160000154105b15611ed95782611ed18161231c565b935050611e8a565b82611ee381612706565b9350506000611f1e888581548110611efd57611efd6123a4565b9060005260206000209060020201600101548a61175a90919063ffffffff16565b9050611f2a8184612304565b9250611f3686836126de565b915050611e75565b509695505050505050565b805182548390600090611f5d908490612304565b90915550506020810151600183018054600090611f7b908490612304565b90915550506040810151600283018054600090611f99908490612304565b90915550506060810151600383018054600090611fb7908490612304565b90915550506080810151600483018054600090611fd5908490612304565b909155505060a0810151600583018054600090611ff3908490612304565b909155505060c0810151600683018054600090612011908490612304565b909155505060e081015160078301805460009061202f908490612304565b909155505061010081015160088301805460009061204e908490612304565b909155505061012081015160098301805460009061206d908490612304565b90915550505050565b60008161208460648061243c565b6102a191906123ba565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156120f357600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016005831061213257634e487b7160e01b600052602160045260246000fd5b91905290565b60008083601f84011261214a57600080fd5b50813567ffffffffffffffff81111561216257600080fd5b6020830191508360208260051b850101111561217d57600080fd5b9250929050565b60008060006040848603121561219957600080fd5b833567ffffffffffffffff8111156121b057600080fd5b6121bc86828701612138565b909790965060209590950135949350505050565b6000602082840312156121e257600080fd5b81356001600160a01b038116811461066057600080fd5b6000806000806040858703121561220f57600080fd5b843567ffffffffffffffff8082111561222757600080fd5b61223388838901612138565b9096509450602087013591508082111561224c57600080fd5b5061225987828801612138565b95989497509550505050565b6000806040838503121561227857600080fd5b50508035926020909101359150565b6000806020838503121561229a57600080fd5b823567ffffffffffffffff8111156122b157600080fd5b6122bd85828601612138565b90969095509350505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff838116908316818110156122fc576122fc6122c9565b039392505050565b60008219821115612317576123176122c9565b500190565b60006001820161232e5761232e6122c9565b5060010190565b60208082526022908201527f524f5420616c7265616479206465706f736974656420746f20746865207661756040820152611b1d60f21b606082015260800190565b6020808252601390820152721493d508185b1c9958591e4818db185a5b5959606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000828210156123cc576123cc6122c9565b500390565b60208082526029908201527f5472616e736974696f6e20746f205068617365203220686173206e6f74207374604082015268185c9d1959081e595d60ba1b606082015260800190565b60006020828403121561242c57600080fd5b8151801515811461066057600080fd5b6000816000190483118215151615612456576124566122c9565b500290565b60008261247857634e487b7160e01b600052601260045260246000fd5b500490565b600063ffffffff808316818516818304811182151516156124a0576124a06122c9565b02949350505050565b634e487b7160e01b600052604160045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561250f5784516001600160a01b0316835293830193918301916001016124ea565b50506001600160a01b03969096166060850152505050608001529392505050565b6000602080838503121561254357600080fd5b825167ffffffffffffffff8082111561255b57600080fd5b818501915085601f83011261256f57600080fd5b815181811115612581576125816124a9565b8060051b604051601f19603f830116810181811085821117156125a6576125a66124a9565b6040529182528482019250838101850191888311156125c457600080fd5b938501935b828510156125e2578451845293850193928501926125c9565b98975050505050505050565b600181815b8085111561262957816000190482111561260f5761260f6122c9565b8085161561261c57918102915b93841c93908002906125f3565b509250929050565b600082612640575060016102a1565b8161264d575060006102a1565b8160018114612663576002811461266d57612689565b60019150506102a1565b60ff84111561267e5761267e6122c9565b50506001821b6102a1565b5060208310610133831016604e8410600b84101617156126ac575081810a6102a1565b6126b683836125ee565b80600019048211156126ca576126ca6122c9565b029392505050565b60006106608383612631565b600063ffffffff8083168185168083038211156126fd576126fd6122c9565b01949350505050565b600081612715576127156122c9565b50600019019056fea2646970667358221220bdb743e197a7e34e77d6bfa40fa6454141476995e120dee3dbcaab20b850f45664736f6c634300080f0033",
  "devdoc": {
    "author": "Decentralized Foundation Team",
    "kind": "dev",
    "methods": {
      "getCumulatedReward()": {
        "returns": {
          "_0": "amount in DEFO (in wei precision)"
        }
      },
      "getCumulatedRewardAllUsers()": {
        "returns": {
          "allForAllTotalReward_": "amount in DEFO (in wei precision)"
        }
      },
      "getRewardAmount(uint256)": {
        "params": {
          "_tokenId": "unique NFT gem id"
        },
        "returns": {
          "_0": "pre-tax unclaimed reward in DEFO,- before deducting tax or charity, ready to be claimed or put to vault"
        }
      },
      "getStakedGross()": {
        "returns": {
          "_0": "total amount in DEFO (in wei precision)"
        }
      },
      "getStakedGrossAllUsers()": {
        "returns": {
          "_0": "total amount in DEFO (in wei precision)"
        }
      },
      "getTaxTier(uint256)": {
        "params": {
          "_tokenId": "unique NFT gem id"
        },
        "returns": {
          "_0": "current tax tier of the gem might be configurable, now it's a number in the range starting from 0 when 0 means nothing is payed out since there's no rewards in the first week, 4 is no tax, 1,2,3 - % in between (currently 30,30,15)"
        }
      },
      "isClaimable(uint256)": {
        "params": {
          "_tokenId": "unique NFT gem id"
        },
        "returns": {
          "_0": "true or false, checks for the pending maintenance and time passed since last claim"
        }
      },
      "stakeAndClaim(uint256,uint256)": {
        "params": {
          "_percent": "percent of what to put into the vault, as usual uses PRECISION_MULTIPLIER (which is 100 by defualt, e.g. 500 for 5%)",
          "_tokenId": "unique NFT gem id"
        }
      }
    },
    "title": "ERC721Facet EIP-2535 Diamond Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCumulatedReward()": {
        "notice": "amount of pre-taxed total reward earned by the sender for all time"
      },
      "getCumulatedRewardAllUsers()": {
        "notice": "amount of pre-taxed total reward earned by all the users for all time"
      },
      "getRewardAmount(uint256)": {
        "notice": "reward earned by the sender to the moment ready to be claimed or put to vault"
      },
      "getStakedGross()": {
        "notice": "amount of pre-taxed reward that are currently in the vault for the sender, so if put and then taken from the vault, it's not the return of the function"
      },
      "getStakedGrossAllUsers()": {
        "notice": "amount of pre-taxed reward that are currently in the vault for all users, it's not equal to the after-tax amount in the vault"
      },
      "getTaxTier(uint256)": {
        "notice": "gets tax tier for a gem"
      },
      "isClaimable(uint256)": {
        "notice": "checks if rewards can be claimed or not"
      },
      "stakeAndClaim(uint256,uint256)": {
        "notice": "This is used for the Vault Strategy, it puts the percent of all rewards to the vault and claims the rest"
      },
      "stakeReward(uint256,uint256)": {
        "notice": "todo decide whether move this to the vault facet or not - (to keep all staking/unstaking in one place), or to leave it here (this is a facet working with rewards  which can be either claimed or staked)"
      }
    },
    "notice": "The Contract uses diamond storage providing functionality of ERC721, ERC721Enumerable, ERC721Burnable, ERC721Pausable",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4283,
        "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4568_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)7_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[7]",
        "numberOfBytes": "224"
      },
      "t_array(t_array(t_uint256)3_storage)2_storage": {
        "base": "t_array(t_uint256)3_storage",
        "encoding": "inplace",
        "label": "uint256[3][2]",
        "numberOfBytes": "192"
      },
      "t_array(t_contract(IERC20)737)2_storage": {
        "base": "t_contract(IERC20)737",
        "encoding": "inplace",
        "label": "contract IERC20[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(GemTypeConfig)4429_storage)dyn_storage": {
        "base": "t_struct(GemTypeConfig)4429_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(GemTypeMintWindow)4434_storage)dyn_storage": {
        "base": "t_struct(GemTypeMintWindow)4434_storage",
        "encoding": "dynamic_array",
        "label": "struct GemTypeMintWindow[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MaintenanceFeeReductionRecord)4501_storage)dyn_storage": {
        "base": "t_struct(MaintenanceFeeReductionRecord)4501_storage",
        "encoding": "dynamic_array",
        "label": "struct MaintenanceFeeReductionRecord[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)737": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Booster)4456": {
        "encoding": "inplace",
        "label": "enum Booster",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => mapping(enum Booster => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256))"
      },
      "t_mapping(t_address,t_struct(Fi)4477_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Fi)",
        "numberOfBytes": "32",
        "value": "t_struct(Fi)4477_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Booster)4456,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Booster)4456",
        "label": "mapping(enum Booster => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Gem)4496_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Gem)",
        "numberOfBytes": "32",
        "value": "t_struct(Gem)4496_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(enum Booster => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Booster)4456,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4568_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4504,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "config",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ProtocolConfig)4416_storage"
          },
          {
            "astId": 4508,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gemTypes",
            "offset": 0,
            "slot": "28",
            "type": "t_array(t_struct(GemTypeConfig)4429_storage)dyn_storage"
          },
          {
            "astId": 4512,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gemTypesMintWindows",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_struct(GemTypeMintWindow)4434_storage)dyn_storage"
          },
          {
            "astId": 4515,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "defoTokenLimitWindow",
            "offset": 0,
            "slot": "30",
            "type": "t_struct(DEFOTokenLimitWindow)4443_storage"
          },
          {
            "astId": 4520,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gems",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_uint256,t_struct(Gem)4496_storage)"
          },
          {
            "astId": 4523,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "nft",
            "offset": 0,
            "slot": "33",
            "type": "t_struct(ERC721Storage)4351_storage"
          },
          {
            "astId": 4526,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "total",
            "offset": 0,
            "slot": "46",
            "type": "t_struct(Fi)4477_storage"
          },
          {
            "astId": 4531,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "usersFi",
            "offset": 0,
            "slot": "56",
            "type": "t_mapping(t_address,t_struct(Fi)4477_storage)"
          },
          {
            "astId": 4540,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "usersNextGemBooster",
            "offset": 0,
            "slot": "57",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_enum(Booster)4456,t_uint256)))"
          },
          {
            "astId": 4543,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "defoTokenLimitPerRewards",
            "offset": 0,
            "slot": "58",
            "type": "t_struct(DEFOTokenLimitPerRewards)4452_storage"
          },
          {
            "astId": 4545,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "routerWallet",
            "offset": 0,
            "slot": "60",
            "type": "t_address"
          },
          {
            "astId": 4549,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gemTypes2",
            "offset": 0,
            "slot": "61",
            "type": "t_array(t_struct(GemTypeConfig)4429_storage)dyn_storage"
          },
          {
            "astId": 4553,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maintenanceFeeReductionTable",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_struct(MaintenanceFeeReductionRecord)4501_storage)dyn_storage"
          },
          {
            "astId": 4557,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "phase2DepositedToVault",
            "offset": 0,
            "slot": "63",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4561,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "phase2DaiReceived",
            "offset": 0,
            "slot": "64",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4563,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "p2CutOverTime",
            "offset": 0,
            "slot": "65",
            "type": "t_uint256"
          },
          {
            "astId": 4565,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "daiToDistribute",
            "offset": 0,
            "slot": "66",
            "type": "t_uint256"
          },
          {
            "astId": 4567,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "totalROT",
            "offset": 0,
            "slot": "67",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "2176"
      },
      "t_struct(Counter)2737_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2736,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DEFOTokenLimitPerRewards)4452_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitPerRewards",
        "members": [
          {
            "astId": 4447,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4451,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "timeOfWindowStart",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DEFOTokenLimitWindow)4443_storage": {
        "encoding": "inplace",
        "label": "struct DEFOTokenLimitWindow",
        "members": [
          {
            "astId": 4438,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokensSold",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4442,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "timeOfLastSale",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefoTokenLimitConfig)4375_storage": {
        "encoding": "inplace",
        "label": "struct DefoTokenLimitConfig",
        "members": [
          {
            "astId": 4370,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "saleLimitPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4372,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "saleLimitAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4374,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "limitByReward",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ERC721Storage)4351_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage",
        "members": [
          {
            "astId": 4306,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4308,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4311,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokenIdTracker",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Counter)2737_storage"
          },
          {
            "astId": 4315,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "owners",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4319,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "balances",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4323,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "tokenApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4329,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "operatorApprovals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 4331,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4337,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "ownedTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 4341,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "ownedTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4344,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "allTokens",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4348,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "allTokensIndex",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4350,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "init",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Fi)4477_storage": {
        "encoding": "inplace",
        "label": "struct Fi",
        "members": [
          {
            "astId": 4458,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "claimedGross",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4460,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "claimedNet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4462,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "stakedGross",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4464,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "stakedNet",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4466,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "unStakedGross",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4468,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "unStakedGrossUp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4470,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "unStakedNet",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4472,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "donated",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4474,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "claimTaxPaid",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4476,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "vaultTaxPaid",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Gem)4496_storage": {
        "encoding": "inplace",
        "label": "struct Gem",
        "members": [
          {
            "astId": 4479,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "gemTypeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4482,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "booster",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Booster)4456"
          },
          {
            "astId": 4484,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintTime",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4486,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "lastRewardWithdrawalTime",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4488,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "lastMaintenanceTime",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4491,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "fi",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Fi)4477_storage"
          },
          {
            "astId": 4493,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "presold",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 4495,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maintenanceFeePaid",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(GemTypeConfig)4429_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeConfig",
        "members": [
          {
            "astId": 4418,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maintenanceFeeDai",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4420,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "rewardAmountDefo",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4424,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 4426,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taperRewardsThresholdDefo",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4428,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maxMintsPerLimitWindow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(GemTypeMintWindow)4434_storage": {
        "encoding": "inplace",
        "label": "struct GemTypeMintWindow",
        "members": [
          {
            "astId": 4431,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4433,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "endOfMintLimitWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MaintenanceFeeReductionRecord)4501_storage": {
        "encoding": "inplace",
        "label": "struct MaintenanceFeeReductionRecord",
        "members": [
          {
            "astId": 4498,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "timeOfReduction",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4500,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maintenanceReductionPercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProtocolConfig)4416_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolConfig",
        "members": [
          {
            "astId": 4380,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "paymentTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20)737)2_storage"
          },
          {
            "astId": 4384,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "wallets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)7_storage"
          },
          {
            "astId": 4390,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "incomeDistributionOnMint",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_array(t_uint256)3_storage)2_storage"
          },
          {
            "astId": 4392,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "maintenancePeriod",
            "offset": 0,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4394,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "rewardPeriod",
            "offset": 4,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4396,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taxScaleSinceLastClaimPeriod",
            "offset": 8,
            "slot": "15",
            "type": "t_uint32"
          },
          {
            "astId": 4400,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taxRates",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_uint256)5_storage"
          },
          {
            "astId": 4402,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "charityContributionRate",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 4404,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "vaultWithdrawalTaxRate",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 4406,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "taperRate",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 4408,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintLock",
            "offset": 0,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4410,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "transferLock",
            "offset": 1,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 4412,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "mintLimitWindow",
            "offset": 2,
            "slot": "24",
            "type": "t_uint32"
          },
          {
            "astId": 4415,
            "contract": "contracts/facets/RewardsFacet.sol:RewardsFacet",
            "label": "defoTokenLimitConfig",
            "offset": 0,
            "slot": "25",
            "type": "t_struct(DefoTokenLimitConfig)4375_storage"
          }
        ],
        "numberOfBytes": "896"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}